library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity ADC is
    Port (
	 -- Global variables
		clk : in STD_LOGIC;
		clock_out: out std_LOGIC;
		DataOut : out std_LOGIC_vector(11 downto 0);
		
	 -- Required ADC communication serial
		ADC_CONVST : out STD_LOGIC; -- ADC Conversion Start
		ADC_SCK : out STD_LOGIC; -- ADC CLOCK
		ADC_SDI : out STD_LOGIC; -- FPGA to ADC
		ADC_SDO : in STD_LOGIC -- ADC to FPGA
		
	 -- 
		
    );
end ADC;


--	Steps for comm:
--		1. Get CS : 0 (active low) / Start conversion ! 
--		2. Send 6 bits to ADC: first: S/D -> O/S -> S1 -> S0 -> UNI -> last: SLP
--		3. Be able to get commands from ESP using GPIO (includes coding esp and web application <EZ>)


architecture ARC_ADC of ADC IS
-- Any signals
	signal Cou : STD_LOGIC_vector(3 downto 0) := "0000";
	signal CS : STD_LOGIC := '1';
	signal sclk : STD_LOGIC;
	
	-- Recognition bits;
	signal ADD4 : STD_LOGIC := '0'; -- O/S
	signal ADD3 : STD_LOGIC := '0'; -- S1
	signal ADD2 : STD_LOGIC := '0'; -- S0
	signal ADD1 : STD_LOGIC := '1'; -- UNI
	signal ADD0 : STD_LOGIC := '0'; -- SLP
	
	-- Measure Data
	signal DataTemp : STD_LOGIC_vector(11 downto 0) := (others => '0');
	
begin
-- Any Process
	process(clk)
	begin
	-- Get counter running up
		if clk'event and clk='1' then
			if Cou < 15 then 
				if Cou = 1 then 
					CS <= '0';
				end if;

				Cou <= Cou+1;

			else
				Cou <= (others => '0');
			end if;
		end if;
		
		-- Forcing SCLK to mimic CLK, if ChipSelect is 1 then its not active , otherwise if its active assign it to real fpga clock.
		if CS = '1' then
				SCLK <= '1';
		else
				SCLK <= clk;
		end if;
		
		-- Sending recognition bits - channel select etc. 
		if clk'event and clk='1' then
			case Cou is
				when "0011" =>
					ADC_SDI <= ADD5;
				when "0100" =>
					ADC_SDI <= ADD4;
				when "0101" =>
					ADC_SDI <= ADD3;
				when "0110" =>
					ADC_SDI <= ADD2;
				when "0111" =>
					ADC_SDI <= ADD1;
				when "1000" =>
					ADC_SDI <= ADD0;
				when others =>
				
			end case;
		end if;
		
		-- Finally !!! Getting 12bits of valuessssssss!
		if clk'event and clk='0' then -- on docs it seems like sdout is shifted out on falling edge.
			case Cou is
				when "0011" => -- 3
					DataOut <= DataTemp;
				when "0110" => -- 6
					DataTemp(11) <= ADC_SDO;
				when "0111" => -- 7
					DataTemp(10) <= ADC_SDO;
				when "1000" => -- 8
					DataTemp(9) <= ADC_SDO;
				when "1001" => -- 9
					DataTemp(8) <= ADC_SDO;
				when "1010" => -- 10
					DataTemp(7) <= ADC_SDO;
				when "1011" => -- 11
					DataTemp(6) <= ADC_SDO;
					clock_out <= '1'; -- We want to "awake" the ADC, so we pinging it.
				when "1100" => -- 12
					DataTemp(5) <= ADC_SDO;
					clock_out <= '0'; -- We want to "awake" the ADC, so we pinging it.
				when "1101" => -- 13
					DataTemp(4) <= ADC_SDO;
				when "1110" => -- 14
					DataTemp(3) <= ADC_SDO;
				when "1111" => -- 15
					DataTemp(2) <= ADC_SDO;
				when "0000" => -- 0
					DataTemp(1) <= ADC_SDO;
				when "0001" => -- 1
					DataTemp(0) <= ADC_SDO;
				when others =>
				
			end case;
		end if;
		
	-- Assigning all signals to outputs
		ADC_CONVST <= CS;
		ADC_SCK <= sclk;
--		DataOut <= DataTemp; useless bc we assign it when count is 3
	end process;
end architecture ARC_ADC;