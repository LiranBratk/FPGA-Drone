// soc_system_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module soc_system_mm_interconnect_1 (
		input  wire [11:0] hps_0_h2f_axi_master_awid,                                        //                                       hps_0_h2f_axi_master.awid
		input  wire [29:0] hps_0_h2f_axi_master_awaddr,                                      //                                                           .awaddr
		input  wire [3:0]  hps_0_h2f_axi_master_awlen,                                       //                                                           .awlen
		input  wire [2:0]  hps_0_h2f_axi_master_awsize,                                      //                                                           .awsize
		input  wire [1:0]  hps_0_h2f_axi_master_awburst,                                     //                                                           .awburst
		input  wire [1:0]  hps_0_h2f_axi_master_awlock,                                      //                                                           .awlock
		input  wire [3:0]  hps_0_h2f_axi_master_awcache,                                     //                                                           .awcache
		input  wire [2:0]  hps_0_h2f_axi_master_awprot,                                      //                                                           .awprot
		input  wire        hps_0_h2f_axi_master_awvalid,                                     //                                                           .awvalid
		output wire        hps_0_h2f_axi_master_awready,                                     //                                                           .awready
		input  wire [11:0] hps_0_h2f_axi_master_wid,                                         //                                                           .wid
		input  wire [63:0] hps_0_h2f_axi_master_wdata,                                       //                                                           .wdata
		input  wire [7:0]  hps_0_h2f_axi_master_wstrb,                                       //                                                           .wstrb
		input  wire        hps_0_h2f_axi_master_wlast,                                       //                                                           .wlast
		input  wire        hps_0_h2f_axi_master_wvalid,                                      //                                                           .wvalid
		output wire        hps_0_h2f_axi_master_wready,                                      //                                                           .wready
		output wire [11:0] hps_0_h2f_axi_master_bid,                                         //                                                           .bid
		output wire [1:0]  hps_0_h2f_axi_master_bresp,                                       //                                                           .bresp
		output wire        hps_0_h2f_axi_master_bvalid,                                      //                                                           .bvalid
		input  wire        hps_0_h2f_axi_master_bready,                                      //                                                           .bready
		input  wire [11:0] hps_0_h2f_axi_master_arid,                                        //                                                           .arid
		input  wire [29:0] hps_0_h2f_axi_master_araddr,                                      //                                                           .araddr
		input  wire [3:0]  hps_0_h2f_axi_master_arlen,                                       //                                                           .arlen
		input  wire [2:0]  hps_0_h2f_axi_master_arsize,                                      //                                                           .arsize
		input  wire [1:0]  hps_0_h2f_axi_master_arburst,                                     //                                                           .arburst
		input  wire [1:0]  hps_0_h2f_axi_master_arlock,                                      //                                                           .arlock
		input  wire [3:0]  hps_0_h2f_axi_master_arcache,                                     //                                                           .arcache
		input  wire [2:0]  hps_0_h2f_axi_master_arprot,                                      //                                                           .arprot
		input  wire        hps_0_h2f_axi_master_arvalid,                                     //                                                           .arvalid
		output wire        hps_0_h2f_axi_master_arready,                                     //                                                           .arready
		output wire [11:0] hps_0_h2f_axi_master_rid,                                         //                                                           .rid
		output wire [63:0] hps_0_h2f_axi_master_rdata,                                       //                                                           .rdata
		output wire [1:0]  hps_0_h2f_axi_master_rresp,                                       //                                                           .rresp
		output wire        hps_0_h2f_axi_master_rlast,                                       //                                                           .rlast
		output wire        hps_0_h2f_axi_master_rvalid,                                      //                                                           .rvalid
		input  wire        hps_0_h2f_axi_master_rready,                                      //                                                           .rready
		input  wire [11:0] hps_0_h2f_lw_axi_master_awid,                                     //                                    hps_0_h2f_lw_axi_master.awid
		input  wire [20:0] hps_0_h2f_lw_axi_master_awaddr,                                   //                                                           .awaddr
		input  wire [3:0]  hps_0_h2f_lw_axi_master_awlen,                                    //                                                           .awlen
		input  wire [2:0]  hps_0_h2f_lw_axi_master_awsize,                                   //                                                           .awsize
		input  wire [1:0]  hps_0_h2f_lw_axi_master_awburst,                                  //                                                           .awburst
		input  wire [1:0]  hps_0_h2f_lw_axi_master_awlock,                                   //                                                           .awlock
		input  wire [3:0]  hps_0_h2f_lw_axi_master_awcache,                                  //                                                           .awcache
		input  wire [2:0]  hps_0_h2f_lw_axi_master_awprot,                                   //                                                           .awprot
		input  wire        hps_0_h2f_lw_axi_master_awvalid,                                  //                                                           .awvalid
		output wire        hps_0_h2f_lw_axi_master_awready,                                  //                                                           .awready
		input  wire [11:0] hps_0_h2f_lw_axi_master_wid,                                      //                                                           .wid
		input  wire [31:0] hps_0_h2f_lw_axi_master_wdata,                                    //                                                           .wdata
		input  wire [3:0]  hps_0_h2f_lw_axi_master_wstrb,                                    //                                                           .wstrb
		input  wire        hps_0_h2f_lw_axi_master_wlast,                                    //                                                           .wlast
		input  wire        hps_0_h2f_lw_axi_master_wvalid,                                   //                                                           .wvalid
		output wire        hps_0_h2f_lw_axi_master_wready,                                   //                                                           .wready
		output wire [11:0] hps_0_h2f_lw_axi_master_bid,                                      //                                                           .bid
		output wire [1:0]  hps_0_h2f_lw_axi_master_bresp,                                    //                                                           .bresp
		output wire        hps_0_h2f_lw_axi_master_bvalid,                                   //                                                           .bvalid
		input  wire        hps_0_h2f_lw_axi_master_bready,                                   //                                                           .bready
		input  wire [11:0] hps_0_h2f_lw_axi_master_arid,                                     //                                                           .arid
		input  wire [20:0] hps_0_h2f_lw_axi_master_araddr,                                   //                                                           .araddr
		input  wire [3:0]  hps_0_h2f_lw_axi_master_arlen,                                    //                                                           .arlen
		input  wire [2:0]  hps_0_h2f_lw_axi_master_arsize,                                   //                                                           .arsize
		input  wire [1:0]  hps_0_h2f_lw_axi_master_arburst,                                  //                                                           .arburst
		input  wire [1:0]  hps_0_h2f_lw_axi_master_arlock,                                   //                                                           .arlock
		input  wire [3:0]  hps_0_h2f_lw_axi_master_arcache,                                  //                                                           .arcache
		input  wire [2:0]  hps_0_h2f_lw_axi_master_arprot,                                   //                                                           .arprot
		input  wire        hps_0_h2f_lw_axi_master_arvalid,                                  //                                                           .arvalid
		output wire        hps_0_h2f_lw_axi_master_arready,                                  //                                                           .arready
		output wire [11:0] hps_0_h2f_lw_axi_master_rid,                                      //                                                           .rid
		output wire [31:0] hps_0_h2f_lw_axi_master_rdata,                                    //                                                           .rdata
		output wire [1:0]  hps_0_h2f_lw_axi_master_rresp,                                    //                                                           .rresp
		output wire        hps_0_h2f_lw_axi_master_rlast,                                    //                                                           .rlast
		output wire        hps_0_h2f_lw_axi_master_rvalid,                                   //                                                           .rvalid
		input  wire        hps_0_h2f_lw_axi_master_rready,                                   //                                                           .rready
		input  wire        clk_0_clk_clk,                                                    //                                                  clk_0_clk.clk
		input  wire        dma_0_reset_reset_bridge_in_reset_reset,                          //                          dma_0_reset_reset_bridge_in_reset.reset
		input  wire        fpga_only_master_clk_reset_reset_bridge_in_reset_reset,           //           fpga_only_master_clk_reset_reset_bridge_in_reset.reset
		input  wire        hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire [17:0] dma_0_read_master_address,                                        //                                          dma_0_read_master.address
		output wire        dma_0_read_master_waitrequest,                                    //                                                           .waitrequest
		input  wire        dma_0_read_master_chipselect,                                     //                                                           .chipselect
		input  wire        dma_0_read_master_read,                                           //                                                           .read
		output wire [63:0] dma_0_read_master_readdata,                                       //                                                           .readdata
		output wire        dma_0_read_master_readdatavalid,                                  //                                                           .readdatavalid
		input  wire [17:0] dma_0_write_master_address,                                       //                                         dma_0_write_master.address
		output wire        dma_0_write_master_waitrequest,                                   //                                                           .waitrequest
		input  wire [7:0]  dma_0_write_master_byteenable,                                    //                                                           .byteenable
		input  wire        dma_0_write_master_chipselect,                                    //                                                           .chipselect
		input  wire        dma_0_write_master_write,                                         //                                                           .write
		input  wire [63:0] dma_0_write_master_writedata,                                     //                                                           .writedata
		input  wire [31:0] fpga_only_master_master_address,                                  //                                    fpga_only_master_master.address
		output wire        fpga_only_master_master_waitrequest,                              //                                                           .waitrequest
		input  wire [3:0]  fpga_only_master_master_byteenable,                               //                                                           .byteenable
		input  wire        fpga_only_master_master_read,                                     //                                                           .read
		output wire [31:0] fpga_only_master_master_readdata,                                 //                                                           .readdata
		output wire        fpga_only_master_master_readdatavalid,                            //                                                           .readdatavalid
		input  wire        fpga_only_master_master_write,                                    //                                                           .write
		input  wire [31:0] fpga_only_master_master_writedata,                                //                                                           .writedata
		input  wire [31:0] MemoryDMA_m_write_address,                                        //                                          MemoryDMA_m_write.address
		output wire        MemoryDMA_m_write_waitrequest,                                    //                                                           .waitrequest
		input  wire [3:0]  MemoryDMA_m_write_byteenable,                                     //                                                           .byteenable
		input  wire        MemoryDMA_m_write_write,                                          //                                                           .write
		input  wire [31:0] MemoryDMA_m_write_writedata,                                      //                                                           .writedata
		output wire [2:0]  dma_0_control_port_slave_address,                                 //                                   dma_0_control_port_slave.address
		output wire        dma_0_control_port_slave_write,                                   //                                                           .write
		input  wire [17:0] dma_0_control_port_slave_readdata,                                //                                                           .readdata
		output wire [17:0] dma_0_control_port_slave_writedata,                               //                                                           .writedata
		output wire        dma_0_control_port_slave_chipselect,                              //                                                           .chipselect
		output wire [0:0]  intr_capturer_0_avalon_slave_0_address,                           //                             intr_capturer_0_avalon_slave_0.address
		output wire        intr_capturer_0_avalon_slave_0_read,                              //                                                           .read
		input  wire [31:0] intr_capturer_0_avalon_slave_0_readdata,                          //                                                           .readdata
		output wire [0:0]  jtag_uart_avalon_jtag_slave_address,                              //                                jtag_uart_avalon_jtag_slave.address
		output wire        jtag_uart_avalon_jtag_slave_write,                                //                                                           .write
		output wire        jtag_uart_avalon_jtag_slave_read,                                 //                                                           .read
		input  wire [31:0] jtag_uart_avalon_jtag_slave_readdata,                             //                                                           .readdata
		output wire [31:0] jtag_uart_avalon_jtag_slave_writedata,                            //                                                           .writedata
		input  wire        jtag_uart_avalon_jtag_slave_waitrequest,                          //                                                           .waitrequest
		output wire        jtag_uart_avalon_jtag_slave_chipselect,                           //                                                           .chipselect
		output wire [3:0]  MemoryDMA_csr_address,                                            //                                              MemoryDMA_csr.address
		output wire        MemoryDMA_csr_write,                                              //                                                           .write
		output wire        MemoryDMA_csr_read,                                               //                                                           .read
		input  wire [31:0] MemoryDMA_csr_readdata,                                           //                                                           .readdata
		output wire [31:0] MemoryDMA_csr_writedata,                                          //                                                           .writedata
		output wire        MemoryDMA_csr_chipselect,                                         //                                                           .chipselect
		output wire [3:0]  mm_clock_crossing_bridge_0_s0_address,                            //                              mm_clock_crossing_bridge_0_s0.address
		output wire        mm_clock_crossing_bridge_0_s0_write,                              //                                                           .write
		output wire        mm_clock_crossing_bridge_0_s0_read,                               //                                                           .read
		input  wire [31:0] mm_clock_crossing_bridge_0_s0_readdata,                           //                                                           .readdata
		output wire [31:0] mm_clock_crossing_bridge_0_s0_writedata,                          //                                                           .writedata
		output wire [0:0]  mm_clock_crossing_bridge_0_s0_burstcount,                         //                                                           .burstcount
		output wire [3:0]  mm_clock_crossing_bridge_0_s0_byteenable,                         //                                                           .byteenable
		input  wire        mm_clock_crossing_bridge_0_s0_readdatavalid,                      //                                                           .readdatavalid
		input  wire        mm_clock_crossing_bridge_0_s0_waitrequest,                        //                                                           .waitrequest
		output wire        mm_clock_crossing_bridge_0_s0_debugaccess,                        //                                                           .debugaccess
		output wire [12:0] onchip_memory2_0_s1_address,                                      //                                        onchip_memory2_0_s1.address
		output wire        onchip_memory2_0_s1_write,                                        //                                                           .write
		input  wire [63:0] onchip_memory2_0_s1_readdata,                                     //                                                           .readdata
		output wire [63:0] onchip_memory2_0_s1_writedata,                                    //                                                           .writedata
		output wire [7:0]  onchip_memory2_0_s1_byteenable,                                   //                                                           .byteenable
		output wire        onchip_memory2_0_s1_chipselect,                                   //                                                           .chipselect
		output wire        onchip_memory2_0_s1_clken,                                        //                                                           .clken
		output wire [12:0] onchip_memory2_1_s1_address,                                      //                                        onchip_memory2_1_s1.address
		output wire        onchip_memory2_1_s1_write,                                        //                                                           .write
		input  wire [63:0] onchip_memory2_1_s1_readdata,                                     //                                                           .readdata
		output wire [63:0] onchip_memory2_1_s1_writedata,                                    //                                                           .writedata
		output wire [7:0]  onchip_memory2_1_s1_byteenable,                                   //                                                           .byteenable
		output wire        onchip_memory2_1_s1_chipselect,                                   //                                                           .chipselect
		output wire        onchip_memory2_1_s1_clken,                                        //                                                           .clken
		output wire [1:0]  pio_led_s1_address,                                               //                                                 pio_led_s1.address
		output wire        pio_led_s1_write,                                                 //                                                           .write
		input  wire [31:0] pio_led_s1_readdata,                                              //                                                           .readdata
		output wire [31:0] pio_led_s1_writedata,                                             //                                                           .writedata
		output wire        pio_led_s1_chipselect,                                            //                                                           .chipselect
		output wire [1:0]  pio_reg1_s1_address,                                              //                                                pio_reg1_s1.address
		output wire        pio_reg1_s1_write,                                                //                                                           .write
		input  wire [31:0] pio_reg1_s1_readdata,                                             //                                                           .readdata
		output wire [31:0] pio_reg1_s1_writedata,                                            //                                                           .writedata
		output wire        pio_reg1_s1_chipselect,                                           //                                                           .chipselect
		output wire [1:0]  pio_reg2_s1_address,                                              //                                                pio_reg2_s1.address
		output wire        pio_reg2_s1_write,                                                //                                                           .write
		input  wire [31:0] pio_reg2_s1_readdata,                                             //                                                           .readdata
		output wire [31:0] pio_reg2_s1_writedata,                                            //                                                           .writedata
		output wire        pio_reg2_s1_chipselect,                                           //                                                           .chipselect
		output wire [1:0]  pio_reg3_s1_address,                                              //                                                pio_reg3_s1.address
		input  wire [31:0] pio_reg3_s1_readdata,                                             //                                                           .readdata
		output wire [0:0]  sysid_qsys_control_slave_address,                                 //                                   sysid_qsys_control_slave.address
		input  wire [31:0] sysid_qsys_control_slave_readdata                                 //                                                           .readdata
	);

	wire          fpga_only_master_master_translator_avalon_universal_master_0_waitrequest;                // fpga_only_master_master_agent:av_waitrequest -> fpga_only_master_master_translator:uav_waitrequest
	wire   [31:0] fpga_only_master_master_translator_avalon_universal_master_0_readdata;                   // fpga_only_master_master_agent:av_readdata -> fpga_only_master_master_translator:uav_readdata
	wire          fpga_only_master_master_translator_avalon_universal_master_0_debugaccess;                // fpga_only_master_master_translator:uav_debugaccess -> fpga_only_master_master_agent:av_debugaccess
	wire   [31:0] fpga_only_master_master_translator_avalon_universal_master_0_address;                    // fpga_only_master_master_translator:uav_address -> fpga_only_master_master_agent:av_address
	wire          fpga_only_master_master_translator_avalon_universal_master_0_read;                       // fpga_only_master_master_translator:uav_read -> fpga_only_master_master_agent:av_read
	wire    [3:0] fpga_only_master_master_translator_avalon_universal_master_0_byteenable;                 // fpga_only_master_master_translator:uav_byteenable -> fpga_only_master_master_agent:av_byteenable
	wire          fpga_only_master_master_translator_avalon_universal_master_0_readdatavalid;              // fpga_only_master_master_agent:av_readdatavalid -> fpga_only_master_master_translator:uav_readdatavalid
	wire          fpga_only_master_master_translator_avalon_universal_master_0_lock;                       // fpga_only_master_master_translator:uav_lock -> fpga_only_master_master_agent:av_lock
	wire          fpga_only_master_master_translator_avalon_universal_master_0_write;                      // fpga_only_master_master_translator:uav_write -> fpga_only_master_master_agent:av_write
	wire   [31:0] fpga_only_master_master_translator_avalon_universal_master_0_writedata;                  // fpga_only_master_master_translator:uav_writedata -> fpga_only_master_master_agent:av_writedata
	wire    [2:0] fpga_only_master_master_translator_avalon_universal_master_0_burstcount;                 // fpga_only_master_master_translator:uav_burstcount -> fpga_only_master_master_agent:av_burstcount
	wire          dma_0_read_master_translator_avalon_universal_master_0_waitrequest;                      // dma_0_read_master_agent:av_waitrequest -> dma_0_read_master_translator:uav_waitrequest
	wire   [63:0] dma_0_read_master_translator_avalon_universal_master_0_readdata;                         // dma_0_read_master_agent:av_readdata -> dma_0_read_master_translator:uav_readdata
	wire          dma_0_read_master_translator_avalon_universal_master_0_debugaccess;                      // dma_0_read_master_translator:uav_debugaccess -> dma_0_read_master_agent:av_debugaccess
	wire   [31:0] dma_0_read_master_translator_avalon_universal_master_0_address;                          // dma_0_read_master_translator:uav_address -> dma_0_read_master_agent:av_address
	wire          dma_0_read_master_translator_avalon_universal_master_0_read;                             // dma_0_read_master_translator:uav_read -> dma_0_read_master_agent:av_read
	wire    [7:0] dma_0_read_master_translator_avalon_universal_master_0_byteenable;                       // dma_0_read_master_translator:uav_byteenable -> dma_0_read_master_agent:av_byteenable
	wire          dma_0_read_master_translator_avalon_universal_master_0_readdatavalid;                    // dma_0_read_master_agent:av_readdatavalid -> dma_0_read_master_translator:uav_readdatavalid
	wire          dma_0_read_master_translator_avalon_universal_master_0_lock;                             // dma_0_read_master_translator:uav_lock -> dma_0_read_master_agent:av_lock
	wire          dma_0_read_master_translator_avalon_universal_master_0_write;                            // dma_0_read_master_translator:uav_write -> dma_0_read_master_agent:av_write
	wire   [63:0] dma_0_read_master_translator_avalon_universal_master_0_writedata;                        // dma_0_read_master_translator:uav_writedata -> dma_0_read_master_agent:av_writedata
	wire    [3:0] dma_0_read_master_translator_avalon_universal_master_0_burstcount;                       // dma_0_read_master_translator:uav_burstcount -> dma_0_read_master_agent:av_burstcount
	wire          dma_0_write_master_translator_avalon_universal_master_0_waitrequest;                     // dma_0_write_master_agent:av_waitrequest -> dma_0_write_master_translator:uav_waitrequest
	wire   [63:0] dma_0_write_master_translator_avalon_universal_master_0_readdata;                        // dma_0_write_master_agent:av_readdata -> dma_0_write_master_translator:uav_readdata
	wire          dma_0_write_master_translator_avalon_universal_master_0_debugaccess;                     // dma_0_write_master_translator:uav_debugaccess -> dma_0_write_master_agent:av_debugaccess
	wire   [31:0] dma_0_write_master_translator_avalon_universal_master_0_address;                         // dma_0_write_master_translator:uav_address -> dma_0_write_master_agent:av_address
	wire          dma_0_write_master_translator_avalon_universal_master_0_read;                            // dma_0_write_master_translator:uav_read -> dma_0_write_master_agent:av_read
	wire    [7:0] dma_0_write_master_translator_avalon_universal_master_0_byteenable;                      // dma_0_write_master_translator:uav_byteenable -> dma_0_write_master_agent:av_byteenable
	wire          dma_0_write_master_translator_avalon_universal_master_0_readdatavalid;                   // dma_0_write_master_agent:av_readdatavalid -> dma_0_write_master_translator:uav_readdatavalid
	wire          dma_0_write_master_translator_avalon_universal_master_0_lock;                            // dma_0_write_master_translator:uav_lock -> dma_0_write_master_agent:av_lock
	wire          dma_0_write_master_translator_avalon_universal_master_0_write;                           // dma_0_write_master_translator:uav_write -> dma_0_write_master_agent:av_write
	wire   [63:0] dma_0_write_master_translator_avalon_universal_master_0_writedata;                       // dma_0_write_master_translator:uav_writedata -> dma_0_write_master_agent:av_writedata
	wire    [3:0] dma_0_write_master_translator_avalon_universal_master_0_burstcount;                      // dma_0_write_master_translator:uav_burstcount -> dma_0_write_master_agent:av_burstcount
	wire          rsp_mux_004_src_valid;                                                                   // rsp_mux_004:src_valid -> dma_0_write_master_agent:rp_valid
	wire  [166:0] rsp_mux_004_src_data;                                                                    // rsp_mux_004:src_data -> dma_0_write_master_agent:rp_data
	wire          rsp_mux_004_src_ready;                                                                   // dma_0_write_master_agent:rp_ready -> rsp_mux_004:src_ready
	wire   [11:0] rsp_mux_004_src_channel;                                                                 // rsp_mux_004:src_channel -> dma_0_write_master_agent:rp_channel
	wire          rsp_mux_004_src_startofpacket;                                                           // rsp_mux_004:src_startofpacket -> dma_0_write_master_agent:rp_startofpacket
	wire          rsp_mux_004_src_endofpacket;                                                             // rsp_mux_004:src_endofpacket -> dma_0_write_master_agent:rp_endofpacket
	wire          memorydma_m_write_translator_avalon_universal_master_0_waitrequest;                      // MemoryDMA_m_write_agent:av_waitrequest -> MemoryDMA_m_write_translator:uav_waitrequest
	wire   [31:0] memorydma_m_write_translator_avalon_universal_master_0_readdata;                         // MemoryDMA_m_write_agent:av_readdata -> MemoryDMA_m_write_translator:uav_readdata
	wire          memorydma_m_write_translator_avalon_universal_master_0_debugaccess;                      // MemoryDMA_m_write_translator:uav_debugaccess -> MemoryDMA_m_write_agent:av_debugaccess
	wire   [31:0] memorydma_m_write_translator_avalon_universal_master_0_address;                          // MemoryDMA_m_write_translator:uav_address -> MemoryDMA_m_write_agent:av_address
	wire          memorydma_m_write_translator_avalon_universal_master_0_read;                             // MemoryDMA_m_write_translator:uav_read -> MemoryDMA_m_write_agent:av_read
	wire    [3:0] memorydma_m_write_translator_avalon_universal_master_0_byteenable;                       // MemoryDMA_m_write_translator:uav_byteenable -> MemoryDMA_m_write_agent:av_byteenable
	wire          memorydma_m_write_translator_avalon_universal_master_0_readdatavalid;                    // MemoryDMA_m_write_agent:av_readdatavalid -> MemoryDMA_m_write_translator:uav_readdatavalid
	wire          memorydma_m_write_translator_avalon_universal_master_0_lock;                             // MemoryDMA_m_write_translator:uav_lock -> MemoryDMA_m_write_agent:av_lock
	wire          memorydma_m_write_translator_avalon_universal_master_0_write;                            // MemoryDMA_m_write_translator:uav_write -> MemoryDMA_m_write_agent:av_write
	wire   [31:0] memorydma_m_write_translator_avalon_universal_master_0_writedata;                        // MemoryDMA_m_write_translator:uav_writedata -> MemoryDMA_m_write_agent:av_writedata
	wire    [2:0] memorydma_m_write_translator_avalon_universal_master_0_burstcount;                       // MemoryDMA_m_write_translator:uav_burstcount -> MemoryDMA_m_write_agent:av_burstcount
	wire          rsp_mux_007_src_valid;                                                                   // rsp_mux_007:src_valid -> MemoryDMA_m_write_agent:rp_valid
	wire  [130:0] rsp_mux_007_src_data;                                                                    // rsp_mux_007:src_data -> MemoryDMA_m_write_agent:rp_data
	wire          rsp_mux_007_src_ready;                                                                   // MemoryDMA_m_write_agent:rp_ready -> rsp_mux_007:src_ready
	wire   [11:0] rsp_mux_007_src_channel;                                                                 // rsp_mux_007:src_channel -> MemoryDMA_m_write_agent:rp_channel
	wire          rsp_mux_007_src_startofpacket;                                                           // rsp_mux_007:src_startofpacket -> MemoryDMA_m_write_agent:rp_startofpacket
	wire          rsp_mux_007_src_endofpacket;                                                             // rsp_mux_007:src_endofpacket -> MemoryDMA_m_write_agent:rp_endofpacket
	wire   [63:0] onchip_memory2_0_s1_agent_m0_readdata;                                                   // onchip_memory2_0_s1_translator:uav_readdata -> onchip_memory2_0_s1_agent:m0_readdata
	wire          onchip_memory2_0_s1_agent_m0_waitrequest;                                                // onchip_memory2_0_s1_translator:uav_waitrequest -> onchip_memory2_0_s1_agent:m0_waitrequest
	wire          onchip_memory2_0_s1_agent_m0_debugaccess;                                                // onchip_memory2_0_s1_agent:m0_debugaccess -> onchip_memory2_0_s1_translator:uav_debugaccess
	wire   [31:0] onchip_memory2_0_s1_agent_m0_address;                                                    // onchip_memory2_0_s1_agent:m0_address -> onchip_memory2_0_s1_translator:uav_address
	wire    [7:0] onchip_memory2_0_s1_agent_m0_byteenable;                                                 // onchip_memory2_0_s1_agent:m0_byteenable -> onchip_memory2_0_s1_translator:uav_byteenable
	wire          onchip_memory2_0_s1_agent_m0_read;                                                       // onchip_memory2_0_s1_agent:m0_read -> onchip_memory2_0_s1_translator:uav_read
	wire          onchip_memory2_0_s1_agent_m0_readdatavalid;                                              // onchip_memory2_0_s1_translator:uav_readdatavalid -> onchip_memory2_0_s1_agent:m0_readdatavalid
	wire          onchip_memory2_0_s1_agent_m0_lock;                                                       // onchip_memory2_0_s1_agent:m0_lock -> onchip_memory2_0_s1_translator:uav_lock
	wire   [63:0] onchip_memory2_0_s1_agent_m0_writedata;                                                  // onchip_memory2_0_s1_agent:m0_writedata -> onchip_memory2_0_s1_translator:uav_writedata
	wire          onchip_memory2_0_s1_agent_m0_write;                                                      // onchip_memory2_0_s1_agent:m0_write -> onchip_memory2_0_s1_translator:uav_write
	wire    [3:0] onchip_memory2_0_s1_agent_m0_burstcount;                                                 // onchip_memory2_0_s1_agent:m0_burstcount -> onchip_memory2_0_s1_translator:uav_burstcount
	wire          onchip_memory2_0_s1_agent_rf_source_valid;                                               // onchip_memory2_0_s1_agent:rf_source_valid -> onchip_memory2_0_s1_agent_rsp_fifo:in_valid
	wire  [167:0] onchip_memory2_0_s1_agent_rf_source_data;                                                // onchip_memory2_0_s1_agent:rf_source_data -> onchip_memory2_0_s1_agent_rsp_fifo:in_data
	wire          onchip_memory2_0_s1_agent_rf_source_ready;                                               // onchip_memory2_0_s1_agent_rsp_fifo:in_ready -> onchip_memory2_0_s1_agent:rf_source_ready
	wire          onchip_memory2_0_s1_agent_rf_source_startofpacket;                                       // onchip_memory2_0_s1_agent:rf_source_startofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_memory2_0_s1_agent_rf_source_endofpacket;                                         // onchip_memory2_0_s1_agent:rf_source_endofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_valid;                                            // onchip_memory2_0_s1_agent_rsp_fifo:out_valid -> onchip_memory2_0_s1_agent:rf_sink_valid
	wire  [167:0] onchip_memory2_0_s1_agent_rsp_fifo_out_data;                                             // onchip_memory2_0_s1_agent_rsp_fifo:out_data -> onchip_memory2_0_s1_agent:rf_sink_data
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_ready;                                            // onchip_memory2_0_s1_agent:rf_sink_ready -> onchip_memory2_0_s1_agent_rsp_fifo:out_ready
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket;                                    // onchip_memory2_0_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory2_0_s1_agent:rf_sink_startofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket;                                      // onchip_memory2_0_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory2_0_s1_agent:rf_sink_endofpacket
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_valid;                                          // onchip_memory2_0_s1_agent:rdata_fifo_src_valid -> onchip_memory2_0_s1_agent_rdata_fifo:in_valid
	wire   [65:0] onchip_memory2_0_s1_agent_rdata_fifo_src_data;                                           // onchip_memory2_0_s1_agent:rdata_fifo_src_data -> onchip_memory2_0_s1_agent_rdata_fifo:in_data
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_ready;                                          // onchip_memory2_0_s1_agent_rdata_fifo:in_ready -> onchip_memory2_0_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pio_led_s1_agent_m0_readdata;                                                            // pio_led_s1_translator:uav_readdata -> pio_led_s1_agent:m0_readdata
	wire          pio_led_s1_agent_m0_waitrequest;                                                         // pio_led_s1_translator:uav_waitrequest -> pio_led_s1_agent:m0_waitrequest
	wire          pio_led_s1_agent_m0_debugaccess;                                                         // pio_led_s1_agent:m0_debugaccess -> pio_led_s1_translator:uav_debugaccess
	wire   [31:0] pio_led_s1_agent_m0_address;                                                             // pio_led_s1_agent:m0_address -> pio_led_s1_translator:uav_address
	wire    [3:0] pio_led_s1_agent_m0_byteenable;                                                          // pio_led_s1_agent:m0_byteenable -> pio_led_s1_translator:uav_byteenable
	wire          pio_led_s1_agent_m0_read;                                                                // pio_led_s1_agent:m0_read -> pio_led_s1_translator:uav_read
	wire          pio_led_s1_agent_m0_readdatavalid;                                                       // pio_led_s1_translator:uav_readdatavalid -> pio_led_s1_agent:m0_readdatavalid
	wire          pio_led_s1_agent_m0_lock;                                                                // pio_led_s1_agent:m0_lock -> pio_led_s1_translator:uav_lock
	wire   [31:0] pio_led_s1_agent_m0_writedata;                                                           // pio_led_s1_agent:m0_writedata -> pio_led_s1_translator:uav_writedata
	wire          pio_led_s1_agent_m0_write;                                                               // pio_led_s1_agent:m0_write -> pio_led_s1_translator:uav_write
	wire    [2:0] pio_led_s1_agent_m0_burstcount;                                                          // pio_led_s1_agent:m0_burstcount -> pio_led_s1_translator:uav_burstcount
	wire          pio_led_s1_agent_rf_source_valid;                                                        // pio_led_s1_agent:rf_source_valid -> pio_led_s1_agent_rsp_fifo:in_valid
	wire  [131:0] pio_led_s1_agent_rf_source_data;                                                         // pio_led_s1_agent:rf_source_data -> pio_led_s1_agent_rsp_fifo:in_data
	wire          pio_led_s1_agent_rf_source_ready;                                                        // pio_led_s1_agent_rsp_fifo:in_ready -> pio_led_s1_agent:rf_source_ready
	wire          pio_led_s1_agent_rf_source_startofpacket;                                                // pio_led_s1_agent:rf_source_startofpacket -> pio_led_s1_agent_rsp_fifo:in_startofpacket
	wire          pio_led_s1_agent_rf_source_endofpacket;                                                  // pio_led_s1_agent:rf_source_endofpacket -> pio_led_s1_agent_rsp_fifo:in_endofpacket
	wire          pio_led_s1_agent_rsp_fifo_out_valid;                                                     // pio_led_s1_agent_rsp_fifo:out_valid -> pio_led_s1_agent:rf_sink_valid
	wire  [131:0] pio_led_s1_agent_rsp_fifo_out_data;                                                      // pio_led_s1_agent_rsp_fifo:out_data -> pio_led_s1_agent:rf_sink_data
	wire          pio_led_s1_agent_rsp_fifo_out_ready;                                                     // pio_led_s1_agent:rf_sink_ready -> pio_led_s1_agent_rsp_fifo:out_ready
	wire          pio_led_s1_agent_rsp_fifo_out_startofpacket;                                             // pio_led_s1_agent_rsp_fifo:out_startofpacket -> pio_led_s1_agent:rf_sink_startofpacket
	wire          pio_led_s1_agent_rsp_fifo_out_endofpacket;                                               // pio_led_s1_agent_rsp_fifo:out_endofpacket -> pio_led_s1_agent:rf_sink_endofpacket
	wire          pio_led_s1_agent_rdata_fifo_src_valid;                                                   // pio_led_s1_agent:rdata_fifo_src_valid -> pio_led_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pio_led_s1_agent_rdata_fifo_src_data;                                                    // pio_led_s1_agent:rdata_fifo_src_data -> pio_led_s1_agent_rdata_fifo:in_data
	wire          pio_led_s1_agent_rdata_fifo_src_ready;                                                   // pio_led_s1_agent_rdata_fifo:in_ready -> pio_led_s1_agent:rdata_fifo_src_ready
	wire   [63:0] onchip_memory2_1_s1_agent_m0_readdata;                                                   // onchip_memory2_1_s1_translator:uav_readdata -> onchip_memory2_1_s1_agent:m0_readdata
	wire          onchip_memory2_1_s1_agent_m0_waitrequest;                                                // onchip_memory2_1_s1_translator:uav_waitrequest -> onchip_memory2_1_s1_agent:m0_waitrequest
	wire          onchip_memory2_1_s1_agent_m0_debugaccess;                                                // onchip_memory2_1_s1_agent:m0_debugaccess -> onchip_memory2_1_s1_translator:uav_debugaccess
	wire   [31:0] onchip_memory2_1_s1_agent_m0_address;                                                    // onchip_memory2_1_s1_agent:m0_address -> onchip_memory2_1_s1_translator:uav_address
	wire    [7:0] onchip_memory2_1_s1_agent_m0_byteenable;                                                 // onchip_memory2_1_s1_agent:m0_byteenable -> onchip_memory2_1_s1_translator:uav_byteenable
	wire          onchip_memory2_1_s1_agent_m0_read;                                                       // onchip_memory2_1_s1_agent:m0_read -> onchip_memory2_1_s1_translator:uav_read
	wire          onchip_memory2_1_s1_agent_m0_readdatavalid;                                              // onchip_memory2_1_s1_translator:uav_readdatavalid -> onchip_memory2_1_s1_agent:m0_readdatavalid
	wire          onchip_memory2_1_s1_agent_m0_lock;                                                       // onchip_memory2_1_s1_agent:m0_lock -> onchip_memory2_1_s1_translator:uav_lock
	wire   [63:0] onchip_memory2_1_s1_agent_m0_writedata;                                                  // onchip_memory2_1_s1_agent:m0_writedata -> onchip_memory2_1_s1_translator:uav_writedata
	wire          onchip_memory2_1_s1_agent_m0_write;                                                      // onchip_memory2_1_s1_agent:m0_write -> onchip_memory2_1_s1_translator:uav_write
	wire    [3:0] onchip_memory2_1_s1_agent_m0_burstcount;                                                 // onchip_memory2_1_s1_agent:m0_burstcount -> onchip_memory2_1_s1_translator:uav_burstcount
	wire          onchip_memory2_1_s1_agent_rf_source_valid;                                               // onchip_memory2_1_s1_agent:rf_source_valid -> onchip_memory2_1_s1_agent_rsp_fifo:in_valid
	wire  [167:0] onchip_memory2_1_s1_agent_rf_source_data;                                                // onchip_memory2_1_s1_agent:rf_source_data -> onchip_memory2_1_s1_agent_rsp_fifo:in_data
	wire          onchip_memory2_1_s1_agent_rf_source_ready;                                               // onchip_memory2_1_s1_agent_rsp_fifo:in_ready -> onchip_memory2_1_s1_agent:rf_source_ready
	wire          onchip_memory2_1_s1_agent_rf_source_startofpacket;                                       // onchip_memory2_1_s1_agent:rf_source_startofpacket -> onchip_memory2_1_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_memory2_1_s1_agent_rf_source_endofpacket;                                         // onchip_memory2_1_s1_agent:rf_source_endofpacket -> onchip_memory2_1_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory2_1_s1_agent_rsp_fifo_out_valid;                                            // onchip_memory2_1_s1_agent_rsp_fifo:out_valid -> onchip_memory2_1_s1_agent:rf_sink_valid
	wire  [167:0] onchip_memory2_1_s1_agent_rsp_fifo_out_data;                                             // onchip_memory2_1_s1_agent_rsp_fifo:out_data -> onchip_memory2_1_s1_agent:rf_sink_data
	wire          onchip_memory2_1_s1_agent_rsp_fifo_out_ready;                                            // onchip_memory2_1_s1_agent:rf_sink_ready -> onchip_memory2_1_s1_agent_rsp_fifo:out_ready
	wire          onchip_memory2_1_s1_agent_rsp_fifo_out_startofpacket;                                    // onchip_memory2_1_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory2_1_s1_agent:rf_sink_startofpacket
	wire          onchip_memory2_1_s1_agent_rsp_fifo_out_endofpacket;                                      // onchip_memory2_1_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory2_1_s1_agent:rf_sink_endofpacket
	wire          onchip_memory2_1_s1_agent_rdata_fifo_src_valid;                                          // onchip_memory2_1_s1_agent:rdata_fifo_src_valid -> onchip_memory2_1_s1_agent_rdata_fifo:in_valid
	wire   [65:0] onchip_memory2_1_s1_agent_rdata_fifo_src_data;                                           // onchip_memory2_1_s1_agent:rdata_fifo_src_data -> onchip_memory2_1_s1_agent_rdata_fifo:in_data
	wire          onchip_memory2_1_s1_agent_rdata_fifo_src_ready;                                          // onchip_memory2_1_s1_agent_rdata_fifo:in_ready -> onchip_memory2_1_s1_agent:rdata_fifo_src_ready
	wire   [31:0] mm_clock_crossing_bridge_0_s0_agent_m0_readdata;                                         // mm_clock_crossing_bridge_0_s0_translator:uav_readdata -> mm_clock_crossing_bridge_0_s0_agent:m0_readdata
	wire          mm_clock_crossing_bridge_0_s0_agent_m0_waitrequest;                                      // mm_clock_crossing_bridge_0_s0_translator:uav_waitrequest -> mm_clock_crossing_bridge_0_s0_agent:m0_waitrequest
	wire          mm_clock_crossing_bridge_0_s0_agent_m0_debugaccess;                                      // mm_clock_crossing_bridge_0_s0_agent:m0_debugaccess -> mm_clock_crossing_bridge_0_s0_translator:uav_debugaccess
	wire   [31:0] mm_clock_crossing_bridge_0_s0_agent_m0_address;                                          // mm_clock_crossing_bridge_0_s0_agent:m0_address -> mm_clock_crossing_bridge_0_s0_translator:uav_address
	wire    [3:0] mm_clock_crossing_bridge_0_s0_agent_m0_byteenable;                                       // mm_clock_crossing_bridge_0_s0_agent:m0_byteenable -> mm_clock_crossing_bridge_0_s0_translator:uav_byteenable
	wire          mm_clock_crossing_bridge_0_s0_agent_m0_read;                                             // mm_clock_crossing_bridge_0_s0_agent:m0_read -> mm_clock_crossing_bridge_0_s0_translator:uav_read
	wire          mm_clock_crossing_bridge_0_s0_agent_m0_readdatavalid;                                    // mm_clock_crossing_bridge_0_s0_translator:uav_readdatavalid -> mm_clock_crossing_bridge_0_s0_agent:m0_readdatavalid
	wire          mm_clock_crossing_bridge_0_s0_agent_m0_lock;                                             // mm_clock_crossing_bridge_0_s0_agent:m0_lock -> mm_clock_crossing_bridge_0_s0_translator:uav_lock
	wire   [31:0] mm_clock_crossing_bridge_0_s0_agent_m0_writedata;                                        // mm_clock_crossing_bridge_0_s0_agent:m0_writedata -> mm_clock_crossing_bridge_0_s0_translator:uav_writedata
	wire          mm_clock_crossing_bridge_0_s0_agent_m0_write;                                            // mm_clock_crossing_bridge_0_s0_agent:m0_write -> mm_clock_crossing_bridge_0_s0_translator:uav_write
	wire    [2:0] mm_clock_crossing_bridge_0_s0_agent_m0_burstcount;                                       // mm_clock_crossing_bridge_0_s0_agent:m0_burstcount -> mm_clock_crossing_bridge_0_s0_translator:uav_burstcount
	wire          mm_clock_crossing_bridge_0_s0_agent_rf_source_valid;                                     // mm_clock_crossing_bridge_0_s0_agent:rf_source_valid -> mm_clock_crossing_bridge_0_s0_agent_rsp_fifo:in_valid
	wire  [131:0] mm_clock_crossing_bridge_0_s0_agent_rf_source_data;                                      // mm_clock_crossing_bridge_0_s0_agent:rf_source_data -> mm_clock_crossing_bridge_0_s0_agent_rsp_fifo:in_data
	wire          mm_clock_crossing_bridge_0_s0_agent_rf_source_ready;                                     // mm_clock_crossing_bridge_0_s0_agent_rsp_fifo:in_ready -> mm_clock_crossing_bridge_0_s0_agent:rf_source_ready
	wire          mm_clock_crossing_bridge_0_s0_agent_rf_source_startofpacket;                             // mm_clock_crossing_bridge_0_s0_agent:rf_source_startofpacket -> mm_clock_crossing_bridge_0_s0_agent_rsp_fifo:in_startofpacket
	wire          mm_clock_crossing_bridge_0_s0_agent_rf_source_endofpacket;                               // mm_clock_crossing_bridge_0_s0_agent:rf_source_endofpacket -> mm_clock_crossing_bridge_0_s0_agent_rsp_fifo:in_endofpacket
	wire          mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_valid;                                  // mm_clock_crossing_bridge_0_s0_agent_rsp_fifo:out_valid -> mm_clock_crossing_bridge_0_s0_agent:rf_sink_valid
	wire  [131:0] mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_data;                                   // mm_clock_crossing_bridge_0_s0_agent_rsp_fifo:out_data -> mm_clock_crossing_bridge_0_s0_agent:rf_sink_data
	wire          mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_ready;                                  // mm_clock_crossing_bridge_0_s0_agent:rf_sink_ready -> mm_clock_crossing_bridge_0_s0_agent_rsp_fifo:out_ready
	wire          mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_startofpacket;                          // mm_clock_crossing_bridge_0_s0_agent_rsp_fifo:out_startofpacket -> mm_clock_crossing_bridge_0_s0_agent:rf_sink_startofpacket
	wire          mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_endofpacket;                            // mm_clock_crossing_bridge_0_s0_agent_rsp_fifo:out_endofpacket -> mm_clock_crossing_bridge_0_s0_agent:rf_sink_endofpacket
	wire          mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_src_valid;                                // mm_clock_crossing_bridge_0_s0_agent:rdata_fifo_src_valid -> mm_clock_crossing_bridge_0_s0_agent_rdata_fifo:in_valid
	wire   [33:0] mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_src_data;                                 // mm_clock_crossing_bridge_0_s0_agent:rdata_fifo_src_data -> mm_clock_crossing_bridge_0_s0_agent_rdata_fifo:in_data
	wire          mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_src_ready;                                // mm_clock_crossing_bridge_0_s0_agent_rdata_fifo:in_ready -> mm_clock_crossing_bridge_0_s0_agent:rdata_fifo_src_ready
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                                           // jtag_uart_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                                        // jtag_uart_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                                        // jtag_uart_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                                            // jtag_uart_avalon_jtag_slave_agent:m0_address -> jtag_uart_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                                         // jtag_uart_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_avalon_jtag_slave_agent_m0_read;                                               // jtag_uart_avalon_jtag_slave_agent:m0_read -> jtag_uart_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                                      // jtag_uart_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_avalon_jtag_slave_agent_m0_lock;                                               // jtag_uart_avalon_jtag_slave_agent:m0_lock -> jtag_uart_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                                          // jtag_uart_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_write;                                              // jtag_uart_avalon_jtag_slave_agent:m0_write -> jtag_uart_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                                         // jtag_uart_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                                       // jtag_uart_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [131:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                                        // jtag_uart_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                                       // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                               // jtag_uart_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                                 // jtag_uart_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                                    // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_avalon_jtag_slave_agent:rf_sink_valid
	wire  [131:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                                     // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                                    // jtag_uart_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                            // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                              // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                                  // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_valid -> jtag_uart_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                                   // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_data -> jtag_uart_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                                  // jtag_uart_avalon_jtag_slave_agent_rdata_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire   [31:0] dma_0_control_port_slave_agent_m0_readdata;                                              // dma_0_control_port_slave_translator:uav_readdata -> dma_0_control_port_slave_agent:m0_readdata
	wire          dma_0_control_port_slave_agent_m0_waitrequest;                                           // dma_0_control_port_slave_translator:uav_waitrequest -> dma_0_control_port_slave_agent:m0_waitrequest
	wire          dma_0_control_port_slave_agent_m0_debugaccess;                                           // dma_0_control_port_slave_agent:m0_debugaccess -> dma_0_control_port_slave_translator:uav_debugaccess
	wire   [31:0] dma_0_control_port_slave_agent_m0_address;                                               // dma_0_control_port_slave_agent:m0_address -> dma_0_control_port_slave_translator:uav_address
	wire    [3:0] dma_0_control_port_slave_agent_m0_byteenable;                                            // dma_0_control_port_slave_agent:m0_byteenable -> dma_0_control_port_slave_translator:uav_byteenable
	wire          dma_0_control_port_slave_agent_m0_read;                                                  // dma_0_control_port_slave_agent:m0_read -> dma_0_control_port_slave_translator:uav_read
	wire          dma_0_control_port_slave_agent_m0_readdatavalid;                                         // dma_0_control_port_slave_translator:uav_readdatavalid -> dma_0_control_port_slave_agent:m0_readdatavalid
	wire          dma_0_control_port_slave_agent_m0_lock;                                                  // dma_0_control_port_slave_agent:m0_lock -> dma_0_control_port_slave_translator:uav_lock
	wire   [31:0] dma_0_control_port_slave_agent_m0_writedata;                                             // dma_0_control_port_slave_agent:m0_writedata -> dma_0_control_port_slave_translator:uav_writedata
	wire          dma_0_control_port_slave_agent_m0_write;                                                 // dma_0_control_port_slave_agent:m0_write -> dma_0_control_port_slave_translator:uav_write
	wire    [2:0] dma_0_control_port_slave_agent_m0_burstcount;                                            // dma_0_control_port_slave_agent:m0_burstcount -> dma_0_control_port_slave_translator:uav_burstcount
	wire          dma_0_control_port_slave_agent_rf_source_valid;                                          // dma_0_control_port_slave_agent:rf_source_valid -> dma_0_control_port_slave_agent_rsp_fifo:in_valid
	wire  [131:0] dma_0_control_port_slave_agent_rf_source_data;                                           // dma_0_control_port_slave_agent:rf_source_data -> dma_0_control_port_slave_agent_rsp_fifo:in_data
	wire          dma_0_control_port_slave_agent_rf_source_ready;                                          // dma_0_control_port_slave_agent_rsp_fifo:in_ready -> dma_0_control_port_slave_agent:rf_source_ready
	wire          dma_0_control_port_slave_agent_rf_source_startofpacket;                                  // dma_0_control_port_slave_agent:rf_source_startofpacket -> dma_0_control_port_slave_agent_rsp_fifo:in_startofpacket
	wire          dma_0_control_port_slave_agent_rf_source_endofpacket;                                    // dma_0_control_port_slave_agent:rf_source_endofpacket -> dma_0_control_port_slave_agent_rsp_fifo:in_endofpacket
	wire          dma_0_control_port_slave_agent_rsp_fifo_out_valid;                                       // dma_0_control_port_slave_agent_rsp_fifo:out_valid -> dma_0_control_port_slave_agent:rf_sink_valid
	wire  [131:0] dma_0_control_port_slave_agent_rsp_fifo_out_data;                                        // dma_0_control_port_slave_agent_rsp_fifo:out_data -> dma_0_control_port_slave_agent:rf_sink_data
	wire          dma_0_control_port_slave_agent_rsp_fifo_out_ready;                                       // dma_0_control_port_slave_agent:rf_sink_ready -> dma_0_control_port_slave_agent_rsp_fifo:out_ready
	wire          dma_0_control_port_slave_agent_rsp_fifo_out_startofpacket;                               // dma_0_control_port_slave_agent_rsp_fifo:out_startofpacket -> dma_0_control_port_slave_agent:rf_sink_startofpacket
	wire          dma_0_control_port_slave_agent_rsp_fifo_out_endofpacket;                                 // dma_0_control_port_slave_agent_rsp_fifo:out_endofpacket -> dma_0_control_port_slave_agent:rf_sink_endofpacket
	wire          dma_0_control_port_slave_agent_rdata_fifo_src_valid;                                     // dma_0_control_port_slave_agent:rdata_fifo_src_valid -> dma_0_control_port_slave_agent_rdata_fifo:in_valid
	wire   [33:0] dma_0_control_port_slave_agent_rdata_fifo_src_data;                                      // dma_0_control_port_slave_agent:rdata_fifo_src_data -> dma_0_control_port_slave_agent_rdata_fifo:in_data
	wire          dma_0_control_port_slave_agent_rdata_fifo_src_ready;                                     // dma_0_control_port_slave_agent_rdata_fifo:in_ready -> dma_0_control_port_slave_agent:rdata_fifo_src_ready
	wire   [31:0] sysid_qsys_control_slave_agent_m0_readdata;                                              // sysid_qsys_control_slave_translator:uav_readdata -> sysid_qsys_control_slave_agent:m0_readdata
	wire          sysid_qsys_control_slave_agent_m0_waitrequest;                                           // sysid_qsys_control_slave_translator:uav_waitrequest -> sysid_qsys_control_slave_agent:m0_waitrequest
	wire          sysid_qsys_control_slave_agent_m0_debugaccess;                                           // sysid_qsys_control_slave_agent:m0_debugaccess -> sysid_qsys_control_slave_translator:uav_debugaccess
	wire   [31:0] sysid_qsys_control_slave_agent_m0_address;                                               // sysid_qsys_control_slave_agent:m0_address -> sysid_qsys_control_slave_translator:uav_address
	wire    [3:0] sysid_qsys_control_slave_agent_m0_byteenable;                                            // sysid_qsys_control_slave_agent:m0_byteenable -> sysid_qsys_control_slave_translator:uav_byteenable
	wire          sysid_qsys_control_slave_agent_m0_read;                                                  // sysid_qsys_control_slave_agent:m0_read -> sysid_qsys_control_slave_translator:uav_read
	wire          sysid_qsys_control_slave_agent_m0_readdatavalid;                                         // sysid_qsys_control_slave_translator:uav_readdatavalid -> sysid_qsys_control_slave_agent:m0_readdatavalid
	wire          sysid_qsys_control_slave_agent_m0_lock;                                                  // sysid_qsys_control_slave_agent:m0_lock -> sysid_qsys_control_slave_translator:uav_lock
	wire   [31:0] sysid_qsys_control_slave_agent_m0_writedata;                                             // sysid_qsys_control_slave_agent:m0_writedata -> sysid_qsys_control_slave_translator:uav_writedata
	wire          sysid_qsys_control_slave_agent_m0_write;                                                 // sysid_qsys_control_slave_agent:m0_write -> sysid_qsys_control_slave_translator:uav_write
	wire    [2:0] sysid_qsys_control_slave_agent_m0_burstcount;                                            // sysid_qsys_control_slave_agent:m0_burstcount -> sysid_qsys_control_slave_translator:uav_burstcount
	wire          sysid_qsys_control_slave_agent_rf_source_valid;                                          // sysid_qsys_control_slave_agent:rf_source_valid -> sysid_qsys_control_slave_agent_rsp_fifo:in_valid
	wire  [131:0] sysid_qsys_control_slave_agent_rf_source_data;                                           // sysid_qsys_control_slave_agent:rf_source_data -> sysid_qsys_control_slave_agent_rsp_fifo:in_data
	wire          sysid_qsys_control_slave_agent_rf_source_ready;                                          // sysid_qsys_control_slave_agent_rsp_fifo:in_ready -> sysid_qsys_control_slave_agent:rf_source_ready
	wire          sysid_qsys_control_slave_agent_rf_source_startofpacket;                                  // sysid_qsys_control_slave_agent:rf_source_startofpacket -> sysid_qsys_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_qsys_control_slave_agent_rf_source_endofpacket;                                    // sysid_qsys_control_slave_agent:rf_source_endofpacket -> sysid_qsys_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_valid;                                       // sysid_qsys_control_slave_agent_rsp_fifo:out_valid -> sysid_qsys_control_slave_agent:rf_sink_valid
	wire  [131:0] sysid_qsys_control_slave_agent_rsp_fifo_out_data;                                        // sysid_qsys_control_slave_agent_rsp_fifo:out_data -> sysid_qsys_control_slave_agent:rf_sink_data
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_ready;                                       // sysid_qsys_control_slave_agent:rf_sink_ready -> sysid_qsys_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket;                               // sysid_qsys_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_qsys_control_slave_agent:rf_sink_startofpacket
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket;                                 // sysid_qsys_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_qsys_control_slave_agent:rf_sink_endofpacket
	wire          sysid_qsys_control_slave_agent_rdata_fifo_src_valid;                                     // sysid_qsys_control_slave_agent:rdata_fifo_src_valid -> sysid_qsys_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] sysid_qsys_control_slave_agent_rdata_fifo_src_data;                                      // sysid_qsys_control_slave_agent:rdata_fifo_src_data -> sysid_qsys_control_slave_agent_rdata_fifo:in_data
	wire          sysid_qsys_control_slave_agent_rdata_fifo_src_ready;                                     // sysid_qsys_control_slave_agent_rdata_fifo:in_ready -> sysid_qsys_control_slave_agent:rdata_fifo_src_ready
	wire   [31:0] memorydma_csr_agent_m0_readdata;                                                         // MemoryDMA_csr_translator:uav_readdata -> MemoryDMA_csr_agent:m0_readdata
	wire          memorydma_csr_agent_m0_waitrequest;                                                      // MemoryDMA_csr_translator:uav_waitrequest -> MemoryDMA_csr_agent:m0_waitrequest
	wire          memorydma_csr_agent_m0_debugaccess;                                                      // MemoryDMA_csr_agent:m0_debugaccess -> MemoryDMA_csr_translator:uav_debugaccess
	wire   [31:0] memorydma_csr_agent_m0_address;                                                          // MemoryDMA_csr_agent:m0_address -> MemoryDMA_csr_translator:uav_address
	wire    [3:0] memorydma_csr_agent_m0_byteenable;                                                       // MemoryDMA_csr_agent:m0_byteenable -> MemoryDMA_csr_translator:uav_byteenable
	wire          memorydma_csr_agent_m0_read;                                                             // MemoryDMA_csr_agent:m0_read -> MemoryDMA_csr_translator:uav_read
	wire          memorydma_csr_agent_m0_readdatavalid;                                                    // MemoryDMA_csr_translator:uav_readdatavalid -> MemoryDMA_csr_agent:m0_readdatavalid
	wire          memorydma_csr_agent_m0_lock;                                                             // MemoryDMA_csr_agent:m0_lock -> MemoryDMA_csr_translator:uav_lock
	wire   [31:0] memorydma_csr_agent_m0_writedata;                                                        // MemoryDMA_csr_agent:m0_writedata -> MemoryDMA_csr_translator:uav_writedata
	wire          memorydma_csr_agent_m0_write;                                                            // MemoryDMA_csr_agent:m0_write -> MemoryDMA_csr_translator:uav_write
	wire    [2:0] memorydma_csr_agent_m0_burstcount;                                                       // MemoryDMA_csr_agent:m0_burstcount -> MemoryDMA_csr_translator:uav_burstcount
	wire          memorydma_csr_agent_rf_source_valid;                                                     // MemoryDMA_csr_agent:rf_source_valid -> MemoryDMA_csr_agent_rsp_fifo:in_valid
	wire  [131:0] memorydma_csr_agent_rf_source_data;                                                      // MemoryDMA_csr_agent:rf_source_data -> MemoryDMA_csr_agent_rsp_fifo:in_data
	wire          memorydma_csr_agent_rf_source_ready;                                                     // MemoryDMA_csr_agent_rsp_fifo:in_ready -> MemoryDMA_csr_agent:rf_source_ready
	wire          memorydma_csr_agent_rf_source_startofpacket;                                             // MemoryDMA_csr_agent:rf_source_startofpacket -> MemoryDMA_csr_agent_rsp_fifo:in_startofpacket
	wire          memorydma_csr_agent_rf_source_endofpacket;                                               // MemoryDMA_csr_agent:rf_source_endofpacket -> MemoryDMA_csr_agent_rsp_fifo:in_endofpacket
	wire          memorydma_csr_agent_rsp_fifo_out_valid;                                                  // MemoryDMA_csr_agent_rsp_fifo:out_valid -> MemoryDMA_csr_agent:rf_sink_valid
	wire  [131:0] memorydma_csr_agent_rsp_fifo_out_data;                                                   // MemoryDMA_csr_agent_rsp_fifo:out_data -> MemoryDMA_csr_agent:rf_sink_data
	wire          memorydma_csr_agent_rsp_fifo_out_ready;                                                  // MemoryDMA_csr_agent:rf_sink_ready -> MemoryDMA_csr_agent_rsp_fifo:out_ready
	wire          memorydma_csr_agent_rsp_fifo_out_startofpacket;                                          // MemoryDMA_csr_agent_rsp_fifo:out_startofpacket -> MemoryDMA_csr_agent:rf_sink_startofpacket
	wire          memorydma_csr_agent_rsp_fifo_out_endofpacket;                                            // MemoryDMA_csr_agent_rsp_fifo:out_endofpacket -> MemoryDMA_csr_agent:rf_sink_endofpacket
	wire          memorydma_csr_agent_rdata_fifo_src_valid;                                                // MemoryDMA_csr_agent:rdata_fifo_src_valid -> MemoryDMA_csr_agent_rdata_fifo:in_valid
	wire   [33:0] memorydma_csr_agent_rdata_fifo_src_data;                                                 // MemoryDMA_csr_agent:rdata_fifo_src_data -> MemoryDMA_csr_agent_rdata_fifo:in_data
	wire          memorydma_csr_agent_rdata_fifo_src_ready;                                                // MemoryDMA_csr_agent_rdata_fifo:in_ready -> MemoryDMA_csr_agent:rdata_fifo_src_ready
	wire   [31:0] pio_reg1_s1_agent_m0_readdata;                                                           // pio_reg1_s1_translator:uav_readdata -> pio_reg1_s1_agent:m0_readdata
	wire          pio_reg1_s1_agent_m0_waitrequest;                                                        // pio_reg1_s1_translator:uav_waitrequest -> pio_reg1_s1_agent:m0_waitrequest
	wire          pio_reg1_s1_agent_m0_debugaccess;                                                        // pio_reg1_s1_agent:m0_debugaccess -> pio_reg1_s1_translator:uav_debugaccess
	wire   [31:0] pio_reg1_s1_agent_m0_address;                                                            // pio_reg1_s1_agent:m0_address -> pio_reg1_s1_translator:uav_address
	wire    [3:0] pio_reg1_s1_agent_m0_byteenable;                                                         // pio_reg1_s1_agent:m0_byteenable -> pio_reg1_s1_translator:uav_byteenable
	wire          pio_reg1_s1_agent_m0_read;                                                               // pio_reg1_s1_agent:m0_read -> pio_reg1_s1_translator:uav_read
	wire          pio_reg1_s1_agent_m0_readdatavalid;                                                      // pio_reg1_s1_translator:uav_readdatavalid -> pio_reg1_s1_agent:m0_readdatavalid
	wire          pio_reg1_s1_agent_m0_lock;                                                               // pio_reg1_s1_agent:m0_lock -> pio_reg1_s1_translator:uav_lock
	wire   [31:0] pio_reg1_s1_agent_m0_writedata;                                                          // pio_reg1_s1_agent:m0_writedata -> pio_reg1_s1_translator:uav_writedata
	wire          pio_reg1_s1_agent_m0_write;                                                              // pio_reg1_s1_agent:m0_write -> pio_reg1_s1_translator:uav_write
	wire    [2:0] pio_reg1_s1_agent_m0_burstcount;                                                         // pio_reg1_s1_agent:m0_burstcount -> pio_reg1_s1_translator:uav_burstcount
	wire          pio_reg1_s1_agent_rf_source_valid;                                                       // pio_reg1_s1_agent:rf_source_valid -> pio_reg1_s1_agent_rsp_fifo:in_valid
	wire  [131:0] pio_reg1_s1_agent_rf_source_data;                                                        // pio_reg1_s1_agent:rf_source_data -> pio_reg1_s1_agent_rsp_fifo:in_data
	wire          pio_reg1_s1_agent_rf_source_ready;                                                       // pio_reg1_s1_agent_rsp_fifo:in_ready -> pio_reg1_s1_agent:rf_source_ready
	wire          pio_reg1_s1_agent_rf_source_startofpacket;                                               // pio_reg1_s1_agent:rf_source_startofpacket -> pio_reg1_s1_agent_rsp_fifo:in_startofpacket
	wire          pio_reg1_s1_agent_rf_source_endofpacket;                                                 // pio_reg1_s1_agent:rf_source_endofpacket -> pio_reg1_s1_agent_rsp_fifo:in_endofpacket
	wire          pio_reg1_s1_agent_rsp_fifo_out_valid;                                                    // pio_reg1_s1_agent_rsp_fifo:out_valid -> pio_reg1_s1_agent:rf_sink_valid
	wire  [131:0] pio_reg1_s1_agent_rsp_fifo_out_data;                                                     // pio_reg1_s1_agent_rsp_fifo:out_data -> pio_reg1_s1_agent:rf_sink_data
	wire          pio_reg1_s1_agent_rsp_fifo_out_ready;                                                    // pio_reg1_s1_agent:rf_sink_ready -> pio_reg1_s1_agent_rsp_fifo:out_ready
	wire          pio_reg1_s1_agent_rsp_fifo_out_startofpacket;                                            // pio_reg1_s1_agent_rsp_fifo:out_startofpacket -> pio_reg1_s1_agent:rf_sink_startofpacket
	wire          pio_reg1_s1_agent_rsp_fifo_out_endofpacket;                                              // pio_reg1_s1_agent_rsp_fifo:out_endofpacket -> pio_reg1_s1_agent:rf_sink_endofpacket
	wire          pio_reg1_s1_agent_rdata_fifo_src_valid;                                                  // pio_reg1_s1_agent:rdata_fifo_src_valid -> pio_reg1_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pio_reg1_s1_agent_rdata_fifo_src_data;                                                   // pio_reg1_s1_agent:rdata_fifo_src_data -> pio_reg1_s1_agent_rdata_fifo:in_data
	wire          pio_reg1_s1_agent_rdata_fifo_src_ready;                                                  // pio_reg1_s1_agent_rdata_fifo:in_ready -> pio_reg1_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pio_reg2_s1_agent_m0_readdata;                                                           // pio_reg2_s1_translator:uav_readdata -> pio_reg2_s1_agent:m0_readdata
	wire          pio_reg2_s1_agent_m0_waitrequest;                                                        // pio_reg2_s1_translator:uav_waitrequest -> pio_reg2_s1_agent:m0_waitrequest
	wire          pio_reg2_s1_agent_m0_debugaccess;                                                        // pio_reg2_s1_agent:m0_debugaccess -> pio_reg2_s1_translator:uav_debugaccess
	wire   [31:0] pio_reg2_s1_agent_m0_address;                                                            // pio_reg2_s1_agent:m0_address -> pio_reg2_s1_translator:uav_address
	wire    [3:0] pio_reg2_s1_agent_m0_byteenable;                                                         // pio_reg2_s1_agent:m0_byteenable -> pio_reg2_s1_translator:uav_byteenable
	wire          pio_reg2_s1_agent_m0_read;                                                               // pio_reg2_s1_agent:m0_read -> pio_reg2_s1_translator:uav_read
	wire          pio_reg2_s1_agent_m0_readdatavalid;                                                      // pio_reg2_s1_translator:uav_readdatavalid -> pio_reg2_s1_agent:m0_readdatavalid
	wire          pio_reg2_s1_agent_m0_lock;                                                               // pio_reg2_s1_agent:m0_lock -> pio_reg2_s1_translator:uav_lock
	wire   [31:0] pio_reg2_s1_agent_m0_writedata;                                                          // pio_reg2_s1_agent:m0_writedata -> pio_reg2_s1_translator:uav_writedata
	wire          pio_reg2_s1_agent_m0_write;                                                              // pio_reg2_s1_agent:m0_write -> pio_reg2_s1_translator:uav_write
	wire    [2:0] pio_reg2_s1_agent_m0_burstcount;                                                         // pio_reg2_s1_agent:m0_burstcount -> pio_reg2_s1_translator:uav_burstcount
	wire          pio_reg2_s1_agent_rf_source_valid;                                                       // pio_reg2_s1_agent:rf_source_valid -> pio_reg2_s1_agent_rsp_fifo:in_valid
	wire  [131:0] pio_reg2_s1_agent_rf_source_data;                                                        // pio_reg2_s1_agent:rf_source_data -> pio_reg2_s1_agent_rsp_fifo:in_data
	wire          pio_reg2_s1_agent_rf_source_ready;                                                       // pio_reg2_s1_agent_rsp_fifo:in_ready -> pio_reg2_s1_agent:rf_source_ready
	wire          pio_reg2_s1_agent_rf_source_startofpacket;                                               // pio_reg2_s1_agent:rf_source_startofpacket -> pio_reg2_s1_agent_rsp_fifo:in_startofpacket
	wire          pio_reg2_s1_agent_rf_source_endofpacket;                                                 // pio_reg2_s1_agent:rf_source_endofpacket -> pio_reg2_s1_agent_rsp_fifo:in_endofpacket
	wire          pio_reg2_s1_agent_rsp_fifo_out_valid;                                                    // pio_reg2_s1_agent_rsp_fifo:out_valid -> pio_reg2_s1_agent:rf_sink_valid
	wire  [131:0] pio_reg2_s1_agent_rsp_fifo_out_data;                                                     // pio_reg2_s1_agent_rsp_fifo:out_data -> pio_reg2_s1_agent:rf_sink_data
	wire          pio_reg2_s1_agent_rsp_fifo_out_ready;                                                    // pio_reg2_s1_agent:rf_sink_ready -> pio_reg2_s1_agent_rsp_fifo:out_ready
	wire          pio_reg2_s1_agent_rsp_fifo_out_startofpacket;                                            // pio_reg2_s1_agent_rsp_fifo:out_startofpacket -> pio_reg2_s1_agent:rf_sink_startofpacket
	wire          pio_reg2_s1_agent_rsp_fifo_out_endofpacket;                                              // pio_reg2_s1_agent_rsp_fifo:out_endofpacket -> pio_reg2_s1_agent:rf_sink_endofpacket
	wire          pio_reg2_s1_agent_rdata_fifo_src_valid;                                                  // pio_reg2_s1_agent:rdata_fifo_src_valid -> pio_reg2_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pio_reg2_s1_agent_rdata_fifo_src_data;                                                   // pio_reg2_s1_agent:rdata_fifo_src_data -> pio_reg2_s1_agent_rdata_fifo:in_data
	wire          pio_reg2_s1_agent_rdata_fifo_src_ready;                                                  // pio_reg2_s1_agent_rdata_fifo:in_ready -> pio_reg2_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pio_reg3_s1_agent_m0_readdata;                                                           // pio_reg3_s1_translator:uav_readdata -> pio_reg3_s1_agent:m0_readdata
	wire          pio_reg3_s1_agent_m0_waitrequest;                                                        // pio_reg3_s1_translator:uav_waitrequest -> pio_reg3_s1_agent:m0_waitrequest
	wire          pio_reg3_s1_agent_m0_debugaccess;                                                        // pio_reg3_s1_agent:m0_debugaccess -> pio_reg3_s1_translator:uav_debugaccess
	wire   [31:0] pio_reg3_s1_agent_m0_address;                                                            // pio_reg3_s1_agent:m0_address -> pio_reg3_s1_translator:uav_address
	wire    [3:0] pio_reg3_s1_agent_m0_byteenable;                                                         // pio_reg3_s1_agent:m0_byteenable -> pio_reg3_s1_translator:uav_byteenable
	wire          pio_reg3_s1_agent_m0_read;                                                               // pio_reg3_s1_agent:m0_read -> pio_reg3_s1_translator:uav_read
	wire          pio_reg3_s1_agent_m0_readdatavalid;                                                      // pio_reg3_s1_translator:uav_readdatavalid -> pio_reg3_s1_agent:m0_readdatavalid
	wire          pio_reg3_s1_agent_m0_lock;                                                               // pio_reg3_s1_agent:m0_lock -> pio_reg3_s1_translator:uav_lock
	wire   [31:0] pio_reg3_s1_agent_m0_writedata;                                                          // pio_reg3_s1_agent:m0_writedata -> pio_reg3_s1_translator:uav_writedata
	wire          pio_reg3_s1_agent_m0_write;                                                              // pio_reg3_s1_agent:m0_write -> pio_reg3_s1_translator:uav_write
	wire    [2:0] pio_reg3_s1_agent_m0_burstcount;                                                         // pio_reg3_s1_agent:m0_burstcount -> pio_reg3_s1_translator:uav_burstcount
	wire          pio_reg3_s1_agent_rf_source_valid;                                                       // pio_reg3_s1_agent:rf_source_valid -> pio_reg3_s1_agent_rsp_fifo:in_valid
	wire  [131:0] pio_reg3_s1_agent_rf_source_data;                                                        // pio_reg3_s1_agent:rf_source_data -> pio_reg3_s1_agent_rsp_fifo:in_data
	wire          pio_reg3_s1_agent_rf_source_ready;                                                       // pio_reg3_s1_agent_rsp_fifo:in_ready -> pio_reg3_s1_agent:rf_source_ready
	wire          pio_reg3_s1_agent_rf_source_startofpacket;                                               // pio_reg3_s1_agent:rf_source_startofpacket -> pio_reg3_s1_agent_rsp_fifo:in_startofpacket
	wire          pio_reg3_s1_agent_rf_source_endofpacket;                                                 // pio_reg3_s1_agent:rf_source_endofpacket -> pio_reg3_s1_agent_rsp_fifo:in_endofpacket
	wire          pio_reg3_s1_agent_rsp_fifo_out_valid;                                                    // pio_reg3_s1_agent_rsp_fifo:out_valid -> pio_reg3_s1_agent:rf_sink_valid
	wire  [131:0] pio_reg3_s1_agent_rsp_fifo_out_data;                                                     // pio_reg3_s1_agent_rsp_fifo:out_data -> pio_reg3_s1_agent:rf_sink_data
	wire          pio_reg3_s1_agent_rsp_fifo_out_ready;                                                    // pio_reg3_s1_agent:rf_sink_ready -> pio_reg3_s1_agent_rsp_fifo:out_ready
	wire          pio_reg3_s1_agent_rsp_fifo_out_startofpacket;                                            // pio_reg3_s1_agent_rsp_fifo:out_startofpacket -> pio_reg3_s1_agent:rf_sink_startofpacket
	wire          pio_reg3_s1_agent_rsp_fifo_out_endofpacket;                                              // pio_reg3_s1_agent_rsp_fifo:out_endofpacket -> pio_reg3_s1_agent:rf_sink_endofpacket
	wire          pio_reg3_s1_agent_rdata_fifo_src_valid;                                                  // pio_reg3_s1_agent:rdata_fifo_src_valid -> pio_reg3_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pio_reg3_s1_agent_rdata_fifo_src_data;                                                   // pio_reg3_s1_agent:rdata_fifo_src_data -> pio_reg3_s1_agent_rdata_fifo:in_data
	wire          pio_reg3_s1_agent_rdata_fifo_src_ready;                                                  // pio_reg3_s1_agent_rdata_fifo:in_ready -> pio_reg3_s1_agent:rdata_fifo_src_ready
	wire   [31:0] intr_capturer_0_avalon_slave_0_agent_m0_readdata;                                        // intr_capturer_0_avalon_slave_0_translator:uav_readdata -> intr_capturer_0_avalon_slave_0_agent:m0_readdata
	wire          intr_capturer_0_avalon_slave_0_agent_m0_waitrequest;                                     // intr_capturer_0_avalon_slave_0_translator:uav_waitrequest -> intr_capturer_0_avalon_slave_0_agent:m0_waitrequest
	wire          intr_capturer_0_avalon_slave_0_agent_m0_debugaccess;                                     // intr_capturer_0_avalon_slave_0_agent:m0_debugaccess -> intr_capturer_0_avalon_slave_0_translator:uav_debugaccess
	wire   [31:0] intr_capturer_0_avalon_slave_0_agent_m0_address;                                         // intr_capturer_0_avalon_slave_0_agent:m0_address -> intr_capturer_0_avalon_slave_0_translator:uav_address
	wire    [3:0] intr_capturer_0_avalon_slave_0_agent_m0_byteenable;                                      // intr_capturer_0_avalon_slave_0_agent:m0_byteenable -> intr_capturer_0_avalon_slave_0_translator:uav_byteenable
	wire          intr_capturer_0_avalon_slave_0_agent_m0_read;                                            // intr_capturer_0_avalon_slave_0_agent:m0_read -> intr_capturer_0_avalon_slave_0_translator:uav_read
	wire          intr_capturer_0_avalon_slave_0_agent_m0_readdatavalid;                                   // intr_capturer_0_avalon_slave_0_translator:uav_readdatavalid -> intr_capturer_0_avalon_slave_0_agent:m0_readdatavalid
	wire          intr_capturer_0_avalon_slave_0_agent_m0_lock;                                            // intr_capturer_0_avalon_slave_0_agent:m0_lock -> intr_capturer_0_avalon_slave_0_translator:uav_lock
	wire   [31:0] intr_capturer_0_avalon_slave_0_agent_m0_writedata;                                       // intr_capturer_0_avalon_slave_0_agent:m0_writedata -> intr_capturer_0_avalon_slave_0_translator:uav_writedata
	wire          intr_capturer_0_avalon_slave_0_agent_m0_write;                                           // intr_capturer_0_avalon_slave_0_agent:m0_write -> intr_capturer_0_avalon_slave_0_translator:uav_write
	wire    [2:0] intr_capturer_0_avalon_slave_0_agent_m0_burstcount;                                      // intr_capturer_0_avalon_slave_0_agent:m0_burstcount -> intr_capturer_0_avalon_slave_0_translator:uav_burstcount
	wire          intr_capturer_0_avalon_slave_0_agent_rf_source_valid;                                    // intr_capturer_0_avalon_slave_0_agent:rf_source_valid -> intr_capturer_0_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [131:0] intr_capturer_0_avalon_slave_0_agent_rf_source_data;                                     // intr_capturer_0_avalon_slave_0_agent:rf_source_data -> intr_capturer_0_avalon_slave_0_agent_rsp_fifo:in_data
	wire          intr_capturer_0_avalon_slave_0_agent_rf_source_ready;                                    // intr_capturer_0_avalon_slave_0_agent_rsp_fifo:in_ready -> intr_capturer_0_avalon_slave_0_agent:rf_source_ready
	wire          intr_capturer_0_avalon_slave_0_agent_rf_source_startofpacket;                            // intr_capturer_0_avalon_slave_0_agent:rf_source_startofpacket -> intr_capturer_0_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          intr_capturer_0_avalon_slave_0_agent_rf_source_endofpacket;                              // intr_capturer_0_avalon_slave_0_agent:rf_source_endofpacket -> intr_capturer_0_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_valid;                                 // intr_capturer_0_avalon_slave_0_agent_rsp_fifo:out_valid -> intr_capturer_0_avalon_slave_0_agent:rf_sink_valid
	wire  [131:0] intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_data;                                  // intr_capturer_0_avalon_slave_0_agent_rsp_fifo:out_data -> intr_capturer_0_avalon_slave_0_agent:rf_sink_data
	wire          intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_ready;                                 // intr_capturer_0_avalon_slave_0_agent:rf_sink_ready -> intr_capturer_0_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket;                         // intr_capturer_0_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> intr_capturer_0_avalon_slave_0_agent:rf_sink_startofpacket
	wire          intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                           // intr_capturer_0_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> intr_capturer_0_avalon_slave_0_agent:rf_sink_endofpacket
	wire          intr_capturer_0_avalon_slave_0_agent_rdata_fifo_src_valid;                               // intr_capturer_0_avalon_slave_0_agent:rdata_fifo_src_valid -> intr_capturer_0_avalon_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] intr_capturer_0_avalon_slave_0_agent_rdata_fifo_src_data;                                // intr_capturer_0_avalon_slave_0_agent:rdata_fifo_src_data -> intr_capturer_0_avalon_slave_0_agent_rdata_fifo:in_data
	wire          intr_capturer_0_avalon_slave_0_agent_rdata_fifo_src_ready;                               // intr_capturer_0_avalon_slave_0_agent_rdata_fifo:in_ready -> intr_capturer_0_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_mux_011_src_valid;                                                                   // cmd_mux_011:src_valid -> intr_capturer_0_avalon_slave_0_agent:cp_valid
	wire  [130:0] cmd_mux_011_src_data;                                                                    // cmd_mux_011:src_data -> intr_capturer_0_avalon_slave_0_agent:cp_data
	wire          cmd_mux_011_src_ready;                                                                   // intr_capturer_0_avalon_slave_0_agent:cp_ready -> cmd_mux_011:src_ready
	wire   [11:0] cmd_mux_011_src_channel;                                                                 // cmd_mux_011:src_channel -> intr_capturer_0_avalon_slave_0_agent:cp_channel
	wire          cmd_mux_011_src_startofpacket;                                                           // cmd_mux_011:src_startofpacket -> intr_capturer_0_avalon_slave_0_agent:cp_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                             // cmd_mux_011:src_endofpacket -> intr_capturer_0_avalon_slave_0_agent:cp_endofpacket
	wire          hps_0_h2f_axi_master_agent_write_cp_valid;                                               // hps_0_h2f_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [166:0] hps_0_h2f_axi_master_agent_write_cp_data;                                                // hps_0_h2f_axi_master_agent:write_cp_data -> router:sink_data
	wire          hps_0_h2f_axi_master_agent_write_cp_ready;                                               // router:sink_ready -> hps_0_h2f_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_axi_master_agent_write_cp_startofpacket;                                       // hps_0_h2f_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          hps_0_h2f_axi_master_agent_write_cp_endofpacket;                                         // hps_0_h2f_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          hps_0_h2f_axi_master_agent_read_cp_valid;                                                // hps_0_h2f_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [166:0] hps_0_h2f_axi_master_agent_read_cp_data;                                                 // hps_0_h2f_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          hps_0_h2f_axi_master_agent_read_cp_ready;                                                // router_001:sink_ready -> hps_0_h2f_axi_master_agent:read_cp_ready
	wire          hps_0_h2f_axi_master_agent_read_cp_startofpacket;                                        // hps_0_h2f_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          hps_0_h2f_axi_master_agent_read_cp_endofpacket;                                          // hps_0_h2f_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          fpga_only_master_master_agent_cp_valid;                                                  // fpga_only_master_master_agent:cp_valid -> router_002:sink_valid
	wire  [130:0] fpga_only_master_master_agent_cp_data;                                                   // fpga_only_master_master_agent:cp_data -> router_002:sink_data
	wire          fpga_only_master_master_agent_cp_ready;                                                  // router_002:sink_ready -> fpga_only_master_master_agent:cp_ready
	wire          fpga_only_master_master_agent_cp_startofpacket;                                          // fpga_only_master_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          fpga_only_master_master_agent_cp_endofpacket;                                            // fpga_only_master_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          dma_0_read_master_agent_cp_valid;                                                        // dma_0_read_master_agent:cp_valid -> router_003:sink_valid
	wire  [166:0] dma_0_read_master_agent_cp_data;                                                         // dma_0_read_master_agent:cp_data -> router_003:sink_data
	wire          dma_0_read_master_agent_cp_ready;                                                        // router_003:sink_ready -> dma_0_read_master_agent:cp_ready
	wire          dma_0_read_master_agent_cp_startofpacket;                                                // dma_0_read_master_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          dma_0_read_master_agent_cp_endofpacket;                                                  // dma_0_read_master_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          dma_0_write_master_agent_cp_valid;                                                       // dma_0_write_master_agent:cp_valid -> router_004:sink_valid
	wire  [166:0] dma_0_write_master_agent_cp_data;                                                        // dma_0_write_master_agent:cp_data -> router_004:sink_data
	wire          dma_0_write_master_agent_cp_ready;                                                       // router_004:sink_ready -> dma_0_write_master_agent:cp_ready
	wire          dma_0_write_master_agent_cp_startofpacket;                                               // dma_0_write_master_agent:cp_startofpacket -> router_004:sink_startofpacket
	wire          dma_0_write_master_agent_cp_endofpacket;                                                 // dma_0_write_master_agent:cp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                                    // router_004:src_valid -> cmd_demux_004:sink_valid
	wire  [166:0] router_004_src_data;                                                                     // router_004:src_data -> cmd_demux_004:sink_data
	wire          router_004_src_ready;                                                                    // cmd_demux_004:sink_ready -> router_004:src_ready
	wire   [11:0] router_004_src_channel;                                                                  // router_004:src_channel -> cmd_demux_004:sink_channel
	wire          router_004_src_startofpacket;                                                            // router_004:src_startofpacket -> cmd_demux_004:sink_startofpacket
	wire          router_004_src_endofpacket;                                                              // router_004:src_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_valid;                                            // hps_0_h2f_lw_axi_master_agent:write_cp_valid -> router_005:sink_valid
	wire  [130:0] hps_0_h2f_lw_axi_master_agent_write_cp_data;                                             // hps_0_h2f_lw_axi_master_agent:write_cp_data -> router_005:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_ready;                                            // router_005:sink_ready -> hps_0_h2f_lw_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket;                                    // hps_0_h2f_lw_axi_master_agent:write_cp_startofpacket -> router_005:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket;                                      // hps_0_h2f_lw_axi_master_agent:write_cp_endofpacket -> router_005:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_valid;                                             // hps_0_h2f_lw_axi_master_agent:read_cp_valid -> router_006:sink_valid
	wire  [130:0] hps_0_h2f_lw_axi_master_agent_read_cp_data;                                              // hps_0_h2f_lw_axi_master_agent:read_cp_data -> router_006:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_ready;                                             // router_006:sink_ready -> hps_0_h2f_lw_axi_master_agent:read_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket;                                     // hps_0_h2f_lw_axi_master_agent:read_cp_startofpacket -> router_006:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket;                                       // hps_0_h2f_lw_axi_master_agent:read_cp_endofpacket -> router_006:sink_endofpacket
	wire          memorydma_m_write_agent_cp_valid;                                                        // MemoryDMA_m_write_agent:cp_valid -> router_007:sink_valid
	wire  [130:0] memorydma_m_write_agent_cp_data;                                                         // MemoryDMA_m_write_agent:cp_data -> router_007:sink_data
	wire          memorydma_m_write_agent_cp_ready;                                                        // router_007:sink_ready -> MemoryDMA_m_write_agent:cp_ready
	wire          memorydma_m_write_agent_cp_startofpacket;                                                // MemoryDMA_m_write_agent:cp_startofpacket -> router_007:sink_startofpacket
	wire          memorydma_m_write_agent_cp_endofpacket;                                                  // MemoryDMA_m_write_agent:cp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                                    // router_007:src_valid -> cmd_demux_007:sink_valid
	wire  [130:0] router_007_src_data;                                                                     // router_007:src_data -> cmd_demux_007:sink_data
	wire          router_007_src_ready;                                                                    // cmd_demux_007:sink_ready -> router_007:src_ready
	wire   [11:0] router_007_src_channel;                                                                  // router_007:src_channel -> cmd_demux_007:sink_channel
	wire          router_007_src_startofpacket;                                                            // router_007:src_startofpacket -> cmd_demux_007:sink_startofpacket
	wire          router_007_src_endofpacket;                                                              // router_007:src_endofpacket -> cmd_demux_007:sink_endofpacket
	wire          onchip_memory2_0_s1_agent_rp_valid;                                                      // onchip_memory2_0_s1_agent:rp_valid -> router_008:sink_valid
	wire  [166:0] onchip_memory2_0_s1_agent_rp_data;                                                       // onchip_memory2_0_s1_agent:rp_data -> router_008:sink_data
	wire          onchip_memory2_0_s1_agent_rp_ready;                                                      // router_008:sink_ready -> onchip_memory2_0_s1_agent:rp_ready
	wire          onchip_memory2_0_s1_agent_rp_startofpacket;                                              // onchip_memory2_0_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          onchip_memory2_0_s1_agent_rp_endofpacket;                                                // onchip_memory2_0_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                                    // router_008:src_valid -> rsp_demux:sink_valid
	wire  [166:0] router_008_src_data;                                                                     // router_008:src_data -> rsp_demux:sink_data
	wire          router_008_src_ready;                                                                    // rsp_demux:sink_ready -> router_008:src_ready
	wire   [11:0] router_008_src_channel;                                                                  // router_008:src_channel -> rsp_demux:sink_channel
	wire          router_008_src_startofpacket;                                                            // router_008:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_008_src_endofpacket;                                                              // router_008:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          pio_led_s1_agent_rp_valid;                                                               // pio_led_s1_agent:rp_valid -> router_009:sink_valid
	wire  [130:0] pio_led_s1_agent_rp_data;                                                                // pio_led_s1_agent:rp_data -> router_009:sink_data
	wire          pio_led_s1_agent_rp_ready;                                                               // router_009:sink_ready -> pio_led_s1_agent:rp_ready
	wire          pio_led_s1_agent_rp_startofpacket;                                                       // pio_led_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          pio_led_s1_agent_rp_endofpacket;                                                         // pio_led_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                                    // router_009:src_valid -> rsp_demux_001:sink_valid
	wire  [130:0] router_009_src_data;                                                                     // router_009:src_data -> rsp_demux_001:sink_data
	wire          router_009_src_ready;                                                                    // rsp_demux_001:sink_ready -> router_009:src_ready
	wire   [11:0] router_009_src_channel;                                                                  // router_009:src_channel -> rsp_demux_001:sink_channel
	wire          router_009_src_startofpacket;                                                            // router_009:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_009_src_endofpacket;                                                              // router_009:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          onchip_memory2_1_s1_agent_rp_valid;                                                      // onchip_memory2_1_s1_agent:rp_valid -> router_010:sink_valid
	wire  [166:0] onchip_memory2_1_s1_agent_rp_data;                                                       // onchip_memory2_1_s1_agent:rp_data -> router_010:sink_data
	wire          onchip_memory2_1_s1_agent_rp_ready;                                                      // router_010:sink_ready -> onchip_memory2_1_s1_agent:rp_ready
	wire          onchip_memory2_1_s1_agent_rp_startofpacket;                                              // onchip_memory2_1_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          onchip_memory2_1_s1_agent_rp_endofpacket;                                                // onchip_memory2_1_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                                    // router_010:src_valid -> rsp_demux_002:sink_valid
	wire  [166:0] router_010_src_data;                                                                     // router_010:src_data -> rsp_demux_002:sink_data
	wire          router_010_src_ready;                                                                    // rsp_demux_002:sink_ready -> router_010:src_ready
	wire   [11:0] router_010_src_channel;                                                                  // router_010:src_channel -> rsp_demux_002:sink_channel
	wire          router_010_src_startofpacket;                                                            // router_010:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_010_src_endofpacket;                                                              // router_010:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          mm_clock_crossing_bridge_0_s0_agent_rp_valid;                                            // mm_clock_crossing_bridge_0_s0_agent:rp_valid -> router_011:sink_valid
	wire  [130:0] mm_clock_crossing_bridge_0_s0_agent_rp_data;                                             // mm_clock_crossing_bridge_0_s0_agent:rp_data -> router_011:sink_data
	wire          mm_clock_crossing_bridge_0_s0_agent_rp_ready;                                            // router_011:sink_ready -> mm_clock_crossing_bridge_0_s0_agent:rp_ready
	wire          mm_clock_crossing_bridge_0_s0_agent_rp_startofpacket;                                    // mm_clock_crossing_bridge_0_s0_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          mm_clock_crossing_bridge_0_s0_agent_rp_endofpacket;                                      // mm_clock_crossing_bridge_0_s0_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                                    // router_011:src_valid -> rsp_demux_003:sink_valid
	wire  [130:0] router_011_src_data;                                                                     // router_011:src_data -> rsp_demux_003:sink_data
	wire          router_011_src_ready;                                                                    // rsp_demux_003:sink_ready -> router_011:src_ready
	wire   [11:0] router_011_src_channel;                                                                  // router_011:src_channel -> rsp_demux_003:sink_channel
	wire          router_011_src_startofpacket;                                                            // router_011:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_011_src_endofpacket;                                                              // router_011:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_valid;                                              // jtag_uart_avalon_jtag_slave_agent:rp_valid -> router_012:sink_valid
	wire  [130:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                                               // jtag_uart_avalon_jtag_slave_agent:rp_data -> router_012:sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rp_ready;                                              // router_012:sink_ready -> jtag_uart_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                                      // jtag_uart_avalon_jtag_slave_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                                        // jtag_uart_avalon_jtag_slave_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                                    // router_012:src_valid -> rsp_demux_004:sink_valid
	wire  [130:0] router_012_src_data;                                                                     // router_012:src_data -> rsp_demux_004:sink_data
	wire          router_012_src_ready;                                                                    // rsp_demux_004:sink_ready -> router_012:src_ready
	wire   [11:0] router_012_src_channel;                                                                  // router_012:src_channel -> rsp_demux_004:sink_channel
	wire          router_012_src_startofpacket;                                                            // router_012:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_012_src_endofpacket;                                                              // router_012:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          dma_0_control_port_slave_agent_rp_valid;                                                 // dma_0_control_port_slave_agent:rp_valid -> router_013:sink_valid
	wire  [130:0] dma_0_control_port_slave_agent_rp_data;                                                  // dma_0_control_port_slave_agent:rp_data -> router_013:sink_data
	wire          dma_0_control_port_slave_agent_rp_ready;                                                 // router_013:sink_ready -> dma_0_control_port_slave_agent:rp_ready
	wire          dma_0_control_port_slave_agent_rp_startofpacket;                                         // dma_0_control_port_slave_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          dma_0_control_port_slave_agent_rp_endofpacket;                                           // dma_0_control_port_slave_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                                    // router_013:src_valid -> rsp_demux_005:sink_valid
	wire  [130:0] router_013_src_data;                                                                     // router_013:src_data -> rsp_demux_005:sink_data
	wire          router_013_src_ready;                                                                    // rsp_demux_005:sink_ready -> router_013:src_ready
	wire   [11:0] router_013_src_channel;                                                                  // router_013:src_channel -> rsp_demux_005:sink_channel
	wire          router_013_src_startofpacket;                                                            // router_013:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_013_src_endofpacket;                                                              // router_013:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          sysid_qsys_control_slave_agent_rp_valid;                                                 // sysid_qsys_control_slave_agent:rp_valid -> router_014:sink_valid
	wire  [130:0] sysid_qsys_control_slave_agent_rp_data;                                                  // sysid_qsys_control_slave_agent:rp_data -> router_014:sink_data
	wire          sysid_qsys_control_slave_agent_rp_ready;                                                 // router_014:sink_ready -> sysid_qsys_control_slave_agent:rp_ready
	wire          sysid_qsys_control_slave_agent_rp_startofpacket;                                         // sysid_qsys_control_slave_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          sysid_qsys_control_slave_agent_rp_endofpacket;                                           // sysid_qsys_control_slave_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                                    // router_014:src_valid -> rsp_demux_006:sink_valid
	wire  [130:0] router_014_src_data;                                                                     // router_014:src_data -> rsp_demux_006:sink_data
	wire          router_014_src_ready;                                                                    // rsp_demux_006:sink_ready -> router_014:src_ready
	wire   [11:0] router_014_src_channel;                                                                  // router_014:src_channel -> rsp_demux_006:sink_channel
	wire          router_014_src_startofpacket;                                                            // router_014:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_014_src_endofpacket;                                                              // router_014:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          memorydma_csr_agent_rp_valid;                                                            // MemoryDMA_csr_agent:rp_valid -> router_015:sink_valid
	wire  [130:0] memorydma_csr_agent_rp_data;                                                             // MemoryDMA_csr_agent:rp_data -> router_015:sink_data
	wire          memorydma_csr_agent_rp_ready;                                                            // router_015:sink_ready -> MemoryDMA_csr_agent:rp_ready
	wire          memorydma_csr_agent_rp_startofpacket;                                                    // MemoryDMA_csr_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          memorydma_csr_agent_rp_endofpacket;                                                      // MemoryDMA_csr_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                                    // router_015:src_valid -> rsp_demux_007:sink_valid
	wire  [130:0] router_015_src_data;                                                                     // router_015:src_data -> rsp_demux_007:sink_data
	wire          router_015_src_ready;                                                                    // rsp_demux_007:sink_ready -> router_015:src_ready
	wire   [11:0] router_015_src_channel;                                                                  // router_015:src_channel -> rsp_demux_007:sink_channel
	wire          router_015_src_startofpacket;                                                            // router_015:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_015_src_endofpacket;                                                              // router_015:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          pio_reg1_s1_agent_rp_valid;                                                              // pio_reg1_s1_agent:rp_valid -> router_016:sink_valid
	wire  [130:0] pio_reg1_s1_agent_rp_data;                                                               // pio_reg1_s1_agent:rp_data -> router_016:sink_data
	wire          pio_reg1_s1_agent_rp_ready;                                                              // router_016:sink_ready -> pio_reg1_s1_agent:rp_ready
	wire          pio_reg1_s1_agent_rp_startofpacket;                                                      // pio_reg1_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          pio_reg1_s1_agent_rp_endofpacket;                                                        // pio_reg1_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                                    // router_016:src_valid -> rsp_demux_008:sink_valid
	wire  [130:0] router_016_src_data;                                                                     // router_016:src_data -> rsp_demux_008:sink_data
	wire          router_016_src_ready;                                                                    // rsp_demux_008:sink_ready -> router_016:src_ready
	wire   [11:0] router_016_src_channel;                                                                  // router_016:src_channel -> rsp_demux_008:sink_channel
	wire          router_016_src_startofpacket;                                                            // router_016:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_016_src_endofpacket;                                                              // router_016:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          pio_reg2_s1_agent_rp_valid;                                                              // pio_reg2_s1_agent:rp_valid -> router_017:sink_valid
	wire  [130:0] pio_reg2_s1_agent_rp_data;                                                               // pio_reg2_s1_agent:rp_data -> router_017:sink_data
	wire          pio_reg2_s1_agent_rp_ready;                                                              // router_017:sink_ready -> pio_reg2_s1_agent:rp_ready
	wire          pio_reg2_s1_agent_rp_startofpacket;                                                      // pio_reg2_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          pio_reg2_s1_agent_rp_endofpacket;                                                        // pio_reg2_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                                    // router_017:src_valid -> rsp_demux_009:sink_valid
	wire  [130:0] router_017_src_data;                                                                     // router_017:src_data -> rsp_demux_009:sink_data
	wire          router_017_src_ready;                                                                    // rsp_demux_009:sink_ready -> router_017:src_ready
	wire   [11:0] router_017_src_channel;                                                                  // router_017:src_channel -> rsp_demux_009:sink_channel
	wire          router_017_src_startofpacket;                                                            // router_017:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_017_src_endofpacket;                                                              // router_017:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          pio_reg3_s1_agent_rp_valid;                                                              // pio_reg3_s1_agent:rp_valid -> router_018:sink_valid
	wire  [130:0] pio_reg3_s1_agent_rp_data;                                                               // pio_reg3_s1_agent:rp_data -> router_018:sink_data
	wire          pio_reg3_s1_agent_rp_ready;                                                              // router_018:sink_ready -> pio_reg3_s1_agent:rp_ready
	wire          pio_reg3_s1_agent_rp_startofpacket;                                                      // pio_reg3_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          pio_reg3_s1_agent_rp_endofpacket;                                                        // pio_reg3_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                                    // router_018:src_valid -> rsp_demux_010:sink_valid
	wire  [130:0] router_018_src_data;                                                                     // router_018:src_data -> rsp_demux_010:sink_data
	wire          router_018_src_ready;                                                                    // rsp_demux_010:sink_ready -> router_018:src_ready
	wire   [11:0] router_018_src_channel;                                                                  // router_018:src_channel -> rsp_demux_010:sink_channel
	wire          router_018_src_startofpacket;                                                            // router_018:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_018_src_endofpacket;                                                              // router_018:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          intr_capturer_0_avalon_slave_0_agent_rp_valid;                                           // intr_capturer_0_avalon_slave_0_agent:rp_valid -> router_019:sink_valid
	wire  [130:0] intr_capturer_0_avalon_slave_0_agent_rp_data;                                            // intr_capturer_0_avalon_slave_0_agent:rp_data -> router_019:sink_data
	wire          intr_capturer_0_avalon_slave_0_agent_rp_ready;                                           // router_019:sink_ready -> intr_capturer_0_avalon_slave_0_agent:rp_ready
	wire          intr_capturer_0_avalon_slave_0_agent_rp_startofpacket;                                   // intr_capturer_0_avalon_slave_0_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          intr_capturer_0_avalon_slave_0_agent_rp_endofpacket;                                     // intr_capturer_0_avalon_slave_0_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          router_019_src_valid;                                                                    // router_019:src_valid -> rsp_demux_011:sink_valid
	wire  [130:0] router_019_src_data;                                                                     // router_019:src_data -> rsp_demux_011:sink_data
	wire          router_019_src_ready;                                                                    // rsp_demux_011:sink_ready -> router_019:src_ready
	wire   [11:0] router_019_src_channel;                                                                  // router_019:src_channel -> rsp_demux_011:sink_channel
	wire          router_019_src_startofpacket;                                                            // router_019:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_019_src_endofpacket;                                                              // router_019:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          router_src_valid;                                                                        // router:src_valid -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_valid
	wire  [166:0] router_src_data;                                                                         // router:src_data -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                                                        // hps_0_h2f_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire   [11:0] router_src_channel;                                                                      // router:src_channel -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                                // router:src_startofpacket -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                                  // router:src_endofpacket -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [166:0] hps_0_h2f_axi_master_wr_limiter_cmd_src_data;                                            // hps_0_h2f_axi_master_wr_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          hps_0_h2f_axi_master_wr_limiter_cmd_src_ready;                                           // cmd_demux:sink_ready -> hps_0_h2f_axi_master_wr_limiter:cmd_src_ready
	wire   [11:0] hps_0_h2f_axi_master_wr_limiter_cmd_src_channel;                                         // hps_0_h2f_axi_master_wr_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          hps_0_h2f_axi_master_wr_limiter_cmd_src_startofpacket;                                   // hps_0_h2f_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          hps_0_h2f_axi_master_wr_limiter_cmd_src_endofpacket;                                     // hps_0_h2f_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                                       // rsp_mux:src_valid -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_valid
	wire  [166:0] rsp_mux_src_data;                                                                        // rsp_mux:src_data -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                                       // hps_0_h2f_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [11:0] rsp_mux_src_channel;                                                                     // rsp_mux:src_channel -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                               // rsp_mux:src_startofpacket -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                 // rsp_mux:src_endofpacket -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_axi_master_wr_limiter_rsp_src_valid;                                           // hps_0_h2f_axi_master_wr_limiter:rsp_src_valid -> hps_0_h2f_axi_master_agent:write_rp_valid
	wire  [166:0] hps_0_h2f_axi_master_wr_limiter_rsp_src_data;                                            // hps_0_h2f_axi_master_wr_limiter:rsp_src_data -> hps_0_h2f_axi_master_agent:write_rp_data
	wire          hps_0_h2f_axi_master_wr_limiter_rsp_src_ready;                                           // hps_0_h2f_axi_master_agent:write_rp_ready -> hps_0_h2f_axi_master_wr_limiter:rsp_src_ready
	wire   [11:0] hps_0_h2f_axi_master_wr_limiter_rsp_src_channel;                                         // hps_0_h2f_axi_master_wr_limiter:rsp_src_channel -> hps_0_h2f_axi_master_agent:write_rp_channel
	wire          hps_0_h2f_axi_master_wr_limiter_rsp_src_startofpacket;                                   // hps_0_h2f_axi_master_wr_limiter:rsp_src_startofpacket -> hps_0_h2f_axi_master_agent:write_rp_startofpacket
	wire          hps_0_h2f_axi_master_wr_limiter_rsp_src_endofpacket;                                     // hps_0_h2f_axi_master_wr_limiter:rsp_src_endofpacket -> hps_0_h2f_axi_master_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                                                    // router_001:src_valid -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_valid
	wire  [166:0] router_001_src_data;                                                                     // router_001:src_data -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                                    // hps_0_h2f_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [11:0] router_001_src_channel;                                                                  // router_001:src_channel -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                            // router_001:src_startofpacket -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                              // router_001:src_endofpacket -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [166:0] hps_0_h2f_axi_master_rd_limiter_cmd_src_data;                                            // hps_0_h2f_axi_master_rd_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          hps_0_h2f_axi_master_rd_limiter_cmd_src_ready;                                           // cmd_demux_001:sink_ready -> hps_0_h2f_axi_master_rd_limiter:cmd_src_ready
	wire   [11:0] hps_0_h2f_axi_master_rd_limiter_cmd_src_channel;                                         // hps_0_h2f_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          hps_0_h2f_axi_master_rd_limiter_cmd_src_startofpacket;                                   // hps_0_h2f_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          hps_0_h2f_axi_master_rd_limiter_cmd_src_endofpacket;                                     // hps_0_h2f_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                                   // rsp_mux_001:src_valid -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_valid
	wire  [166:0] rsp_mux_001_src_data;                                                                    // rsp_mux_001:src_data -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                                   // hps_0_h2f_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire   [11:0] rsp_mux_001_src_channel;                                                                 // rsp_mux_001:src_channel -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                           // rsp_mux_001:src_startofpacket -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                             // rsp_mux_001:src_endofpacket -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_axi_master_rd_limiter_rsp_src_valid;                                           // hps_0_h2f_axi_master_rd_limiter:rsp_src_valid -> hps_0_h2f_axi_master_agent:read_rp_valid
	wire  [166:0] hps_0_h2f_axi_master_rd_limiter_rsp_src_data;                                            // hps_0_h2f_axi_master_rd_limiter:rsp_src_data -> hps_0_h2f_axi_master_agent:read_rp_data
	wire          hps_0_h2f_axi_master_rd_limiter_rsp_src_ready;                                           // hps_0_h2f_axi_master_agent:read_rp_ready -> hps_0_h2f_axi_master_rd_limiter:rsp_src_ready
	wire   [11:0] hps_0_h2f_axi_master_rd_limiter_rsp_src_channel;                                         // hps_0_h2f_axi_master_rd_limiter:rsp_src_channel -> hps_0_h2f_axi_master_agent:read_rp_channel
	wire          hps_0_h2f_axi_master_rd_limiter_rsp_src_startofpacket;                                   // hps_0_h2f_axi_master_rd_limiter:rsp_src_startofpacket -> hps_0_h2f_axi_master_agent:read_rp_startofpacket
	wire          hps_0_h2f_axi_master_rd_limiter_rsp_src_endofpacket;                                     // hps_0_h2f_axi_master_rd_limiter:rsp_src_endofpacket -> hps_0_h2f_axi_master_agent:read_rp_endofpacket
	wire          router_002_src_valid;                                                                    // router_002:src_valid -> fpga_only_master_master_limiter:cmd_sink_valid
	wire  [130:0] router_002_src_data;                                                                     // router_002:src_data -> fpga_only_master_master_limiter:cmd_sink_data
	wire          router_002_src_ready;                                                                    // fpga_only_master_master_limiter:cmd_sink_ready -> router_002:src_ready
	wire   [11:0] router_002_src_channel;                                                                  // router_002:src_channel -> fpga_only_master_master_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                                            // router_002:src_startofpacket -> fpga_only_master_master_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                                              // router_002:src_endofpacket -> fpga_only_master_master_limiter:cmd_sink_endofpacket
	wire  [130:0] fpga_only_master_master_limiter_cmd_src_data;                                            // fpga_only_master_master_limiter:cmd_src_data -> cmd_demux_002:sink_data
	wire          fpga_only_master_master_limiter_cmd_src_ready;                                           // cmd_demux_002:sink_ready -> fpga_only_master_master_limiter:cmd_src_ready
	wire   [11:0] fpga_only_master_master_limiter_cmd_src_channel;                                         // fpga_only_master_master_limiter:cmd_src_channel -> cmd_demux_002:sink_channel
	wire          fpga_only_master_master_limiter_cmd_src_startofpacket;                                   // fpga_only_master_master_limiter:cmd_src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          fpga_only_master_master_limiter_cmd_src_endofpacket;                                     // fpga_only_master_master_limiter:cmd_src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                                                   // rsp_mux_002:src_valid -> fpga_only_master_master_limiter:rsp_sink_valid
	wire  [130:0] rsp_mux_002_src_data;                                                                    // rsp_mux_002:src_data -> fpga_only_master_master_limiter:rsp_sink_data
	wire          rsp_mux_002_src_ready;                                                                   // fpga_only_master_master_limiter:rsp_sink_ready -> rsp_mux_002:src_ready
	wire   [11:0] rsp_mux_002_src_channel;                                                                 // rsp_mux_002:src_channel -> fpga_only_master_master_limiter:rsp_sink_channel
	wire          rsp_mux_002_src_startofpacket;                                                           // rsp_mux_002:src_startofpacket -> fpga_only_master_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                             // rsp_mux_002:src_endofpacket -> fpga_only_master_master_limiter:rsp_sink_endofpacket
	wire          fpga_only_master_master_limiter_rsp_src_valid;                                           // fpga_only_master_master_limiter:rsp_src_valid -> fpga_only_master_master_agent:rp_valid
	wire  [130:0] fpga_only_master_master_limiter_rsp_src_data;                                            // fpga_only_master_master_limiter:rsp_src_data -> fpga_only_master_master_agent:rp_data
	wire          fpga_only_master_master_limiter_rsp_src_ready;                                           // fpga_only_master_master_agent:rp_ready -> fpga_only_master_master_limiter:rsp_src_ready
	wire   [11:0] fpga_only_master_master_limiter_rsp_src_channel;                                         // fpga_only_master_master_limiter:rsp_src_channel -> fpga_only_master_master_agent:rp_channel
	wire          fpga_only_master_master_limiter_rsp_src_startofpacket;                                   // fpga_only_master_master_limiter:rsp_src_startofpacket -> fpga_only_master_master_agent:rp_startofpacket
	wire          fpga_only_master_master_limiter_rsp_src_endofpacket;                                     // fpga_only_master_master_limiter:rsp_src_endofpacket -> fpga_only_master_master_agent:rp_endofpacket
	wire          router_003_src_valid;                                                                    // router_003:src_valid -> dma_0_read_master_limiter:cmd_sink_valid
	wire  [166:0] router_003_src_data;                                                                     // router_003:src_data -> dma_0_read_master_limiter:cmd_sink_data
	wire          router_003_src_ready;                                                                    // dma_0_read_master_limiter:cmd_sink_ready -> router_003:src_ready
	wire   [11:0] router_003_src_channel;                                                                  // router_003:src_channel -> dma_0_read_master_limiter:cmd_sink_channel
	wire          router_003_src_startofpacket;                                                            // router_003:src_startofpacket -> dma_0_read_master_limiter:cmd_sink_startofpacket
	wire          router_003_src_endofpacket;                                                              // router_003:src_endofpacket -> dma_0_read_master_limiter:cmd_sink_endofpacket
	wire  [166:0] dma_0_read_master_limiter_cmd_src_data;                                                  // dma_0_read_master_limiter:cmd_src_data -> cmd_demux_003:sink_data
	wire          dma_0_read_master_limiter_cmd_src_ready;                                                 // cmd_demux_003:sink_ready -> dma_0_read_master_limiter:cmd_src_ready
	wire   [11:0] dma_0_read_master_limiter_cmd_src_channel;                                               // dma_0_read_master_limiter:cmd_src_channel -> cmd_demux_003:sink_channel
	wire          dma_0_read_master_limiter_cmd_src_startofpacket;                                         // dma_0_read_master_limiter:cmd_src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          dma_0_read_master_limiter_cmd_src_endofpacket;                                           // dma_0_read_master_limiter:cmd_src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          rsp_mux_003_src_valid;                                                                   // rsp_mux_003:src_valid -> dma_0_read_master_limiter:rsp_sink_valid
	wire  [166:0] rsp_mux_003_src_data;                                                                    // rsp_mux_003:src_data -> dma_0_read_master_limiter:rsp_sink_data
	wire          rsp_mux_003_src_ready;                                                                   // dma_0_read_master_limiter:rsp_sink_ready -> rsp_mux_003:src_ready
	wire   [11:0] rsp_mux_003_src_channel;                                                                 // rsp_mux_003:src_channel -> dma_0_read_master_limiter:rsp_sink_channel
	wire          rsp_mux_003_src_startofpacket;                                                           // rsp_mux_003:src_startofpacket -> dma_0_read_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                             // rsp_mux_003:src_endofpacket -> dma_0_read_master_limiter:rsp_sink_endofpacket
	wire          dma_0_read_master_limiter_rsp_src_valid;                                                 // dma_0_read_master_limiter:rsp_src_valid -> dma_0_read_master_agent:rp_valid
	wire  [166:0] dma_0_read_master_limiter_rsp_src_data;                                                  // dma_0_read_master_limiter:rsp_src_data -> dma_0_read_master_agent:rp_data
	wire          dma_0_read_master_limiter_rsp_src_ready;                                                 // dma_0_read_master_agent:rp_ready -> dma_0_read_master_limiter:rsp_src_ready
	wire   [11:0] dma_0_read_master_limiter_rsp_src_channel;                                               // dma_0_read_master_limiter:rsp_src_channel -> dma_0_read_master_agent:rp_channel
	wire          dma_0_read_master_limiter_rsp_src_startofpacket;                                         // dma_0_read_master_limiter:rsp_src_startofpacket -> dma_0_read_master_agent:rp_startofpacket
	wire          dma_0_read_master_limiter_rsp_src_endofpacket;                                           // dma_0_read_master_limiter:rsp_src_endofpacket -> dma_0_read_master_agent:rp_endofpacket
	wire          router_005_src_valid;                                                                    // router_005:src_valid -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_valid
	wire  [130:0] router_005_src_data;                                                                     // router_005:src_data -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_data
	wire          router_005_src_ready;                                                                    // hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_ready -> router_005:src_ready
	wire   [11:0] router_005_src_channel;                                                                  // router_005:src_channel -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_channel
	wire          router_005_src_startofpacket;                                                            // router_005:src_startofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_005_src_endofpacket;                                                              // router_005:src_endofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [130:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data;                                         // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_data -> cmd_demux_005:sink_data
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready;                                        // cmd_demux_005:sink_ready -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_ready
	wire   [11:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel;                                      // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_channel -> cmd_demux_005:sink_channel
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket;                                // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux_005:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket;                                  // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux_005:sink_endofpacket
	wire          rsp_mux_005_src_valid;                                                                   // rsp_mux_005:src_valid -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_valid
	wire  [130:0] rsp_mux_005_src_data;                                                                    // rsp_mux_005:src_data -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_005_src_ready;                                                                   // hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux_005:src_ready
	wire   [11:0] rsp_mux_005_src_channel;                                                                 // rsp_mux_005:src_channel -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_005_src_startofpacket;                                                           // rsp_mux_005:src_startofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_005_src_endofpacket;                                                             // rsp_mux_005:src_endofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid;                                        // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:write_rp_valid
	wire  [130:0] hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data;                                         // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:write_rp_data
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready;                                        // hps_0_h2f_lw_axi_master_agent:write_rp_ready -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_ready
	wire   [11:0] hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel;                                      // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:write_rp_channel
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket;                                // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket;                                  // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          router_006_src_valid;                                                                    // router_006:src_valid -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_valid
	wire  [130:0] router_006_src_data;                                                                     // router_006:src_data -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_data
	wire          router_006_src_ready;                                                                    // hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_ready -> router_006:src_ready
	wire   [11:0] router_006_src_channel;                                                                  // router_006:src_channel -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_channel
	wire          router_006_src_startofpacket;                                                            // router_006:src_startofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_006_src_endofpacket;                                                              // router_006:src_endofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [130:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data;                                         // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_data -> cmd_demux_006:sink_data
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready;                                        // cmd_demux_006:sink_ready -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_ready
	wire   [11:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel;                                      // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_006:sink_channel
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket;                                // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_006:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket;                                  // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_006:sink_endofpacket
	wire          rsp_mux_006_src_valid;                                                                   // rsp_mux_006:src_valid -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_valid
	wire  [130:0] rsp_mux_006_src_data;                                                                    // rsp_mux_006:src_data -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_006_src_ready;                                                                   // hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_006:src_ready
	wire   [11:0] rsp_mux_006_src_channel;                                                                 // rsp_mux_006:src_channel -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_006_src_startofpacket;                                                           // rsp_mux_006:src_startofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_006_src_endofpacket;                                                             // rsp_mux_006:src_endofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid;                                        // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:read_rp_valid
	wire  [130:0] hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data;                                         // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:read_rp_data
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready;                                        // hps_0_h2f_lw_axi_master_agent:read_rp_ready -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_ready
	wire   [11:0] hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel;                                      // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:read_rp_channel
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket;                                // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket;                                  // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire          cmd_mux_src_valid;                                                                       // cmd_mux:src_valid -> onchip_memory2_0_s1_burst_adapter:sink0_valid
	wire  [166:0] cmd_mux_src_data;                                                                        // cmd_mux:src_data -> onchip_memory2_0_s1_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                                       // onchip_memory2_0_s1_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire   [11:0] cmd_mux_src_channel;                                                                     // cmd_mux:src_channel -> onchip_memory2_0_s1_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                               // cmd_mux:src_startofpacket -> onchip_memory2_0_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                 // cmd_mux:src_endofpacket -> onchip_memory2_0_s1_burst_adapter:sink0_endofpacket
	wire          onchip_memory2_0_s1_burst_adapter_source0_valid;                                         // onchip_memory2_0_s1_burst_adapter:source0_valid -> onchip_memory2_0_s1_agent:cp_valid
	wire  [166:0] onchip_memory2_0_s1_burst_adapter_source0_data;                                          // onchip_memory2_0_s1_burst_adapter:source0_data -> onchip_memory2_0_s1_agent:cp_data
	wire          onchip_memory2_0_s1_burst_adapter_source0_ready;                                         // onchip_memory2_0_s1_agent:cp_ready -> onchip_memory2_0_s1_burst_adapter:source0_ready
	wire   [11:0] onchip_memory2_0_s1_burst_adapter_source0_channel;                                       // onchip_memory2_0_s1_burst_adapter:source0_channel -> onchip_memory2_0_s1_agent:cp_channel
	wire          onchip_memory2_0_s1_burst_adapter_source0_startofpacket;                                 // onchip_memory2_0_s1_burst_adapter:source0_startofpacket -> onchip_memory2_0_s1_agent:cp_startofpacket
	wire          onchip_memory2_0_s1_burst_adapter_source0_endofpacket;                                   // onchip_memory2_0_s1_burst_adapter:source0_endofpacket -> onchip_memory2_0_s1_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                                   // cmd_mux_001:src_valid -> pio_led_s1_burst_adapter:sink0_valid
	wire  [130:0] cmd_mux_001_src_data;                                                                    // cmd_mux_001:src_data -> pio_led_s1_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                                                   // pio_led_s1_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire   [11:0] cmd_mux_001_src_channel;                                                                 // cmd_mux_001:src_channel -> pio_led_s1_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                                           // cmd_mux_001:src_startofpacket -> pio_led_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                             // cmd_mux_001:src_endofpacket -> pio_led_s1_burst_adapter:sink0_endofpacket
	wire          pio_led_s1_burst_adapter_source0_valid;                                                  // pio_led_s1_burst_adapter:source0_valid -> pio_led_s1_agent:cp_valid
	wire  [130:0] pio_led_s1_burst_adapter_source0_data;                                                   // pio_led_s1_burst_adapter:source0_data -> pio_led_s1_agent:cp_data
	wire          pio_led_s1_burst_adapter_source0_ready;                                                  // pio_led_s1_agent:cp_ready -> pio_led_s1_burst_adapter:source0_ready
	wire   [11:0] pio_led_s1_burst_adapter_source0_channel;                                                // pio_led_s1_burst_adapter:source0_channel -> pio_led_s1_agent:cp_channel
	wire          pio_led_s1_burst_adapter_source0_startofpacket;                                          // pio_led_s1_burst_adapter:source0_startofpacket -> pio_led_s1_agent:cp_startofpacket
	wire          pio_led_s1_burst_adapter_source0_endofpacket;                                            // pio_led_s1_burst_adapter:source0_endofpacket -> pio_led_s1_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                                                   // cmd_mux_002:src_valid -> onchip_memory2_1_s1_burst_adapter:sink0_valid
	wire  [166:0] cmd_mux_002_src_data;                                                                    // cmd_mux_002:src_data -> onchip_memory2_1_s1_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                                                   // onchip_memory2_1_s1_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire   [11:0] cmd_mux_002_src_channel;                                                                 // cmd_mux_002:src_channel -> onchip_memory2_1_s1_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                                           // cmd_mux_002:src_startofpacket -> onchip_memory2_1_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                             // cmd_mux_002:src_endofpacket -> onchip_memory2_1_s1_burst_adapter:sink0_endofpacket
	wire          onchip_memory2_1_s1_burst_adapter_source0_valid;                                         // onchip_memory2_1_s1_burst_adapter:source0_valid -> onchip_memory2_1_s1_agent:cp_valid
	wire  [166:0] onchip_memory2_1_s1_burst_adapter_source0_data;                                          // onchip_memory2_1_s1_burst_adapter:source0_data -> onchip_memory2_1_s1_agent:cp_data
	wire          onchip_memory2_1_s1_burst_adapter_source0_ready;                                         // onchip_memory2_1_s1_agent:cp_ready -> onchip_memory2_1_s1_burst_adapter:source0_ready
	wire   [11:0] onchip_memory2_1_s1_burst_adapter_source0_channel;                                       // onchip_memory2_1_s1_burst_adapter:source0_channel -> onchip_memory2_1_s1_agent:cp_channel
	wire          onchip_memory2_1_s1_burst_adapter_source0_startofpacket;                                 // onchip_memory2_1_s1_burst_adapter:source0_startofpacket -> onchip_memory2_1_s1_agent:cp_startofpacket
	wire          onchip_memory2_1_s1_burst_adapter_source0_endofpacket;                                   // onchip_memory2_1_s1_burst_adapter:source0_endofpacket -> onchip_memory2_1_s1_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                                                   // cmd_mux_003:src_valid -> mm_clock_crossing_bridge_0_s0_burst_adapter:sink0_valid
	wire  [130:0] cmd_mux_003_src_data;                                                                    // cmd_mux_003:src_data -> mm_clock_crossing_bridge_0_s0_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                                                   // mm_clock_crossing_bridge_0_s0_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire   [11:0] cmd_mux_003_src_channel;                                                                 // cmd_mux_003:src_channel -> mm_clock_crossing_bridge_0_s0_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                                           // cmd_mux_003:src_startofpacket -> mm_clock_crossing_bridge_0_s0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                             // cmd_mux_003:src_endofpacket -> mm_clock_crossing_bridge_0_s0_burst_adapter:sink0_endofpacket
	wire          mm_clock_crossing_bridge_0_s0_burst_adapter_source0_valid;                               // mm_clock_crossing_bridge_0_s0_burst_adapter:source0_valid -> mm_clock_crossing_bridge_0_s0_agent:cp_valid
	wire  [130:0] mm_clock_crossing_bridge_0_s0_burst_adapter_source0_data;                                // mm_clock_crossing_bridge_0_s0_burst_adapter:source0_data -> mm_clock_crossing_bridge_0_s0_agent:cp_data
	wire          mm_clock_crossing_bridge_0_s0_burst_adapter_source0_ready;                               // mm_clock_crossing_bridge_0_s0_agent:cp_ready -> mm_clock_crossing_bridge_0_s0_burst_adapter:source0_ready
	wire   [11:0] mm_clock_crossing_bridge_0_s0_burst_adapter_source0_channel;                             // mm_clock_crossing_bridge_0_s0_burst_adapter:source0_channel -> mm_clock_crossing_bridge_0_s0_agent:cp_channel
	wire          mm_clock_crossing_bridge_0_s0_burst_adapter_source0_startofpacket;                       // mm_clock_crossing_bridge_0_s0_burst_adapter:source0_startofpacket -> mm_clock_crossing_bridge_0_s0_agent:cp_startofpacket
	wire          mm_clock_crossing_bridge_0_s0_burst_adapter_source0_endofpacket;                         // mm_clock_crossing_bridge_0_s0_burst_adapter:source0_endofpacket -> mm_clock_crossing_bridge_0_s0_agent:cp_endofpacket
	wire          cmd_mux_004_src_valid;                                                                   // cmd_mux_004:src_valid -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_valid
	wire  [130:0] cmd_mux_004_src_data;                                                                    // cmd_mux_004:src_data -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_data
	wire          cmd_mux_004_src_ready;                                                                   // jtag_uart_avalon_jtag_slave_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire   [11:0] cmd_mux_004_src_channel;                                                                 // cmd_mux_004:src_channel -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_startofpacket;                                                           // cmd_mux_004:src_startofpacket -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                             // cmd_mux_004:src_endofpacket -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_endofpacket
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_valid;                                 // jtag_uart_avalon_jtag_slave_burst_adapter:source0_valid -> jtag_uart_avalon_jtag_slave_agent:cp_valid
	wire  [130:0] jtag_uart_avalon_jtag_slave_burst_adapter_source0_data;                                  // jtag_uart_avalon_jtag_slave_burst_adapter:source0_data -> jtag_uart_avalon_jtag_slave_agent:cp_data
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_ready;                                 // jtag_uart_avalon_jtag_slave_agent:cp_ready -> jtag_uart_avalon_jtag_slave_burst_adapter:source0_ready
	wire   [11:0] jtag_uart_avalon_jtag_slave_burst_adapter_source0_channel;                               // jtag_uart_avalon_jtag_slave_burst_adapter:source0_channel -> jtag_uart_avalon_jtag_slave_agent:cp_channel
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_startofpacket;                         // jtag_uart_avalon_jtag_slave_burst_adapter:source0_startofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_startofpacket
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_endofpacket;                           // jtag_uart_avalon_jtag_slave_burst_adapter:source0_endofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_endofpacket
	wire          cmd_mux_005_src_valid;                                                                   // cmd_mux_005:src_valid -> dma_0_control_port_slave_burst_adapter:sink0_valid
	wire  [130:0] cmd_mux_005_src_data;                                                                    // cmd_mux_005:src_data -> dma_0_control_port_slave_burst_adapter:sink0_data
	wire          cmd_mux_005_src_ready;                                                                   // dma_0_control_port_slave_burst_adapter:sink0_ready -> cmd_mux_005:src_ready
	wire   [11:0] cmd_mux_005_src_channel;                                                                 // cmd_mux_005:src_channel -> dma_0_control_port_slave_burst_adapter:sink0_channel
	wire          cmd_mux_005_src_startofpacket;                                                           // cmd_mux_005:src_startofpacket -> dma_0_control_port_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                             // cmd_mux_005:src_endofpacket -> dma_0_control_port_slave_burst_adapter:sink0_endofpacket
	wire          dma_0_control_port_slave_burst_adapter_source0_valid;                                    // dma_0_control_port_slave_burst_adapter:source0_valid -> dma_0_control_port_slave_agent:cp_valid
	wire  [130:0] dma_0_control_port_slave_burst_adapter_source0_data;                                     // dma_0_control_port_slave_burst_adapter:source0_data -> dma_0_control_port_slave_agent:cp_data
	wire          dma_0_control_port_slave_burst_adapter_source0_ready;                                    // dma_0_control_port_slave_agent:cp_ready -> dma_0_control_port_slave_burst_adapter:source0_ready
	wire   [11:0] dma_0_control_port_slave_burst_adapter_source0_channel;                                  // dma_0_control_port_slave_burst_adapter:source0_channel -> dma_0_control_port_slave_agent:cp_channel
	wire          dma_0_control_port_slave_burst_adapter_source0_startofpacket;                            // dma_0_control_port_slave_burst_adapter:source0_startofpacket -> dma_0_control_port_slave_agent:cp_startofpacket
	wire          dma_0_control_port_slave_burst_adapter_source0_endofpacket;                              // dma_0_control_port_slave_burst_adapter:source0_endofpacket -> dma_0_control_port_slave_agent:cp_endofpacket
	wire          cmd_mux_006_src_valid;                                                                   // cmd_mux_006:src_valid -> sysid_qsys_control_slave_burst_adapter:sink0_valid
	wire  [130:0] cmd_mux_006_src_data;                                                                    // cmd_mux_006:src_data -> sysid_qsys_control_slave_burst_adapter:sink0_data
	wire          cmd_mux_006_src_ready;                                                                   // sysid_qsys_control_slave_burst_adapter:sink0_ready -> cmd_mux_006:src_ready
	wire   [11:0] cmd_mux_006_src_channel;                                                                 // cmd_mux_006:src_channel -> sysid_qsys_control_slave_burst_adapter:sink0_channel
	wire          cmd_mux_006_src_startofpacket;                                                           // cmd_mux_006:src_startofpacket -> sysid_qsys_control_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                             // cmd_mux_006:src_endofpacket -> sysid_qsys_control_slave_burst_adapter:sink0_endofpacket
	wire          sysid_qsys_control_slave_burst_adapter_source0_valid;                                    // sysid_qsys_control_slave_burst_adapter:source0_valid -> sysid_qsys_control_slave_agent:cp_valid
	wire  [130:0] sysid_qsys_control_slave_burst_adapter_source0_data;                                     // sysid_qsys_control_slave_burst_adapter:source0_data -> sysid_qsys_control_slave_agent:cp_data
	wire          sysid_qsys_control_slave_burst_adapter_source0_ready;                                    // sysid_qsys_control_slave_agent:cp_ready -> sysid_qsys_control_slave_burst_adapter:source0_ready
	wire   [11:0] sysid_qsys_control_slave_burst_adapter_source0_channel;                                  // sysid_qsys_control_slave_burst_adapter:source0_channel -> sysid_qsys_control_slave_agent:cp_channel
	wire          sysid_qsys_control_slave_burst_adapter_source0_startofpacket;                            // sysid_qsys_control_slave_burst_adapter:source0_startofpacket -> sysid_qsys_control_slave_agent:cp_startofpacket
	wire          sysid_qsys_control_slave_burst_adapter_source0_endofpacket;                              // sysid_qsys_control_slave_burst_adapter:source0_endofpacket -> sysid_qsys_control_slave_agent:cp_endofpacket
	wire          cmd_mux_007_src_valid;                                                                   // cmd_mux_007:src_valid -> MemoryDMA_csr_burst_adapter:sink0_valid
	wire  [130:0] cmd_mux_007_src_data;                                                                    // cmd_mux_007:src_data -> MemoryDMA_csr_burst_adapter:sink0_data
	wire          cmd_mux_007_src_ready;                                                                   // MemoryDMA_csr_burst_adapter:sink0_ready -> cmd_mux_007:src_ready
	wire   [11:0] cmd_mux_007_src_channel;                                                                 // cmd_mux_007:src_channel -> MemoryDMA_csr_burst_adapter:sink0_channel
	wire          cmd_mux_007_src_startofpacket;                                                           // cmd_mux_007:src_startofpacket -> MemoryDMA_csr_burst_adapter:sink0_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                             // cmd_mux_007:src_endofpacket -> MemoryDMA_csr_burst_adapter:sink0_endofpacket
	wire          memorydma_csr_burst_adapter_source0_valid;                                               // MemoryDMA_csr_burst_adapter:source0_valid -> MemoryDMA_csr_agent:cp_valid
	wire  [130:0] memorydma_csr_burst_adapter_source0_data;                                                // MemoryDMA_csr_burst_adapter:source0_data -> MemoryDMA_csr_agent:cp_data
	wire          memorydma_csr_burst_adapter_source0_ready;                                               // MemoryDMA_csr_agent:cp_ready -> MemoryDMA_csr_burst_adapter:source0_ready
	wire   [11:0] memorydma_csr_burst_adapter_source0_channel;                                             // MemoryDMA_csr_burst_adapter:source0_channel -> MemoryDMA_csr_agent:cp_channel
	wire          memorydma_csr_burst_adapter_source0_startofpacket;                                       // MemoryDMA_csr_burst_adapter:source0_startofpacket -> MemoryDMA_csr_agent:cp_startofpacket
	wire          memorydma_csr_burst_adapter_source0_endofpacket;                                         // MemoryDMA_csr_burst_adapter:source0_endofpacket -> MemoryDMA_csr_agent:cp_endofpacket
	wire          cmd_mux_008_src_valid;                                                                   // cmd_mux_008:src_valid -> pio_reg1_s1_burst_adapter:sink0_valid
	wire  [130:0] cmd_mux_008_src_data;                                                                    // cmd_mux_008:src_data -> pio_reg1_s1_burst_adapter:sink0_data
	wire          cmd_mux_008_src_ready;                                                                   // pio_reg1_s1_burst_adapter:sink0_ready -> cmd_mux_008:src_ready
	wire   [11:0] cmd_mux_008_src_channel;                                                                 // cmd_mux_008:src_channel -> pio_reg1_s1_burst_adapter:sink0_channel
	wire          cmd_mux_008_src_startofpacket;                                                           // cmd_mux_008:src_startofpacket -> pio_reg1_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                             // cmd_mux_008:src_endofpacket -> pio_reg1_s1_burst_adapter:sink0_endofpacket
	wire          pio_reg1_s1_burst_adapter_source0_valid;                                                 // pio_reg1_s1_burst_adapter:source0_valid -> pio_reg1_s1_agent:cp_valid
	wire  [130:0] pio_reg1_s1_burst_adapter_source0_data;                                                  // pio_reg1_s1_burst_adapter:source0_data -> pio_reg1_s1_agent:cp_data
	wire          pio_reg1_s1_burst_adapter_source0_ready;                                                 // pio_reg1_s1_agent:cp_ready -> pio_reg1_s1_burst_adapter:source0_ready
	wire   [11:0] pio_reg1_s1_burst_adapter_source0_channel;                                               // pio_reg1_s1_burst_adapter:source0_channel -> pio_reg1_s1_agent:cp_channel
	wire          pio_reg1_s1_burst_adapter_source0_startofpacket;                                         // pio_reg1_s1_burst_adapter:source0_startofpacket -> pio_reg1_s1_agent:cp_startofpacket
	wire          pio_reg1_s1_burst_adapter_source0_endofpacket;                                           // pio_reg1_s1_burst_adapter:source0_endofpacket -> pio_reg1_s1_agent:cp_endofpacket
	wire          cmd_mux_009_src_valid;                                                                   // cmd_mux_009:src_valid -> pio_reg2_s1_burst_adapter:sink0_valid
	wire  [130:0] cmd_mux_009_src_data;                                                                    // cmd_mux_009:src_data -> pio_reg2_s1_burst_adapter:sink0_data
	wire          cmd_mux_009_src_ready;                                                                   // pio_reg2_s1_burst_adapter:sink0_ready -> cmd_mux_009:src_ready
	wire   [11:0] cmd_mux_009_src_channel;                                                                 // cmd_mux_009:src_channel -> pio_reg2_s1_burst_adapter:sink0_channel
	wire          cmd_mux_009_src_startofpacket;                                                           // cmd_mux_009:src_startofpacket -> pio_reg2_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                             // cmd_mux_009:src_endofpacket -> pio_reg2_s1_burst_adapter:sink0_endofpacket
	wire          pio_reg2_s1_burst_adapter_source0_valid;                                                 // pio_reg2_s1_burst_adapter:source0_valid -> pio_reg2_s1_agent:cp_valid
	wire  [130:0] pio_reg2_s1_burst_adapter_source0_data;                                                  // pio_reg2_s1_burst_adapter:source0_data -> pio_reg2_s1_agent:cp_data
	wire          pio_reg2_s1_burst_adapter_source0_ready;                                                 // pio_reg2_s1_agent:cp_ready -> pio_reg2_s1_burst_adapter:source0_ready
	wire   [11:0] pio_reg2_s1_burst_adapter_source0_channel;                                               // pio_reg2_s1_burst_adapter:source0_channel -> pio_reg2_s1_agent:cp_channel
	wire          pio_reg2_s1_burst_adapter_source0_startofpacket;                                         // pio_reg2_s1_burst_adapter:source0_startofpacket -> pio_reg2_s1_agent:cp_startofpacket
	wire          pio_reg2_s1_burst_adapter_source0_endofpacket;                                           // pio_reg2_s1_burst_adapter:source0_endofpacket -> pio_reg2_s1_agent:cp_endofpacket
	wire          cmd_mux_010_src_valid;                                                                   // cmd_mux_010:src_valid -> pio_reg3_s1_burst_adapter:sink0_valid
	wire  [130:0] cmd_mux_010_src_data;                                                                    // cmd_mux_010:src_data -> pio_reg3_s1_burst_adapter:sink0_data
	wire          cmd_mux_010_src_ready;                                                                   // pio_reg3_s1_burst_adapter:sink0_ready -> cmd_mux_010:src_ready
	wire   [11:0] cmd_mux_010_src_channel;                                                                 // cmd_mux_010:src_channel -> pio_reg3_s1_burst_adapter:sink0_channel
	wire          cmd_mux_010_src_startofpacket;                                                           // cmd_mux_010:src_startofpacket -> pio_reg3_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                             // cmd_mux_010:src_endofpacket -> pio_reg3_s1_burst_adapter:sink0_endofpacket
	wire          pio_reg3_s1_burst_adapter_source0_valid;                                                 // pio_reg3_s1_burst_adapter:source0_valid -> pio_reg3_s1_agent:cp_valid
	wire  [130:0] pio_reg3_s1_burst_adapter_source0_data;                                                  // pio_reg3_s1_burst_adapter:source0_data -> pio_reg3_s1_agent:cp_data
	wire          pio_reg3_s1_burst_adapter_source0_ready;                                                 // pio_reg3_s1_agent:cp_ready -> pio_reg3_s1_burst_adapter:source0_ready
	wire   [11:0] pio_reg3_s1_burst_adapter_source0_channel;                                               // pio_reg3_s1_burst_adapter:source0_channel -> pio_reg3_s1_agent:cp_channel
	wire          pio_reg3_s1_burst_adapter_source0_startofpacket;                                         // pio_reg3_s1_burst_adapter:source0_startofpacket -> pio_reg3_s1_agent:cp_startofpacket
	wire          pio_reg3_s1_burst_adapter_source0_endofpacket;                                           // pio_reg3_s1_burst_adapter:source0_endofpacket -> pio_reg3_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                                    // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [166:0] cmd_demux_src0_data;                                                                     // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                                    // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [11:0] cmd_demux_src0_channel;                                                                  // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                            // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                              // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                                    // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [166:0] cmd_demux_src2_data;                                                                     // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                                    // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [11:0] cmd_demux_src2_channel;                                                                  // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                            // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                              // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                                // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [166:0] cmd_demux_001_src0_data;                                                                 // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                                // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire   [11:0] cmd_demux_001_src0_channel;                                                              // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                        // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                          // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                                // cmd_demux_001:src2_valid -> cmd_mux_002:sink1_valid
	wire  [166:0] cmd_demux_001_src2_data;                                                                 // cmd_demux_001:src2_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src2_ready;                                                                // cmd_mux_002:sink1_ready -> cmd_demux_001:src2_ready
	wire   [11:0] cmd_demux_001_src2_channel;                                                              // cmd_demux_001:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                                        // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                          // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_002_src1_valid;                                                                // cmd_demux_002:src1_valid -> cmd_mux_004:sink0_valid
	wire  [130:0] cmd_demux_002_src1_data;                                                                 // cmd_demux_002:src1_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_002_src1_ready;                                                                // cmd_mux_004:sink0_ready -> cmd_demux_002:src1_ready
	wire   [11:0] cmd_demux_002_src1_channel;                                                              // cmd_demux_002:src1_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_002_src1_startofpacket;                                                        // cmd_demux_002:src1_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                                          // cmd_demux_002:src1_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_002_src2_valid;                                                                // cmd_demux_002:src2_valid -> cmd_mux_006:sink0_valid
	wire  [130:0] cmd_demux_002_src2_data;                                                                 // cmd_demux_002:src2_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_002_src2_ready;                                                                // cmd_mux_006:sink0_ready -> cmd_demux_002:src2_ready
	wire   [11:0] cmd_demux_002_src2_channel;                                                              // cmd_demux_002:src2_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_002_src2_startofpacket;                                                        // cmd_demux_002:src2_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_002_src2_endofpacket;                                                          // cmd_demux_002:src2_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_002_src3_valid;                                                                // cmd_demux_002:src3_valid -> cmd_mux_011:sink0_valid
	wire  [130:0] cmd_demux_002_src3_data;                                                                 // cmd_demux_002:src3_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_002_src3_ready;                                                                // cmd_mux_011:sink0_ready -> cmd_demux_002:src3_ready
	wire   [11:0] cmd_demux_002_src3_channel;                                                              // cmd_demux_002:src3_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_002_src3_startofpacket;                                                        // cmd_demux_002:src3_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_002_src3_endofpacket;                                                          // cmd_demux_002:src3_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_003_src0_valid;                                                                // cmd_demux_003:src0_valid -> cmd_mux:sink3_valid
	wire  [166:0] cmd_demux_003_src0_data;                                                                 // cmd_demux_003:src0_data -> cmd_mux:sink3_data
	wire          cmd_demux_003_src0_ready;                                                                // cmd_mux:sink3_ready -> cmd_demux_003:src0_ready
	wire   [11:0] cmd_demux_003_src0_channel;                                                              // cmd_demux_003:src0_channel -> cmd_mux:sink3_channel
	wire          cmd_demux_003_src0_startofpacket;                                                        // cmd_demux_003:src0_startofpacket -> cmd_mux:sink3_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                          // cmd_demux_003:src0_endofpacket -> cmd_mux:sink3_endofpacket
	wire          cmd_demux_003_src1_valid;                                                                // cmd_demux_003:src1_valid -> cmd_mux_002:sink2_valid
	wire  [166:0] cmd_demux_003_src1_data;                                                                 // cmd_demux_003:src1_data -> cmd_mux_002:sink2_data
	wire          cmd_demux_003_src1_ready;                                                                // cmd_mux_002:sink2_ready -> cmd_demux_003:src1_ready
	wire   [11:0] cmd_demux_003_src1_channel;                                                              // cmd_demux_003:src1_channel -> cmd_mux_002:sink2_channel
	wire          cmd_demux_003_src1_startofpacket;                                                        // cmd_demux_003:src1_startofpacket -> cmd_mux_002:sink2_startofpacket
	wire          cmd_demux_003_src1_endofpacket;                                                          // cmd_demux_003:src1_endofpacket -> cmd_mux_002:sink2_endofpacket
	wire          cmd_demux_004_src0_valid;                                                                // cmd_demux_004:src0_valid -> cmd_mux:sink4_valid
	wire  [166:0] cmd_demux_004_src0_data;                                                                 // cmd_demux_004:src0_data -> cmd_mux:sink4_data
	wire          cmd_demux_004_src0_ready;                                                                // cmd_mux:sink4_ready -> cmd_demux_004:src0_ready
	wire   [11:0] cmd_demux_004_src0_channel;                                                              // cmd_demux_004:src0_channel -> cmd_mux:sink4_channel
	wire          cmd_demux_004_src0_startofpacket;                                                        // cmd_demux_004:src0_startofpacket -> cmd_mux:sink4_startofpacket
	wire          cmd_demux_004_src0_endofpacket;                                                          // cmd_demux_004:src0_endofpacket -> cmd_mux:sink4_endofpacket
	wire          cmd_demux_004_src1_valid;                                                                // cmd_demux_004:src1_valid -> cmd_mux_002:sink3_valid
	wire  [166:0] cmd_demux_004_src1_data;                                                                 // cmd_demux_004:src1_data -> cmd_mux_002:sink3_data
	wire          cmd_demux_004_src1_ready;                                                                // cmd_mux_002:sink3_ready -> cmd_demux_004:src1_ready
	wire   [11:0] cmd_demux_004_src1_channel;                                                              // cmd_demux_004:src1_channel -> cmd_mux_002:sink3_channel
	wire          cmd_demux_004_src1_startofpacket;                                                        // cmd_demux_004:src1_startofpacket -> cmd_mux_002:sink3_startofpacket
	wire          cmd_demux_004_src1_endofpacket;                                                          // cmd_demux_004:src1_endofpacket -> cmd_mux_002:sink3_endofpacket
	wire          cmd_demux_005_src0_valid;                                                                // cmd_demux_005:src0_valid -> cmd_mux_003:sink2_valid
	wire  [130:0] cmd_demux_005_src0_data;                                                                 // cmd_demux_005:src0_data -> cmd_mux_003:sink2_data
	wire          cmd_demux_005_src0_ready;                                                                // cmd_mux_003:sink2_ready -> cmd_demux_005:src0_ready
	wire   [11:0] cmd_demux_005_src0_channel;                                                              // cmd_demux_005:src0_channel -> cmd_mux_003:sink2_channel
	wire          cmd_demux_005_src0_startofpacket;                                                        // cmd_demux_005:src0_startofpacket -> cmd_mux_003:sink2_startofpacket
	wire          cmd_demux_005_src0_endofpacket;                                                          // cmd_demux_005:src0_endofpacket -> cmd_mux_003:sink2_endofpacket
	wire          cmd_demux_005_src1_valid;                                                                // cmd_demux_005:src1_valid -> cmd_mux_004:sink1_valid
	wire  [130:0] cmd_demux_005_src1_data;                                                                 // cmd_demux_005:src1_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_005_src1_ready;                                                                // cmd_mux_004:sink1_ready -> cmd_demux_005:src1_ready
	wire   [11:0] cmd_demux_005_src1_channel;                                                              // cmd_demux_005:src1_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_005_src1_startofpacket;                                                        // cmd_demux_005:src1_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_005_src1_endofpacket;                                                          // cmd_demux_005:src1_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_005_src2_valid;                                                                // cmd_demux_005:src2_valid -> cmd_mux_005:sink0_valid
	wire  [130:0] cmd_demux_005_src2_data;                                                                 // cmd_demux_005:src2_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_005_src2_ready;                                                                // cmd_mux_005:sink0_ready -> cmd_demux_005:src2_ready
	wire   [11:0] cmd_demux_005_src2_channel;                                                              // cmd_demux_005:src2_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_005_src2_startofpacket;                                                        // cmd_demux_005:src2_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_005_src2_endofpacket;                                                          // cmd_demux_005:src2_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_005_src3_valid;                                                                // cmd_demux_005:src3_valid -> cmd_mux_006:sink1_valid
	wire  [130:0] cmd_demux_005_src3_data;                                                                 // cmd_demux_005:src3_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_005_src3_ready;                                                                // cmd_mux_006:sink1_ready -> cmd_demux_005:src3_ready
	wire   [11:0] cmd_demux_005_src3_channel;                                                              // cmd_demux_005:src3_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_005_src3_startofpacket;                                                        // cmd_demux_005:src3_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_005_src3_endofpacket;                                                          // cmd_demux_005:src3_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_005_src4_valid;                                                                // cmd_demux_005:src4_valid -> cmd_mux_007:sink0_valid
	wire  [130:0] cmd_demux_005_src4_data;                                                                 // cmd_demux_005:src4_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_005_src4_ready;                                                                // cmd_mux_007:sink0_ready -> cmd_demux_005:src4_ready
	wire   [11:0] cmd_demux_005_src4_channel;                                                              // cmd_demux_005:src4_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_005_src4_startofpacket;                                                        // cmd_demux_005:src4_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_005_src4_endofpacket;                                                          // cmd_demux_005:src4_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_005_src5_valid;                                                                // cmd_demux_005:src5_valid -> cmd_mux_008:sink0_valid
	wire  [130:0] cmd_demux_005_src5_data;                                                                 // cmd_demux_005:src5_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_005_src5_ready;                                                                // cmd_mux_008:sink0_ready -> cmd_demux_005:src5_ready
	wire   [11:0] cmd_demux_005_src5_channel;                                                              // cmd_demux_005:src5_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_005_src5_startofpacket;                                                        // cmd_demux_005:src5_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_005_src5_endofpacket;                                                          // cmd_demux_005:src5_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_005_src6_valid;                                                                // cmd_demux_005:src6_valid -> cmd_mux_009:sink0_valid
	wire  [130:0] cmd_demux_005_src6_data;                                                                 // cmd_demux_005:src6_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_005_src6_ready;                                                                // cmd_mux_009:sink0_ready -> cmd_demux_005:src6_ready
	wire   [11:0] cmd_demux_005_src6_channel;                                                              // cmd_demux_005:src6_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_005_src6_startofpacket;                                                        // cmd_demux_005:src6_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_005_src6_endofpacket;                                                          // cmd_demux_005:src6_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_005_src7_valid;                                                                // cmd_demux_005:src7_valid -> cmd_mux_010:sink0_valid
	wire  [130:0] cmd_demux_005_src7_data;                                                                 // cmd_demux_005:src7_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_005_src7_ready;                                                                // cmd_mux_010:sink0_ready -> cmd_demux_005:src7_ready
	wire   [11:0] cmd_demux_005_src7_channel;                                                              // cmd_demux_005:src7_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_005_src7_startofpacket;                                                        // cmd_demux_005:src7_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_005_src7_endofpacket;                                                          // cmd_demux_005:src7_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_006_src0_valid;                                                                // cmd_demux_006:src0_valid -> cmd_mux_003:sink3_valid
	wire  [130:0] cmd_demux_006_src0_data;                                                                 // cmd_demux_006:src0_data -> cmd_mux_003:sink3_data
	wire          cmd_demux_006_src0_ready;                                                                // cmd_mux_003:sink3_ready -> cmd_demux_006:src0_ready
	wire   [11:0] cmd_demux_006_src0_channel;                                                              // cmd_demux_006:src0_channel -> cmd_mux_003:sink3_channel
	wire          cmd_demux_006_src0_startofpacket;                                                        // cmd_demux_006:src0_startofpacket -> cmd_mux_003:sink3_startofpacket
	wire          cmd_demux_006_src0_endofpacket;                                                          // cmd_demux_006:src0_endofpacket -> cmd_mux_003:sink3_endofpacket
	wire          cmd_demux_006_src1_valid;                                                                // cmd_demux_006:src1_valid -> cmd_mux_004:sink2_valid
	wire  [130:0] cmd_demux_006_src1_data;                                                                 // cmd_demux_006:src1_data -> cmd_mux_004:sink2_data
	wire          cmd_demux_006_src1_ready;                                                                // cmd_mux_004:sink2_ready -> cmd_demux_006:src1_ready
	wire   [11:0] cmd_demux_006_src1_channel;                                                              // cmd_demux_006:src1_channel -> cmd_mux_004:sink2_channel
	wire          cmd_demux_006_src1_startofpacket;                                                        // cmd_demux_006:src1_startofpacket -> cmd_mux_004:sink2_startofpacket
	wire          cmd_demux_006_src1_endofpacket;                                                          // cmd_demux_006:src1_endofpacket -> cmd_mux_004:sink2_endofpacket
	wire          cmd_demux_006_src2_valid;                                                                // cmd_demux_006:src2_valid -> cmd_mux_005:sink1_valid
	wire  [130:0] cmd_demux_006_src2_data;                                                                 // cmd_demux_006:src2_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_006_src2_ready;                                                                // cmd_mux_005:sink1_ready -> cmd_demux_006:src2_ready
	wire   [11:0] cmd_demux_006_src2_channel;                                                              // cmd_demux_006:src2_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_006_src2_startofpacket;                                                        // cmd_demux_006:src2_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_006_src2_endofpacket;                                                          // cmd_demux_006:src2_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_006_src3_valid;                                                                // cmd_demux_006:src3_valid -> cmd_mux_006:sink2_valid
	wire  [130:0] cmd_demux_006_src3_data;                                                                 // cmd_demux_006:src3_data -> cmd_mux_006:sink2_data
	wire          cmd_demux_006_src3_ready;                                                                // cmd_mux_006:sink2_ready -> cmd_demux_006:src3_ready
	wire   [11:0] cmd_demux_006_src3_channel;                                                              // cmd_demux_006:src3_channel -> cmd_mux_006:sink2_channel
	wire          cmd_demux_006_src3_startofpacket;                                                        // cmd_demux_006:src3_startofpacket -> cmd_mux_006:sink2_startofpacket
	wire          cmd_demux_006_src3_endofpacket;                                                          // cmd_demux_006:src3_endofpacket -> cmd_mux_006:sink2_endofpacket
	wire          cmd_demux_006_src4_valid;                                                                // cmd_demux_006:src4_valid -> cmd_mux_007:sink1_valid
	wire  [130:0] cmd_demux_006_src4_data;                                                                 // cmd_demux_006:src4_data -> cmd_mux_007:sink1_data
	wire          cmd_demux_006_src4_ready;                                                                // cmd_mux_007:sink1_ready -> cmd_demux_006:src4_ready
	wire   [11:0] cmd_demux_006_src4_channel;                                                              // cmd_demux_006:src4_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_006_src4_startofpacket;                                                        // cmd_demux_006:src4_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          cmd_demux_006_src4_endofpacket;                                                          // cmd_demux_006:src4_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          cmd_demux_006_src5_valid;                                                                // cmd_demux_006:src5_valid -> cmd_mux_008:sink1_valid
	wire  [130:0] cmd_demux_006_src5_data;                                                                 // cmd_demux_006:src5_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_006_src5_ready;                                                                // cmd_mux_008:sink1_ready -> cmd_demux_006:src5_ready
	wire   [11:0] cmd_demux_006_src5_channel;                                                              // cmd_demux_006:src5_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_006_src5_startofpacket;                                                        // cmd_demux_006:src5_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_006_src5_endofpacket;                                                          // cmd_demux_006:src5_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_006_src6_valid;                                                                // cmd_demux_006:src6_valid -> cmd_mux_009:sink1_valid
	wire  [130:0] cmd_demux_006_src6_data;                                                                 // cmd_demux_006:src6_data -> cmd_mux_009:sink1_data
	wire          cmd_demux_006_src6_ready;                                                                // cmd_mux_009:sink1_ready -> cmd_demux_006:src6_ready
	wire   [11:0] cmd_demux_006_src6_channel;                                                              // cmd_demux_006:src6_channel -> cmd_mux_009:sink1_channel
	wire          cmd_demux_006_src6_startofpacket;                                                        // cmd_demux_006:src6_startofpacket -> cmd_mux_009:sink1_startofpacket
	wire          cmd_demux_006_src6_endofpacket;                                                          // cmd_demux_006:src6_endofpacket -> cmd_mux_009:sink1_endofpacket
	wire          cmd_demux_006_src7_valid;                                                                // cmd_demux_006:src7_valid -> cmd_mux_010:sink1_valid
	wire  [130:0] cmd_demux_006_src7_data;                                                                 // cmd_demux_006:src7_data -> cmd_mux_010:sink1_data
	wire          cmd_demux_006_src7_ready;                                                                // cmd_mux_010:sink1_ready -> cmd_demux_006:src7_ready
	wire   [11:0] cmd_demux_006_src7_channel;                                                              // cmd_demux_006:src7_channel -> cmd_mux_010:sink1_channel
	wire          cmd_demux_006_src7_startofpacket;                                                        // cmd_demux_006:src7_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire          cmd_demux_006_src7_endofpacket;                                                          // cmd_demux_006:src7_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire          cmd_demux_007_src1_valid;                                                                // cmd_demux_007:src1_valid -> cmd_mux_003:sink4_valid
	wire  [130:0] cmd_demux_007_src1_data;                                                                 // cmd_demux_007:src1_data -> cmd_mux_003:sink4_data
	wire          cmd_demux_007_src1_ready;                                                                // cmd_mux_003:sink4_ready -> cmd_demux_007:src1_ready
	wire   [11:0] cmd_demux_007_src1_channel;                                                              // cmd_demux_007:src1_channel -> cmd_mux_003:sink4_channel
	wire          cmd_demux_007_src1_startofpacket;                                                        // cmd_demux_007:src1_startofpacket -> cmd_mux_003:sink4_startofpacket
	wire          cmd_demux_007_src1_endofpacket;                                                          // cmd_demux_007:src1_endofpacket -> cmd_mux_003:sink4_endofpacket
	wire          rsp_demux_src0_valid;                                                                    // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [166:0] rsp_demux_src0_data;                                                                     // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                                    // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [11:0] rsp_demux_src0_channel;                                                                  // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                            // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                              // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                                    // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [166:0] rsp_demux_src1_data;                                                                     // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                                    // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire   [11:0] rsp_demux_src1_channel;                                                                  // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                                            // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                              // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_src3_valid;                                                                    // rsp_demux:src3_valid -> rsp_mux_003:sink0_valid
	wire  [166:0] rsp_demux_src3_data;                                                                     // rsp_demux:src3_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_src3_ready;                                                                    // rsp_mux_003:sink0_ready -> rsp_demux:src3_ready
	wire   [11:0] rsp_demux_src3_channel;                                                                  // rsp_demux:src3_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_src3_startofpacket;                                                            // rsp_demux:src3_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_src3_endofpacket;                                                              // rsp_demux:src3_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_src4_valid;                                                                    // rsp_demux:src4_valid -> rsp_mux_004:sink0_valid
	wire  [166:0] rsp_demux_src4_data;                                                                     // rsp_demux:src4_data -> rsp_mux_004:sink0_data
	wire          rsp_demux_src4_ready;                                                                    // rsp_mux_004:sink0_ready -> rsp_demux:src4_ready
	wire   [11:0] rsp_demux_src4_channel;                                                                  // rsp_demux:src4_channel -> rsp_mux_004:sink0_channel
	wire          rsp_demux_src4_startofpacket;                                                            // rsp_demux:src4_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire          rsp_demux_src4_endofpacket;                                                              // rsp_demux:src4_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire          rsp_demux_002_src0_valid;                                                                // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [166:0] rsp_demux_002_src0_data;                                                                 // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                                // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [11:0] rsp_demux_002_src0_channel;                                                              // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                        // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                          // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                                                // rsp_demux_002:src1_valid -> rsp_mux_001:sink2_valid
	wire  [166:0] rsp_demux_002_src1_data;                                                                 // rsp_demux_002:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src1_ready;                                                                // rsp_mux_001:sink2_ready -> rsp_demux_002:src1_ready
	wire   [11:0] rsp_demux_002_src1_channel;                                                              // rsp_demux_002:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src1_startofpacket;                                                        // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                                          // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_002_src2_valid;                                                                // rsp_demux_002:src2_valid -> rsp_mux_003:sink1_valid
	wire  [166:0] rsp_demux_002_src2_data;                                                                 // rsp_demux_002:src2_data -> rsp_mux_003:sink1_data
	wire          rsp_demux_002_src2_ready;                                                                // rsp_mux_003:sink1_ready -> rsp_demux_002:src2_ready
	wire   [11:0] rsp_demux_002_src2_channel;                                                              // rsp_demux_002:src2_channel -> rsp_mux_003:sink1_channel
	wire          rsp_demux_002_src2_startofpacket;                                                        // rsp_demux_002:src2_startofpacket -> rsp_mux_003:sink1_startofpacket
	wire          rsp_demux_002_src2_endofpacket;                                                          // rsp_demux_002:src2_endofpacket -> rsp_mux_003:sink1_endofpacket
	wire          rsp_demux_002_src3_valid;                                                                // rsp_demux_002:src3_valid -> rsp_mux_004:sink1_valid
	wire  [166:0] rsp_demux_002_src3_data;                                                                 // rsp_demux_002:src3_data -> rsp_mux_004:sink1_data
	wire          rsp_demux_002_src3_ready;                                                                // rsp_mux_004:sink1_ready -> rsp_demux_002:src3_ready
	wire   [11:0] rsp_demux_002_src3_channel;                                                              // rsp_demux_002:src3_channel -> rsp_mux_004:sink1_channel
	wire          rsp_demux_002_src3_startofpacket;                                                        // rsp_demux_002:src3_startofpacket -> rsp_mux_004:sink1_startofpacket
	wire          rsp_demux_002_src3_endofpacket;                                                          // rsp_demux_002:src3_endofpacket -> rsp_mux_004:sink1_endofpacket
	wire          rsp_demux_003_src2_valid;                                                                // rsp_demux_003:src2_valid -> rsp_mux_005:sink0_valid
	wire  [130:0] rsp_demux_003_src2_data;                                                                 // rsp_demux_003:src2_data -> rsp_mux_005:sink0_data
	wire          rsp_demux_003_src2_ready;                                                                // rsp_mux_005:sink0_ready -> rsp_demux_003:src2_ready
	wire   [11:0] rsp_demux_003_src2_channel;                                                              // rsp_demux_003:src2_channel -> rsp_mux_005:sink0_channel
	wire          rsp_demux_003_src2_startofpacket;                                                        // rsp_demux_003:src2_startofpacket -> rsp_mux_005:sink0_startofpacket
	wire          rsp_demux_003_src2_endofpacket;                                                          // rsp_demux_003:src2_endofpacket -> rsp_mux_005:sink0_endofpacket
	wire          rsp_demux_003_src3_valid;                                                                // rsp_demux_003:src3_valid -> rsp_mux_006:sink0_valid
	wire  [130:0] rsp_demux_003_src3_data;                                                                 // rsp_demux_003:src3_data -> rsp_mux_006:sink0_data
	wire          rsp_demux_003_src3_ready;                                                                // rsp_mux_006:sink0_ready -> rsp_demux_003:src3_ready
	wire   [11:0] rsp_demux_003_src3_channel;                                                              // rsp_demux_003:src3_channel -> rsp_mux_006:sink0_channel
	wire          rsp_demux_003_src3_startofpacket;                                                        // rsp_demux_003:src3_startofpacket -> rsp_mux_006:sink0_startofpacket
	wire          rsp_demux_003_src3_endofpacket;                                                          // rsp_demux_003:src3_endofpacket -> rsp_mux_006:sink0_endofpacket
	wire          rsp_demux_003_src4_valid;                                                                // rsp_demux_003:src4_valid -> rsp_mux_007:sink1_valid
	wire  [130:0] rsp_demux_003_src4_data;                                                                 // rsp_demux_003:src4_data -> rsp_mux_007:sink1_data
	wire          rsp_demux_003_src4_ready;                                                                // rsp_mux_007:sink1_ready -> rsp_demux_003:src4_ready
	wire   [11:0] rsp_demux_003_src4_channel;                                                              // rsp_demux_003:src4_channel -> rsp_mux_007:sink1_channel
	wire          rsp_demux_003_src4_startofpacket;                                                        // rsp_demux_003:src4_startofpacket -> rsp_mux_007:sink1_startofpacket
	wire          rsp_demux_003_src4_endofpacket;                                                          // rsp_demux_003:src4_endofpacket -> rsp_mux_007:sink1_endofpacket
	wire          rsp_demux_004_src0_valid;                                                                // rsp_demux_004:src0_valid -> rsp_mux_002:sink1_valid
	wire  [130:0] rsp_demux_004_src0_data;                                                                 // rsp_demux_004:src0_data -> rsp_mux_002:sink1_data
	wire          rsp_demux_004_src0_ready;                                                                // rsp_mux_002:sink1_ready -> rsp_demux_004:src0_ready
	wire   [11:0] rsp_demux_004_src0_channel;                                                              // rsp_demux_004:src0_channel -> rsp_mux_002:sink1_channel
	wire          rsp_demux_004_src0_startofpacket;                                                        // rsp_demux_004:src0_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                          // rsp_demux_004:src0_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_004_src1_valid;                                                                // rsp_demux_004:src1_valid -> rsp_mux_005:sink1_valid
	wire  [130:0] rsp_demux_004_src1_data;                                                                 // rsp_demux_004:src1_data -> rsp_mux_005:sink1_data
	wire          rsp_demux_004_src1_ready;                                                                // rsp_mux_005:sink1_ready -> rsp_demux_004:src1_ready
	wire   [11:0] rsp_demux_004_src1_channel;                                                              // rsp_demux_004:src1_channel -> rsp_mux_005:sink1_channel
	wire          rsp_demux_004_src1_startofpacket;                                                        // rsp_demux_004:src1_startofpacket -> rsp_mux_005:sink1_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                                          // rsp_demux_004:src1_endofpacket -> rsp_mux_005:sink1_endofpacket
	wire          rsp_demux_004_src2_valid;                                                                // rsp_demux_004:src2_valid -> rsp_mux_006:sink1_valid
	wire  [130:0] rsp_demux_004_src2_data;                                                                 // rsp_demux_004:src2_data -> rsp_mux_006:sink1_data
	wire          rsp_demux_004_src2_ready;                                                                // rsp_mux_006:sink1_ready -> rsp_demux_004:src2_ready
	wire   [11:0] rsp_demux_004_src2_channel;                                                              // rsp_demux_004:src2_channel -> rsp_mux_006:sink1_channel
	wire          rsp_demux_004_src2_startofpacket;                                                        // rsp_demux_004:src2_startofpacket -> rsp_mux_006:sink1_startofpacket
	wire          rsp_demux_004_src2_endofpacket;                                                          // rsp_demux_004:src2_endofpacket -> rsp_mux_006:sink1_endofpacket
	wire          rsp_demux_005_src0_valid;                                                                // rsp_demux_005:src0_valid -> rsp_mux_005:sink2_valid
	wire  [130:0] rsp_demux_005_src0_data;                                                                 // rsp_demux_005:src0_data -> rsp_mux_005:sink2_data
	wire          rsp_demux_005_src0_ready;                                                                // rsp_mux_005:sink2_ready -> rsp_demux_005:src0_ready
	wire   [11:0] rsp_demux_005_src0_channel;                                                              // rsp_demux_005:src0_channel -> rsp_mux_005:sink2_channel
	wire          rsp_demux_005_src0_startofpacket;                                                        // rsp_demux_005:src0_startofpacket -> rsp_mux_005:sink2_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                          // rsp_demux_005:src0_endofpacket -> rsp_mux_005:sink2_endofpacket
	wire          rsp_demux_005_src1_valid;                                                                // rsp_demux_005:src1_valid -> rsp_mux_006:sink2_valid
	wire  [130:0] rsp_demux_005_src1_data;                                                                 // rsp_demux_005:src1_data -> rsp_mux_006:sink2_data
	wire          rsp_demux_005_src1_ready;                                                                // rsp_mux_006:sink2_ready -> rsp_demux_005:src1_ready
	wire   [11:0] rsp_demux_005_src1_channel;                                                              // rsp_demux_005:src1_channel -> rsp_mux_006:sink2_channel
	wire          rsp_demux_005_src1_startofpacket;                                                        // rsp_demux_005:src1_startofpacket -> rsp_mux_006:sink2_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                                          // rsp_demux_005:src1_endofpacket -> rsp_mux_006:sink2_endofpacket
	wire          rsp_demux_006_src0_valid;                                                                // rsp_demux_006:src0_valid -> rsp_mux_002:sink2_valid
	wire  [130:0] rsp_demux_006_src0_data;                                                                 // rsp_demux_006:src0_data -> rsp_mux_002:sink2_data
	wire          rsp_demux_006_src0_ready;                                                                // rsp_mux_002:sink2_ready -> rsp_demux_006:src0_ready
	wire   [11:0] rsp_demux_006_src0_channel;                                                              // rsp_demux_006:src0_channel -> rsp_mux_002:sink2_channel
	wire          rsp_demux_006_src0_startofpacket;                                                        // rsp_demux_006:src0_startofpacket -> rsp_mux_002:sink2_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                          // rsp_demux_006:src0_endofpacket -> rsp_mux_002:sink2_endofpacket
	wire          rsp_demux_006_src1_valid;                                                                // rsp_demux_006:src1_valid -> rsp_mux_005:sink3_valid
	wire  [130:0] rsp_demux_006_src1_data;                                                                 // rsp_demux_006:src1_data -> rsp_mux_005:sink3_data
	wire          rsp_demux_006_src1_ready;                                                                // rsp_mux_005:sink3_ready -> rsp_demux_006:src1_ready
	wire   [11:0] rsp_demux_006_src1_channel;                                                              // rsp_demux_006:src1_channel -> rsp_mux_005:sink3_channel
	wire          rsp_demux_006_src1_startofpacket;                                                        // rsp_demux_006:src1_startofpacket -> rsp_mux_005:sink3_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                                          // rsp_demux_006:src1_endofpacket -> rsp_mux_005:sink3_endofpacket
	wire          rsp_demux_006_src2_valid;                                                                // rsp_demux_006:src2_valid -> rsp_mux_006:sink3_valid
	wire  [130:0] rsp_demux_006_src2_data;                                                                 // rsp_demux_006:src2_data -> rsp_mux_006:sink3_data
	wire          rsp_demux_006_src2_ready;                                                                // rsp_mux_006:sink3_ready -> rsp_demux_006:src2_ready
	wire   [11:0] rsp_demux_006_src2_channel;                                                              // rsp_demux_006:src2_channel -> rsp_mux_006:sink3_channel
	wire          rsp_demux_006_src2_startofpacket;                                                        // rsp_demux_006:src2_startofpacket -> rsp_mux_006:sink3_startofpacket
	wire          rsp_demux_006_src2_endofpacket;                                                          // rsp_demux_006:src2_endofpacket -> rsp_mux_006:sink3_endofpacket
	wire          rsp_demux_007_src0_valid;                                                                // rsp_demux_007:src0_valid -> rsp_mux_005:sink4_valid
	wire  [130:0] rsp_demux_007_src0_data;                                                                 // rsp_demux_007:src0_data -> rsp_mux_005:sink4_data
	wire          rsp_demux_007_src0_ready;                                                                // rsp_mux_005:sink4_ready -> rsp_demux_007:src0_ready
	wire   [11:0] rsp_demux_007_src0_channel;                                                              // rsp_demux_007:src0_channel -> rsp_mux_005:sink4_channel
	wire          rsp_demux_007_src0_startofpacket;                                                        // rsp_demux_007:src0_startofpacket -> rsp_mux_005:sink4_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                          // rsp_demux_007:src0_endofpacket -> rsp_mux_005:sink4_endofpacket
	wire          rsp_demux_007_src1_valid;                                                                // rsp_demux_007:src1_valid -> rsp_mux_006:sink4_valid
	wire  [130:0] rsp_demux_007_src1_data;                                                                 // rsp_demux_007:src1_data -> rsp_mux_006:sink4_data
	wire          rsp_demux_007_src1_ready;                                                                // rsp_mux_006:sink4_ready -> rsp_demux_007:src1_ready
	wire   [11:0] rsp_demux_007_src1_channel;                                                              // rsp_demux_007:src1_channel -> rsp_mux_006:sink4_channel
	wire          rsp_demux_007_src1_startofpacket;                                                        // rsp_demux_007:src1_startofpacket -> rsp_mux_006:sink4_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                                          // rsp_demux_007:src1_endofpacket -> rsp_mux_006:sink4_endofpacket
	wire          rsp_demux_008_src0_valid;                                                                // rsp_demux_008:src0_valid -> rsp_mux_005:sink5_valid
	wire  [130:0] rsp_demux_008_src0_data;                                                                 // rsp_demux_008:src0_data -> rsp_mux_005:sink5_data
	wire          rsp_demux_008_src0_ready;                                                                // rsp_mux_005:sink5_ready -> rsp_demux_008:src0_ready
	wire   [11:0] rsp_demux_008_src0_channel;                                                              // rsp_demux_008:src0_channel -> rsp_mux_005:sink5_channel
	wire          rsp_demux_008_src0_startofpacket;                                                        // rsp_demux_008:src0_startofpacket -> rsp_mux_005:sink5_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                          // rsp_demux_008:src0_endofpacket -> rsp_mux_005:sink5_endofpacket
	wire          rsp_demux_008_src1_valid;                                                                // rsp_demux_008:src1_valid -> rsp_mux_006:sink5_valid
	wire  [130:0] rsp_demux_008_src1_data;                                                                 // rsp_demux_008:src1_data -> rsp_mux_006:sink5_data
	wire          rsp_demux_008_src1_ready;                                                                // rsp_mux_006:sink5_ready -> rsp_demux_008:src1_ready
	wire   [11:0] rsp_demux_008_src1_channel;                                                              // rsp_demux_008:src1_channel -> rsp_mux_006:sink5_channel
	wire          rsp_demux_008_src1_startofpacket;                                                        // rsp_demux_008:src1_startofpacket -> rsp_mux_006:sink5_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                                          // rsp_demux_008:src1_endofpacket -> rsp_mux_006:sink5_endofpacket
	wire          rsp_demux_009_src0_valid;                                                                // rsp_demux_009:src0_valid -> rsp_mux_005:sink6_valid
	wire  [130:0] rsp_demux_009_src0_data;                                                                 // rsp_demux_009:src0_data -> rsp_mux_005:sink6_data
	wire          rsp_demux_009_src0_ready;                                                                // rsp_mux_005:sink6_ready -> rsp_demux_009:src0_ready
	wire   [11:0] rsp_demux_009_src0_channel;                                                              // rsp_demux_009:src0_channel -> rsp_mux_005:sink6_channel
	wire          rsp_demux_009_src0_startofpacket;                                                        // rsp_demux_009:src0_startofpacket -> rsp_mux_005:sink6_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                          // rsp_demux_009:src0_endofpacket -> rsp_mux_005:sink6_endofpacket
	wire          rsp_demux_009_src1_valid;                                                                // rsp_demux_009:src1_valid -> rsp_mux_006:sink6_valid
	wire  [130:0] rsp_demux_009_src1_data;                                                                 // rsp_demux_009:src1_data -> rsp_mux_006:sink6_data
	wire          rsp_demux_009_src1_ready;                                                                // rsp_mux_006:sink6_ready -> rsp_demux_009:src1_ready
	wire   [11:0] rsp_demux_009_src1_channel;                                                              // rsp_demux_009:src1_channel -> rsp_mux_006:sink6_channel
	wire          rsp_demux_009_src1_startofpacket;                                                        // rsp_demux_009:src1_startofpacket -> rsp_mux_006:sink6_startofpacket
	wire          rsp_demux_009_src1_endofpacket;                                                          // rsp_demux_009:src1_endofpacket -> rsp_mux_006:sink6_endofpacket
	wire          rsp_demux_010_src0_valid;                                                                // rsp_demux_010:src0_valid -> rsp_mux_005:sink7_valid
	wire  [130:0] rsp_demux_010_src0_data;                                                                 // rsp_demux_010:src0_data -> rsp_mux_005:sink7_data
	wire          rsp_demux_010_src0_ready;                                                                // rsp_mux_005:sink7_ready -> rsp_demux_010:src0_ready
	wire   [11:0] rsp_demux_010_src0_channel;                                                              // rsp_demux_010:src0_channel -> rsp_mux_005:sink7_channel
	wire          rsp_demux_010_src0_startofpacket;                                                        // rsp_demux_010:src0_startofpacket -> rsp_mux_005:sink7_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                          // rsp_demux_010:src0_endofpacket -> rsp_mux_005:sink7_endofpacket
	wire          rsp_demux_010_src1_valid;                                                                // rsp_demux_010:src1_valid -> rsp_mux_006:sink7_valid
	wire  [130:0] rsp_demux_010_src1_data;                                                                 // rsp_demux_010:src1_data -> rsp_mux_006:sink7_data
	wire          rsp_demux_010_src1_ready;                                                                // rsp_mux_006:sink7_ready -> rsp_demux_010:src1_ready
	wire   [11:0] rsp_demux_010_src1_channel;                                                              // rsp_demux_010:src1_channel -> rsp_mux_006:sink7_channel
	wire          rsp_demux_010_src1_startofpacket;                                                        // rsp_demux_010:src1_startofpacket -> rsp_mux_006:sink7_startofpacket
	wire          rsp_demux_010_src1_endofpacket;                                                          // rsp_demux_010:src1_endofpacket -> rsp_mux_006:sink7_endofpacket
	wire          rsp_demux_011_src0_valid;                                                                // rsp_demux_011:src0_valid -> rsp_mux_002:sink3_valid
	wire  [130:0] rsp_demux_011_src0_data;                                                                 // rsp_demux_011:src0_data -> rsp_mux_002:sink3_data
	wire          rsp_demux_011_src0_ready;                                                                // rsp_mux_002:sink3_ready -> rsp_demux_011:src0_ready
	wire   [11:0] rsp_demux_011_src0_channel;                                                              // rsp_demux_011:src0_channel -> rsp_mux_002:sink3_channel
	wire          rsp_demux_011_src0_startofpacket;                                                        // rsp_demux_011:src0_startofpacket -> rsp_mux_002:sink3_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                          // rsp_demux_011:src0_endofpacket -> rsp_mux_002:sink3_endofpacket
	wire          cmd_demux_src1_valid;                                                                    // cmd_demux:src1_valid -> hps_0_h2f_axi_master_wr_to_pio_led_s1_cmd_width_adapter:in_valid
	wire  [166:0] cmd_demux_src1_data;                                                                     // cmd_demux:src1_data -> hps_0_h2f_axi_master_wr_to_pio_led_s1_cmd_width_adapter:in_data
	wire          cmd_demux_src1_ready;                                                                    // hps_0_h2f_axi_master_wr_to_pio_led_s1_cmd_width_adapter:in_ready -> cmd_demux:src1_ready
	wire   [11:0] cmd_demux_src1_channel;                                                                  // cmd_demux:src1_channel -> hps_0_h2f_axi_master_wr_to_pio_led_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src1_startofpacket;                                                            // cmd_demux:src1_startofpacket -> hps_0_h2f_axi_master_wr_to_pio_led_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                              // cmd_demux:src1_endofpacket -> hps_0_h2f_axi_master_wr_to_pio_led_s1_cmd_width_adapter:in_endofpacket
	wire          hps_0_h2f_axi_master_wr_to_pio_led_s1_cmd_width_adapter_src_valid;                       // hps_0_h2f_axi_master_wr_to_pio_led_s1_cmd_width_adapter:out_valid -> cmd_mux_001:sink0_valid
	wire  [130:0] hps_0_h2f_axi_master_wr_to_pio_led_s1_cmd_width_adapter_src_data;                        // hps_0_h2f_axi_master_wr_to_pio_led_s1_cmd_width_adapter:out_data -> cmd_mux_001:sink0_data
	wire          hps_0_h2f_axi_master_wr_to_pio_led_s1_cmd_width_adapter_src_ready;                       // cmd_mux_001:sink0_ready -> hps_0_h2f_axi_master_wr_to_pio_led_s1_cmd_width_adapter:out_ready
	wire   [11:0] hps_0_h2f_axi_master_wr_to_pio_led_s1_cmd_width_adapter_src_channel;                     // hps_0_h2f_axi_master_wr_to_pio_led_s1_cmd_width_adapter:out_channel -> cmd_mux_001:sink0_channel
	wire          hps_0_h2f_axi_master_wr_to_pio_led_s1_cmd_width_adapter_src_startofpacket;               // hps_0_h2f_axi_master_wr_to_pio_led_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          hps_0_h2f_axi_master_wr_to_pio_led_s1_cmd_width_adapter_src_endofpacket;                 // hps_0_h2f_axi_master_wr_to_pio_led_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_001_src1_valid;                                                                // cmd_demux_001:src1_valid -> hps_0_h2f_axi_master_rd_to_pio_led_s1_cmd_width_adapter:in_valid
	wire  [166:0] cmd_demux_001_src1_data;                                                                 // cmd_demux_001:src1_data -> hps_0_h2f_axi_master_rd_to_pio_led_s1_cmd_width_adapter:in_data
	wire          cmd_demux_001_src1_ready;                                                                // hps_0_h2f_axi_master_rd_to_pio_led_s1_cmd_width_adapter:in_ready -> cmd_demux_001:src1_ready
	wire   [11:0] cmd_demux_001_src1_channel;                                                              // cmd_demux_001:src1_channel -> hps_0_h2f_axi_master_rd_to_pio_led_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src1_startofpacket;                                                        // cmd_demux_001:src1_startofpacket -> hps_0_h2f_axi_master_rd_to_pio_led_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                          // cmd_demux_001:src1_endofpacket -> hps_0_h2f_axi_master_rd_to_pio_led_s1_cmd_width_adapter:in_endofpacket
	wire          hps_0_h2f_axi_master_rd_to_pio_led_s1_cmd_width_adapter_src_valid;                       // hps_0_h2f_axi_master_rd_to_pio_led_s1_cmd_width_adapter:out_valid -> cmd_mux_001:sink1_valid
	wire  [130:0] hps_0_h2f_axi_master_rd_to_pio_led_s1_cmd_width_adapter_src_data;                        // hps_0_h2f_axi_master_rd_to_pio_led_s1_cmd_width_adapter:out_data -> cmd_mux_001:sink1_data
	wire          hps_0_h2f_axi_master_rd_to_pio_led_s1_cmd_width_adapter_src_ready;                       // cmd_mux_001:sink1_ready -> hps_0_h2f_axi_master_rd_to_pio_led_s1_cmd_width_adapter:out_ready
	wire   [11:0] hps_0_h2f_axi_master_rd_to_pio_led_s1_cmd_width_adapter_src_channel;                     // hps_0_h2f_axi_master_rd_to_pio_led_s1_cmd_width_adapter:out_channel -> cmd_mux_001:sink1_channel
	wire          hps_0_h2f_axi_master_rd_to_pio_led_s1_cmd_width_adapter_src_startofpacket;               // hps_0_h2f_axi_master_rd_to_pio_led_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          hps_0_h2f_axi_master_rd_to_pio_led_s1_cmd_width_adapter_src_endofpacket;                 // hps_0_h2f_axi_master_rd_to_pio_led_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                                // cmd_demux_002:src0_valid -> fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter:in_valid
	wire  [130:0] cmd_demux_002_src0_data;                                                                 // cmd_demux_002:src0_data -> fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter:in_data
	wire          cmd_demux_002_src0_ready;                                                                // fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter:in_ready -> cmd_demux_002:src0_ready
	wire   [11:0] cmd_demux_002_src0_channel;                                                              // cmd_demux_002:src0_channel -> fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src0_startofpacket;                                                        // cmd_demux_002:src0_startofpacket -> fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                          // cmd_demux_002:src0_endofpacket -> fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter:in_endofpacket
	wire          fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_valid;              // fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter:out_valid -> cmd_mux:sink2_valid
	wire  [166:0] fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_data;               // fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter:out_data -> cmd_mux:sink2_data
	wire          fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_ready;              // cmd_mux:sink2_ready -> fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter:out_ready
	wire   [11:0] fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_channel;            // fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter:out_channel -> cmd_mux:sink2_channel
	wire          fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket;      // fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter:out_startofpacket -> cmd_mux:sink2_startofpacket
	wire          fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket;        // fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter:out_endofpacket -> cmd_mux:sink2_endofpacket
	wire          cmd_demux_003_src2_valid;                                                                // cmd_demux_003:src2_valid -> dma_0_read_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter:in_valid
	wire  [166:0] cmd_demux_003_src2_data;                                                                 // cmd_demux_003:src2_data -> dma_0_read_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter:in_data
	wire          cmd_demux_003_src2_ready;                                                                // dma_0_read_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter:in_ready -> cmd_demux_003:src2_ready
	wire   [11:0] cmd_demux_003_src2_channel;                                                              // cmd_demux_003:src2_channel -> dma_0_read_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter:in_channel
	wire          cmd_demux_003_src2_startofpacket;                                                        // cmd_demux_003:src2_startofpacket -> dma_0_read_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_003_src2_endofpacket;                                                          // cmd_demux_003:src2_endofpacket -> dma_0_read_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter:in_endofpacket
	wire          dma_0_read_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_valid;          // dma_0_read_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter:out_valid -> cmd_mux_003:sink0_valid
	wire  [130:0] dma_0_read_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_data;           // dma_0_read_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter:out_data -> cmd_mux_003:sink0_data
	wire          dma_0_read_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_ready;          // cmd_mux_003:sink0_ready -> dma_0_read_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter:out_ready
	wire   [11:0] dma_0_read_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_channel;        // dma_0_read_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter:out_channel -> cmd_mux_003:sink0_channel
	wire          dma_0_read_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_startofpacket;  // dma_0_read_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          dma_0_read_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_endofpacket;    // dma_0_read_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_004_src2_valid;                                                                // cmd_demux_004:src2_valid -> dma_0_write_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter:in_valid
	wire  [166:0] cmd_demux_004_src2_data;                                                                 // cmd_demux_004:src2_data -> dma_0_write_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter:in_data
	wire          cmd_demux_004_src2_ready;                                                                // dma_0_write_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter:in_ready -> cmd_demux_004:src2_ready
	wire   [11:0] cmd_demux_004_src2_channel;                                                              // cmd_demux_004:src2_channel -> dma_0_write_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter:in_channel
	wire          cmd_demux_004_src2_startofpacket;                                                        // cmd_demux_004:src2_startofpacket -> dma_0_write_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_004_src2_endofpacket;                                                          // cmd_demux_004:src2_endofpacket -> dma_0_write_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter:in_endofpacket
	wire          dma_0_write_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_valid;         // dma_0_write_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter:out_valid -> cmd_mux_003:sink1_valid
	wire  [130:0] dma_0_write_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_data;          // dma_0_write_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter:out_data -> cmd_mux_003:sink1_data
	wire          dma_0_write_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_ready;         // cmd_mux_003:sink1_ready -> dma_0_write_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter:out_ready
	wire   [11:0] dma_0_write_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_channel;       // dma_0_write_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter:out_channel -> cmd_mux_003:sink1_channel
	wire          dma_0_write_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_startofpacket; // dma_0_write_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter:out_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          dma_0_write_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_endofpacket;   // dma_0_write_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter:out_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_007_src0_valid;                                                                // cmd_demux_007:src0_valid -> MemoryDMA_m_write_to_onchip_memory2_1_s1_cmd_width_adapter:in_valid
	wire  [130:0] cmd_demux_007_src0_data;                                                                 // cmd_demux_007:src0_data -> MemoryDMA_m_write_to_onchip_memory2_1_s1_cmd_width_adapter:in_data
	wire          cmd_demux_007_src0_ready;                                                                // MemoryDMA_m_write_to_onchip_memory2_1_s1_cmd_width_adapter:in_ready -> cmd_demux_007:src0_ready
	wire   [11:0] cmd_demux_007_src0_channel;                                                              // cmd_demux_007:src0_channel -> MemoryDMA_m_write_to_onchip_memory2_1_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_007_src0_startofpacket;                                                        // cmd_demux_007:src0_startofpacket -> MemoryDMA_m_write_to_onchip_memory2_1_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_007_src0_endofpacket;                                                          // cmd_demux_007:src0_endofpacket -> MemoryDMA_m_write_to_onchip_memory2_1_s1_cmd_width_adapter:in_endofpacket
	wire          memorydma_m_write_to_onchip_memory2_1_s1_cmd_width_adapter_src_valid;                    // MemoryDMA_m_write_to_onchip_memory2_1_s1_cmd_width_adapter:out_valid -> cmd_mux_002:sink4_valid
	wire  [166:0] memorydma_m_write_to_onchip_memory2_1_s1_cmd_width_adapter_src_data;                     // MemoryDMA_m_write_to_onchip_memory2_1_s1_cmd_width_adapter:out_data -> cmd_mux_002:sink4_data
	wire          memorydma_m_write_to_onchip_memory2_1_s1_cmd_width_adapter_src_ready;                    // cmd_mux_002:sink4_ready -> MemoryDMA_m_write_to_onchip_memory2_1_s1_cmd_width_adapter:out_ready
	wire   [11:0] memorydma_m_write_to_onchip_memory2_1_s1_cmd_width_adapter_src_channel;                  // MemoryDMA_m_write_to_onchip_memory2_1_s1_cmd_width_adapter:out_channel -> cmd_mux_002:sink4_channel
	wire          memorydma_m_write_to_onchip_memory2_1_s1_cmd_width_adapter_src_startofpacket;            // MemoryDMA_m_write_to_onchip_memory2_1_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_002:sink4_startofpacket
	wire          memorydma_m_write_to_onchip_memory2_1_s1_cmd_width_adapter_src_endofpacket;              // MemoryDMA_m_write_to_onchip_memory2_1_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_002:sink4_endofpacket
	wire          rsp_demux_src2_valid;                                                                    // rsp_demux:src2_valid -> onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter:in_valid
	wire  [166:0] rsp_demux_src2_data;                                                                     // rsp_demux:src2_data -> onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter:in_data
	wire          rsp_demux_src2_ready;                                                                    // onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter:in_ready -> rsp_demux:src2_ready
	wire   [11:0] rsp_demux_src2_channel;                                                                  // rsp_demux:src2_channel -> onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter:in_channel
	wire          rsp_demux_src2_startofpacket;                                                            // rsp_demux:src2_startofpacket -> onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src2_endofpacket;                                                              // rsp_demux:src2_endofpacket -> onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter:in_endofpacket
	wire          onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_valid;              // onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter:out_valid -> rsp_mux_002:sink0_valid
	wire  [130:0] onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_data;               // onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter:out_data -> rsp_mux_002:sink0_data
	wire          onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_ready;              // rsp_mux_002:sink0_ready -> onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter:out_ready
	wire   [11:0] onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_channel;            // onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter:out_channel -> rsp_mux_002:sink0_channel
	wire          onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_startofpacket;      // onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter:out_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_endofpacket;        // onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter:out_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                // rsp_demux_001:src0_valid -> pio_led_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_valid
	wire  [130:0] rsp_demux_001_src0_data;                                                                 // rsp_demux_001:src0_data -> pio_led_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_data
	wire          rsp_demux_001_src0_ready;                                                                // pio_led_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_ready -> rsp_demux_001:src0_ready
	wire   [11:0] rsp_demux_001_src0_channel;                                                              // rsp_demux_001:src0_channel -> pio_led_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                                        // rsp_demux_001:src0_startofpacket -> pio_led_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                          // rsp_demux_001:src0_endofpacket -> pio_led_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_endofpacket
	wire          pio_led_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid;                       // pio_led_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_valid -> rsp_mux:sink1_valid
	wire  [166:0] pio_led_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data;                        // pio_led_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_data -> rsp_mux:sink1_data
	wire          pio_led_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready;                       // rsp_mux:sink1_ready -> pio_led_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_ready
	wire   [11:0] pio_led_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel;                     // pio_led_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_channel -> rsp_mux:sink1_channel
	wire          pio_led_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket;               // pio_led_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          pio_led_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket;                 // pio_led_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                                                // rsp_demux_001:src1_valid -> pio_led_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_valid
	wire  [130:0] rsp_demux_001_src1_data;                                                                 // rsp_demux_001:src1_data -> pio_led_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_data
	wire          rsp_demux_001_src1_ready;                                                                // pio_led_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_ready -> rsp_demux_001:src1_ready
	wire   [11:0] rsp_demux_001_src1_channel;                                                              // rsp_demux_001:src1_channel -> pio_led_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_channel
	wire          rsp_demux_001_src1_startofpacket;                                                        // rsp_demux_001:src1_startofpacket -> pio_led_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                          // rsp_demux_001:src1_endofpacket -> pio_led_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_endofpacket
	wire          pio_led_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid;                       // pio_led_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_valid -> rsp_mux_001:sink1_valid
	wire  [166:0] pio_led_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data;                        // pio_led_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_data -> rsp_mux_001:sink1_data
	wire          pio_led_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready;                       // rsp_mux_001:sink1_ready -> pio_led_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_ready
	wire   [11:0] pio_led_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel;                     // pio_led_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_channel -> rsp_mux_001:sink1_channel
	wire          pio_led_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket;               // pio_led_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          pio_led_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket;                 // pio_led_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src4_valid;                                                                // rsp_demux_002:src4_valid -> onchip_memory2_1_s1_to_MemoryDMA_m_write_rsp_width_adapter:in_valid
	wire  [166:0] rsp_demux_002_src4_data;                                                                 // rsp_demux_002:src4_data -> onchip_memory2_1_s1_to_MemoryDMA_m_write_rsp_width_adapter:in_data
	wire          rsp_demux_002_src4_ready;                                                                // onchip_memory2_1_s1_to_MemoryDMA_m_write_rsp_width_adapter:in_ready -> rsp_demux_002:src4_ready
	wire   [11:0] rsp_demux_002_src4_channel;                                                              // rsp_demux_002:src4_channel -> onchip_memory2_1_s1_to_MemoryDMA_m_write_rsp_width_adapter:in_channel
	wire          rsp_demux_002_src4_startofpacket;                                                        // rsp_demux_002:src4_startofpacket -> onchip_memory2_1_s1_to_MemoryDMA_m_write_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_002_src4_endofpacket;                                                          // rsp_demux_002:src4_endofpacket -> onchip_memory2_1_s1_to_MemoryDMA_m_write_rsp_width_adapter:in_endofpacket
	wire          onchip_memory2_1_s1_to_memorydma_m_write_rsp_width_adapter_src_valid;                    // onchip_memory2_1_s1_to_MemoryDMA_m_write_rsp_width_adapter:out_valid -> rsp_mux_007:sink0_valid
	wire  [130:0] onchip_memory2_1_s1_to_memorydma_m_write_rsp_width_adapter_src_data;                     // onchip_memory2_1_s1_to_MemoryDMA_m_write_rsp_width_adapter:out_data -> rsp_mux_007:sink0_data
	wire          onchip_memory2_1_s1_to_memorydma_m_write_rsp_width_adapter_src_ready;                    // rsp_mux_007:sink0_ready -> onchip_memory2_1_s1_to_MemoryDMA_m_write_rsp_width_adapter:out_ready
	wire   [11:0] onchip_memory2_1_s1_to_memorydma_m_write_rsp_width_adapter_src_channel;                  // onchip_memory2_1_s1_to_MemoryDMA_m_write_rsp_width_adapter:out_channel -> rsp_mux_007:sink0_channel
	wire          onchip_memory2_1_s1_to_memorydma_m_write_rsp_width_adapter_src_startofpacket;            // onchip_memory2_1_s1_to_MemoryDMA_m_write_rsp_width_adapter:out_startofpacket -> rsp_mux_007:sink0_startofpacket
	wire          onchip_memory2_1_s1_to_memorydma_m_write_rsp_width_adapter_src_endofpacket;              // onchip_memory2_1_s1_to_MemoryDMA_m_write_rsp_width_adapter:out_endofpacket -> rsp_mux_007:sink0_endofpacket
	wire          rsp_demux_003_src0_valid;                                                                // rsp_demux_003:src0_valid -> mm_clock_crossing_bridge_0_s0_to_dma_0_read_master_rsp_width_adapter:in_valid
	wire  [130:0] rsp_demux_003_src0_data;                                                                 // rsp_demux_003:src0_data -> mm_clock_crossing_bridge_0_s0_to_dma_0_read_master_rsp_width_adapter:in_data
	wire          rsp_demux_003_src0_ready;                                                                // mm_clock_crossing_bridge_0_s0_to_dma_0_read_master_rsp_width_adapter:in_ready -> rsp_demux_003:src0_ready
	wire   [11:0] rsp_demux_003_src0_channel;                                                              // rsp_demux_003:src0_channel -> mm_clock_crossing_bridge_0_s0_to_dma_0_read_master_rsp_width_adapter:in_channel
	wire          rsp_demux_003_src0_startofpacket;                                                        // rsp_demux_003:src0_startofpacket -> mm_clock_crossing_bridge_0_s0_to_dma_0_read_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                          // rsp_demux_003:src0_endofpacket -> mm_clock_crossing_bridge_0_s0_to_dma_0_read_master_rsp_width_adapter:in_endofpacket
	wire          mm_clock_crossing_bridge_0_s0_to_dma_0_read_master_rsp_width_adapter_src_valid;          // mm_clock_crossing_bridge_0_s0_to_dma_0_read_master_rsp_width_adapter:out_valid -> rsp_mux_003:sink2_valid
	wire  [166:0] mm_clock_crossing_bridge_0_s0_to_dma_0_read_master_rsp_width_adapter_src_data;           // mm_clock_crossing_bridge_0_s0_to_dma_0_read_master_rsp_width_adapter:out_data -> rsp_mux_003:sink2_data
	wire          mm_clock_crossing_bridge_0_s0_to_dma_0_read_master_rsp_width_adapter_src_ready;          // rsp_mux_003:sink2_ready -> mm_clock_crossing_bridge_0_s0_to_dma_0_read_master_rsp_width_adapter:out_ready
	wire   [11:0] mm_clock_crossing_bridge_0_s0_to_dma_0_read_master_rsp_width_adapter_src_channel;        // mm_clock_crossing_bridge_0_s0_to_dma_0_read_master_rsp_width_adapter:out_channel -> rsp_mux_003:sink2_channel
	wire          mm_clock_crossing_bridge_0_s0_to_dma_0_read_master_rsp_width_adapter_src_startofpacket;  // mm_clock_crossing_bridge_0_s0_to_dma_0_read_master_rsp_width_adapter:out_startofpacket -> rsp_mux_003:sink2_startofpacket
	wire          mm_clock_crossing_bridge_0_s0_to_dma_0_read_master_rsp_width_adapter_src_endofpacket;    // mm_clock_crossing_bridge_0_s0_to_dma_0_read_master_rsp_width_adapter:out_endofpacket -> rsp_mux_003:sink2_endofpacket
	wire          rsp_demux_003_src1_valid;                                                                // rsp_demux_003:src1_valid -> mm_clock_crossing_bridge_0_s0_to_dma_0_write_master_rsp_width_adapter:in_valid
	wire  [130:0] rsp_demux_003_src1_data;                                                                 // rsp_demux_003:src1_data -> mm_clock_crossing_bridge_0_s0_to_dma_0_write_master_rsp_width_adapter:in_data
	wire          rsp_demux_003_src1_ready;                                                                // mm_clock_crossing_bridge_0_s0_to_dma_0_write_master_rsp_width_adapter:in_ready -> rsp_demux_003:src1_ready
	wire   [11:0] rsp_demux_003_src1_channel;                                                              // rsp_demux_003:src1_channel -> mm_clock_crossing_bridge_0_s0_to_dma_0_write_master_rsp_width_adapter:in_channel
	wire          rsp_demux_003_src1_startofpacket;                                                        // rsp_demux_003:src1_startofpacket -> mm_clock_crossing_bridge_0_s0_to_dma_0_write_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                                          // rsp_demux_003:src1_endofpacket -> mm_clock_crossing_bridge_0_s0_to_dma_0_write_master_rsp_width_adapter:in_endofpacket
	wire          mm_clock_crossing_bridge_0_s0_to_dma_0_write_master_rsp_width_adapter_src_valid;         // mm_clock_crossing_bridge_0_s0_to_dma_0_write_master_rsp_width_adapter:out_valid -> rsp_mux_004:sink2_valid
	wire  [166:0] mm_clock_crossing_bridge_0_s0_to_dma_0_write_master_rsp_width_adapter_src_data;          // mm_clock_crossing_bridge_0_s0_to_dma_0_write_master_rsp_width_adapter:out_data -> rsp_mux_004:sink2_data
	wire          mm_clock_crossing_bridge_0_s0_to_dma_0_write_master_rsp_width_adapter_src_ready;         // rsp_mux_004:sink2_ready -> mm_clock_crossing_bridge_0_s0_to_dma_0_write_master_rsp_width_adapter:out_ready
	wire   [11:0] mm_clock_crossing_bridge_0_s0_to_dma_0_write_master_rsp_width_adapter_src_channel;       // mm_clock_crossing_bridge_0_s0_to_dma_0_write_master_rsp_width_adapter:out_channel -> rsp_mux_004:sink2_channel
	wire          mm_clock_crossing_bridge_0_s0_to_dma_0_write_master_rsp_width_adapter_src_startofpacket; // mm_clock_crossing_bridge_0_s0_to_dma_0_write_master_rsp_width_adapter:out_startofpacket -> rsp_mux_004:sink2_startofpacket
	wire          mm_clock_crossing_bridge_0_s0_to_dma_0_write_master_rsp_width_adapter_src_endofpacket;   // mm_clock_crossing_bridge_0_s0_to_dma_0_write_master_rsp_width_adapter:out_endofpacket -> rsp_mux_004:sink2_endofpacket
	wire   [11:0] hps_0_h2f_axi_master_wr_limiter_cmd_valid_data;                                          // hps_0_h2f_axi_master_wr_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire   [11:0] hps_0_h2f_axi_master_rd_limiter_cmd_valid_data;                                          // hps_0_h2f_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire   [11:0] fpga_only_master_master_limiter_cmd_valid_data;                                          // fpga_only_master_master_limiter:cmd_src_valid -> cmd_demux_002:sink_valid
	wire   [11:0] dma_0_read_master_limiter_cmd_valid_data;                                                // dma_0_read_master_limiter:cmd_src_valid -> cmd_demux_003:sink_valid
	wire   [11:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data;                                       // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_valid -> cmd_demux_005:sink_valid
	wire   [11:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data;                                       // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_006:sink_valid
	wire          onchip_memory2_0_s1_agent_rdata_fifo_out_valid;                                          // onchip_memory2_0_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [65:0] onchip_memory2_0_s1_agent_rdata_fifo_out_data;                                           // onchip_memory2_0_s1_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          onchip_memory2_0_s1_agent_rdata_fifo_out_ready;                                          // avalon_st_adapter:in_0_ready -> onchip_memory2_0_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                           // avalon_st_adapter:out_0_valid -> onchip_memory2_0_s1_agent:rdata_fifo_sink_valid
	wire   [65:0] avalon_st_adapter_out_0_data;                                                            // avalon_st_adapter:out_0_data -> onchip_memory2_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                           // onchip_memory2_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                           // avalon_st_adapter:out_0_error -> onchip_memory2_0_s1_agent:rdata_fifo_sink_error
	wire          pio_led_s1_agent_rdata_fifo_out_valid;                                                   // pio_led_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] pio_led_s1_agent_rdata_fifo_out_data;                                                    // pio_led_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          pio_led_s1_agent_rdata_fifo_out_ready;                                                   // avalon_st_adapter_001:in_0_ready -> pio_led_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                       // avalon_st_adapter_001:out_0_valid -> pio_led_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                        // avalon_st_adapter_001:out_0_data -> pio_led_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                       // pio_led_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                       // avalon_st_adapter_001:out_0_error -> pio_led_s1_agent:rdata_fifo_sink_error
	wire          onchip_memory2_1_s1_agent_rdata_fifo_out_valid;                                          // onchip_memory2_1_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [65:0] onchip_memory2_1_s1_agent_rdata_fifo_out_data;                                           // onchip_memory2_1_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          onchip_memory2_1_s1_agent_rdata_fifo_out_ready;                                          // avalon_st_adapter_002:in_0_ready -> onchip_memory2_1_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                       // avalon_st_adapter_002:out_0_valid -> onchip_memory2_1_s1_agent:rdata_fifo_sink_valid
	wire   [65:0] avalon_st_adapter_002_out_0_data;                                                        // avalon_st_adapter_002:out_0_data -> onchip_memory2_1_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                       // onchip_memory2_1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                       // avalon_st_adapter_002:out_0_error -> onchip_memory2_1_s1_agent:rdata_fifo_sink_error
	wire          mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_out_valid;                                // mm_clock_crossing_bridge_0_s0_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_out_data;                                 // mm_clock_crossing_bridge_0_s0_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_out_ready;                                // avalon_st_adapter_003:in_0_ready -> mm_clock_crossing_bridge_0_s0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                       // avalon_st_adapter_003:out_0_valid -> mm_clock_crossing_bridge_0_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                        // avalon_st_adapter_003:out_0_data -> mm_clock_crossing_bridge_0_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                       // mm_clock_crossing_bridge_0_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                       // avalon_st_adapter_003:out_0_error -> mm_clock_crossing_bridge_0_s0_agent:rdata_fifo_sink_error
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid;                                  // jtag_uart_avalon_jtag_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data;                                   // jtag_uart_avalon_jtag_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready;                                  // avalon_st_adapter_004:in_0_ready -> jtag_uart_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                       // avalon_st_adapter_004:out_0_valid -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                        // avalon_st_adapter_004:out_0_data -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                       // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                       // avalon_st_adapter_004:out_0_error -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          dma_0_control_port_slave_agent_rdata_fifo_out_valid;                                     // dma_0_control_port_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] dma_0_control_port_slave_agent_rdata_fifo_out_data;                                      // dma_0_control_port_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          dma_0_control_port_slave_agent_rdata_fifo_out_ready;                                     // avalon_st_adapter_005:in_0_ready -> dma_0_control_port_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                       // avalon_st_adapter_005:out_0_valid -> dma_0_control_port_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                        // avalon_st_adapter_005:out_0_data -> dma_0_control_port_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                       // dma_0_control_port_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                       // avalon_st_adapter_005:out_0_error -> dma_0_control_port_slave_agent:rdata_fifo_sink_error
	wire          sysid_qsys_control_slave_agent_rdata_fifo_out_valid;                                     // sysid_qsys_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] sysid_qsys_control_slave_agent_rdata_fifo_out_data;                                      // sysid_qsys_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          sysid_qsys_control_slave_agent_rdata_fifo_out_ready;                                     // avalon_st_adapter_006:in_0_ready -> sysid_qsys_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                       // avalon_st_adapter_006:out_0_valid -> sysid_qsys_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                        // avalon_st_adapter_006:out_0_data -> sysid_qsys_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                       // sysid_qsys_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                       // avalon_st_adapter_006:out_0_error -> sysid_qsys_control_slave_agent:rdata_fifo_sink_error
	wire          memorydma_csr_agent_rdata_fifo_out_valid;                                                // MemoryDMA_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] memorydma_csr_agent_rdata_fifo_out_data;                                                 // MemoryDMA_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          memorydma_csr_agent_rdata_fifo_out_ready;                                                // avalon_st_adapter_007:in_0_ready -> MemoryDMA_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                       // avalon_st_adapter_007:out_0_valid -> MemoryDMA_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                        // avalon_st_adapter_007:out_0_data -> MemoryDMA_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                       // MemoryDMA_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                       // avalon_st_adapter_007:out_0_error -> MemoryDMA_csr_agent:rdata_fifo_sink_error
	wire          pio_reg1_s1_agent_rdata_fifo_out_valid;                                                  // pio_reg1_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] pio_reg1_s1_agent_rdata_fifo_out_data;                                                   // pio_reg1_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_008:in_0_data
	wire          pio_reg1_s1_agent_rdata_fifo_out_ready;                                                  // avalon_st_adapter_008:in_0_ready -> pio_reg1_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                       // avalon_st_adapter_008:out_0_valid -> pio_reg1_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                        // avalon_st_adapter_008:out_0_data -> pio_reg1_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                       // pio_reg1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                       // avalon_st_adapter_008:out_0_error -> pio_reg1_s1_agent:rdata_fifo_sink_error
	wire          pio_reg2_s1_agent_rdata_fifo_out_valid;                                                  // pio_reg2_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] pio_reg2_s1_agent_rdata_fifo_out_data;                                                   // pio_reg2_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_009:in_0_data
	wire          pio_reg2_s1_agent_rdata_fifo_out_ready;                                                  // avalon_st_adapter_009:in_0_ready -> pio_reg2_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                       // avalon_st_adapter_009:out_0_valid -> pio_reg2_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                        // avalon_st_adapter_009:out_0_data -> pio_reg2_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                       // pio_reg2_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                       // avalon_st_adapter_009:out_0_error -> pio_reg2_s1_agent:rdata_fifo_sink_error
	wire          pio_reg3_s1_agent_rdata_fifo_out_valid;                                                  // pio_reg3_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] pio_reg3_s1_agent_rdata_fifo_out_data;                                                   // pio_reg3_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_010:in_0_data
	wire          pio_reg3_s1_agent_rdata_fifo_out_ready;                                                  // avalon_st_adapter_010:in_0_ready -> pio_reg3_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                       // avalon_st_adapter_010:out_0_valid -> pio_reg3_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                        // avalon_st_adapter_010:out_0_data -> pio_reg3_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                       // pio_reg3_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                       // avalon_st_adapter_010:out_0_error -> pio_reg3_s1_agent:rdata_fifo_sink_error
	wire          intr_capturer_0_avalon_slave_0_agent_rdata_fifo_out_valid;                               // intr_capturer_0_avalon_slave_0_agent_rdata_fifo:out_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] intr_capturer_0_avalon_slave_0_agent_rdata_fifo_out_data;                                // intr_capturer_0_avalon_slave_0_agent_rdata_fifo:out_data -> avalon_st_adapter_011:in_0_data
	wire          intr_capturer_0_avalon_slave_0_agent_rdata_fifo_out_ready;                               // avalon_st_adapter_011:in_0_ready -> intr_capturer_0_avalon_slave_0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_011_out_0_valid;                                                       // avalon_st_adapter_011:out_0_valid -> intr_capturer_0_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                                        // avalon_st_adapter_011:out_0_data -> intr_capturer_0_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                                       // intr_capturer_0_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                                       // avalon_st_adapter_011:out_0_error -> intr_capturer_0_avalon_slave_0_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) fpga_only_master_master_translator (
		.clk                    (clk_0_clk_clk),                                                              //                       clk.clk
		.reset                  (dma_0_reset_reset_bridge_in_reset_reset),                                    //                     reset.reset
		.uav_address            (fpga_only_master_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (fpga_only_master_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (fpga_only_master_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (fpga_only_master_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (fpga_only_master_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (fpga_only_master_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (fpga_only_master_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (fpga_only_master_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (fpga_only_master_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (fpga_only_master_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (fpga_only_master_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (fpga_only_master_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (fpga_only_master_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (fpga_only_master_master_byteenable),                                         //                          .byteenable
		.av_read                (fpga_only_master_master_read),                                               //                          .read
		.av_readdata            (fpga_only_master_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (fpga_only_master_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (fpga_only_master_master_write),                                              //                          .write
		.av_writedata           (fpga_only_master_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                       //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                       //               (terminated)
		.av_begintransfer       (1'b0),                                                                       //               (terminated)
		.av_chipselect          (1'b0),                                                                       //               (terminated)
		.av_lock                (1'b0),                                                                       //               (terminated)
		.av_debugaccess         (1'b0),                                                                       //               (terminated)
		.uav_clken              (),                                                                           //               (terminated)
		.av_clken               (1'b1),                                                                       //               (terminated)
		.uav_response           (2'b00),                                                                      //               (terminated)
		.av_response            (),                                                                           //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                       //               (terminated)
		.av_writeresponsevalid  ()                                                                            //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (18),
		.AV_DATA_W                   (64),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (8),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (4),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (1),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (8),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dma_0_read_master_translator (
		.clk                    (clk_0_clk_clk),                                                        //                       clk.clk
		.reset                  (dma_0_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (dma_0_read_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (dma_0_read_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (dma_0_read_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (dma_0_read_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (dma_0_read_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (dma_0_read_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (dma_0_read_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (dma_0_read_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (dma_0_read_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (dma_0_read_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (dma_0_read_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (dma_0_read_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (dma_0_read_master_waitrequest),                                        //                          .waitrequest
		.av_chipselect          (dma_0_read_master_chipselect),                                         //                          .chipselect
		.av_read                (dma_0_read_master_read),                                               //                          .read
		.av_readdata            (dma_0_read_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (dma_0_read_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                 //               (terminated)
		.av_byteenable          (8'b11111111),                                                          //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                 //               (terminated)
		.av_begintransfer       (1'b0),                                                                 //               (terminated)
		.av_write               (1'b0),                                                                 //               (terminated)
		.av_writedata           (64'b0000000000000000000000000000000000000000000000000000000000000000), //               (terminated)
		.av_lock                (1'b0),                                                                 //               (terminated)
		.av_debugaccess         (1'b0),                                                                 //               (terminated)
		.uav_clken              (),                                                                     //               (terminated)
		.av_clken               (1'b1),                                                                 //               (terminated)
		.uav_response           (2'b00),                                                                //               (terminated)
		.av_response            (),                                                                     //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                 //               (terminated)
		.av_writeresponsevalid  ()                                                                      //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (18),
		.AV_DATA_W                   (64),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (8),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (4),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (1),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (8),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dma_0_write_master_translator (
		.clk                    (clk_0_clk_clk),                                                         //                       clk.clk
		.reset                  (dma_0_reset_reset_bridge_in_reset_reset),                               //                     reset.reset
		.uav_address            (dma_0_write_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (dma_0_write_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (dma_0_write_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (dma_0_write_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (dma_0_write_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (dma_0_write_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (dma_0_write_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (dma_0_write_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (dma_0_write_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (dma_0_write_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (dma_0_write_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (dma_0_write_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (dma_0_write_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (dma_0_write_master_byteenable),                                         //                          .byteenable
		.av_chipselect          (dma_0_write_master_chipselect),                                         //                          .chipselect
		.av_write               (dma_0_write_master_write),                                              //                          .write
		.av_writedata           (dma_0_write_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                  //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                  //               (terminated)
		.av_read                (1'b0),                                                                  //               (terminated)
		.av_readdata            (),                                                                      //               (terminated)
		.av_readdatavalid       (),                                                                      //               (terminated)
		.av_lock                (1'b0),                                                                  //               (terminated)
		.av_debugaccess         (1'b0),                                                                  //               (terminated)
		.uav_clken              (),                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                 //               (terminated)
		.av_response            (),                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                       //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) memorydma_m_write_translator (
		.clk                    (clk_0_clk_clk),                                                        //                       clk.clk
		.reset                  (dma_0_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (memorydma_m_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (memorydma_m_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (memorydma_m_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (memorydma_m_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (memorydma_m_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (memorydma_m_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (memorydma_m_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (memorydma_m_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (memorydma_m_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (memorydma_m_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (memorydma_m_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (MemoryDMA_m_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (MemoryDMA_m_write_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (MemoryDMA_m_write_byteenable),                                         //                          .byteenable
		.av_write               (MemoryDMA_m_write_write),                                              //                          .write
		.av_writedata           (MemoryDMA_m_write_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                 //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                 //               (terminated)
		.av_begintransfer       (1'b0),                                                                 //               (terminated)
		.av_chipselect          (1'b0),                                                                 //               (terminated)
		.av_read                (1'b0),                                                                 //               (terminated)
		.av_readdata            (),                                                                     //               (terminated)
		.av_readdatavalid       (),                                                                     //               (terminated)
		.av_lock                (1'b0),                                                                 //               (terminated)
		.av_debugaccess         (1'b0),                                                                 //               (terminated)
		.uav_clken              (),                                                                     //               (terminated)
		.av_clken               (1'b1),                                                                 //               (terminated)
		.uav_response           (2'b00),                                                                //               (terminated)
		.av_response            (),                                                                     //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                 //               (terminated)
		.av_writeresponsevalid  ()                                                                      //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory2_0_s1_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (dma_0_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (onchip_memory2_0_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory2_0_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (onchip_memory2_0_s1_agent_m0_read),          //                         .read
		.uav_write              (onchip_memory2_0_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (onchip_memory2_0_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (onchip_memory2_0_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (onchip_memory2_0_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (onchip_memory2_0_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (onchip_memory2_0_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (onchip_memory2_0_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (onchip_memory2_0_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (onchip_memory2_0_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (onchip_memory2_0_s1_write),                  //                         .write
		.av_readdata            (onchip_memory2_0_s1_readdata),               //                         .readdata
		.av_writedata           (onchip_memory2_0_s1_writedata),              //                         .writedata
		.av_byteenable          (onchip_memory2_0_s1_byteenable),             //                         .byteenable
		.av_chipselect          (onchip_memory2_0_s1_chipselect),             //                         .chipselect
		.av_clken               (onchip_memory2_0_s1_clken),                  //                         .clken
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_led_s1_translator (
		.clk                    (clk_0_clk_clk),                           //                      clk.clk
		.reset                  (dma_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pio_led_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (pio_led_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (pio_led_s1_agent_m0_read),                //                         .read
		.uav_write              (pio_led_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (pio_led_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (pio_led_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (pio_led_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (pio_led_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (pio_led_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (pio_led_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (pio_led_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (pio_led_s1_address),                      //      avalon_anti_slave_0.address
		.av_write               (pio_led_s1_write),                        //                         .write
		.av_readdata            (pio_led_s1_readdata),                     //                         .readdata
		.av_writedata           (pio_led_s1_writedata),                    //                         .writedata
		.av_chipselect          (pio_led_s1_chipselect),                   //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory2_1_s1_translator (
		.clk                    (clk_0_clk_clk),                              //                      clk.clk
		.reset                  (dma_0_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (onchip_memory2_1_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory2_1_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (onchip_memory2_1_s1_agent_m0_read),          //                         .read
		.uav_write              (onchip_memory2_1_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (onchip_memory2_1_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (onchip_memory2_1_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (onchip_memory2_1_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (onchip_memory2_1_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (onchip_memory2_1_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (onchip_memory2_1_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (onchip_memory2_1_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (onchip_memory2_1_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (onchip_memory2_1_s1_write),                  //                         .write
		.av_readdata            (onchip_memory2_1_s1_readdata),               //                         .readdata
		.av_writedata           (onchip_memory2_1_s1_writedata),              //                         .writedata
		.av_byteenable          (onchip_memory2_1_s1_byteenable),             //                         .byteenable
		.av_chipselect          (onchip_memory2_1_s1_chipselect),             //                         .chipselect
		.av_clken               (onchip_memory2_1_s1_clken),                  //                         .clken
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mm_clock_crossing_bridge_0_s0_translator (
		.clk                    (clk_0_clk_clk),                                        //                      clk.clk
		.reset                  (dma_0_reset_reset_bridge_in_reset_reset),              //                    reset.reset
		.uav_address            (mm_clock_crossing_bridge_0_s0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (mm_clock_crossing_bridge_0_s0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (mm_clock_crossing_bridge_0_s0_agent_m0_read),          //                         .read
		.uav_write              (mm_clock_crossing_bridge_0_s0_agent_m0_write),         //                         .write
		.uav_waitrequest        (mm_clock_crossing_bridge_0_s0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (mm_clock_crossing_bridge_0_s0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (mm_clock_crossing_bridge_0_s0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (mm_clock_crossing_bridge_0_s0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (mm_clock_crossing_bridge_0_s0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (mm_clock_crossing_bridge_0_s0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (mm_clock_crossing_bridge_0_s0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (mm_clock_crossing_bridge_0_s0_address),                //      avalon_anti_slave_0.address
		.av_write               (mm_clock_crossing_bridge_0_s0_write),                  //                         .write
		.av_read                (mm_clock_crossing_bridge_0_s0_read),                   //                         .read
		.av_readdata            (mm_clock_crossing_bridge_0_s0_readdata),               //                         .readdata
		.av_writedata           (mm_clock_crossing_bridge_0_s0_writedata),              //                         .writedata
		.av_burstcount          (mm_clock_crossing_bridge_0_s0_burstcount),             //                         .burstcount
		.av_byteenable          (mm_clock_crossing_bridge_0_s0_byteenable),             //                         .byteenable
		.av_readdatavalid       (mm_clock_crossing_bridge_0_s0_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (mm_clock_crossing_bridge_0_s0_waitrequest),            //                         .waitrequest
		.av_debugaccess         (mm_clock_crossing_bridge_0_s0_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_chipselect          (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                    (clk_0_clk_clk),                                      //                      clk.clk
		.reset                  (dma_0_reset_reset_bridge_in_reset_reset),            //                    reset.reset
		.uav_address            (jtag_uart_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_uart_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_uart_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_uart_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_uart_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_uart_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_uart_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (18),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_0_control_port_slave_translator (
		.clk                    (clk_0_clk_clk),                                   //                      clk.clk
		.reset                  (dma_0_reset_reset_bridge_in_reset_reset),         //                    reset.reset
		.uav_address            (dma_0_control_port_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (dma_0_control_port_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (dma_0_control_port_slave_agent_m0_read),          //                         .read
		.uav_write              (dma_0_control_port_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (dma_0_control_port_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (dma_0_control_port_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (dma_0_control_port_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (dma_0_control_port_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (dma_0_control_port_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (dma_0_control_port_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (dma_0_control_port_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (dma_0_control_port_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (dma_0_control_port_slave_write),                  //                         .write
		.av_readdata            (dma_0_control_port_slave_readdata),               //                         .readdata
		.av_writedata           (dma_0_control_port_slave_writedata),              //                         .writedata
		.av_chipselect          (dma_0_control_port_slave_chipselect),             //                         .chipselect
		.av_read                (),                                                //              (terminated)
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_qsys_control_slave_translator (
		.clk                    (clk_0_clk_clk),                                   //                      clk.clk
		.reset                  (dma_0_reset_reset_bridge_in_reset_reset),         //                    reset.reset
		.uav_address            (sysid_qsys_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_qsys_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sysid_qsys_control_slave_agent_m0_read),          //                         .read
		.uav_write              (sysid_qsys_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sysid_qsys_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sysid_qsys_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sysid_qsys_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sysid_qsys_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sysid_qsys_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sysid_qsys_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sysid_qsys_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (sysid_qsys_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata            (sysid_qsys_control_slave_readdata),               //                         .readdata
		.av_write               (),                                                //              (terminated)
		.av_read                (),                                                //              (terminated)
		.av_writedata           (),                                                //              (terminated)
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_chipselect          (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) memorydma_csr_translator (
		.clk                    (clk_0_clk_clk),                           //                      clk.clk
		.reset                  (dma_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (memorydma_csr_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (memorydma_csr_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (memorydma_csr_agent_m0_read),             //                         .read
		.uav_write              (memorydma_csr_agent_m0_write),            //                         .write
		.uav_waitrequest        (memorydma_csr_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (memorydma_csr_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (memorydma_csr_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (memorydma_csr_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (memorydma_csr_agent_m0_writedata),        //                         .writedata
		.uav_lock               (memorydma_csr_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (memorydma_csr_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (MemoryDMA_csr_address),                   //      avalon_anti_slave_0.address
		.av_write               (MemoryDMA_csr_write),                     //                         .write
		.av_read                (MemoryDMA_csr_read),                      //                         .read
		.av_readdata            (MemoryDMA_csr_readdata),                  //                         .readdata
		.av_writedata           (MemoryDMA_csr_writedata),                 //                         .writedata
		.av_chipselect          (MemoryDMA_csr_chipselect),                //                         .chipselect
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_reg1_s1_translator (
		.clk                    (clk_0_clk_clk),                           //                      clk.clk
		.reset                  (dma_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pio_reg1_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (pio_reg1_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (pio_reg1_s1_agent_m0_read),               //                         .read
		.uav_write              (pio_reg1_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (pio_reg1_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (pio_reg1_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (pio_reg1_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (pio_reg1_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (pio_reg1_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (pio_reg1_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (pio_reg1_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (pio_reg1_s1_address),                     //      avalon_anti_slave_0.address
		.av_write               (pio_reg1_s1_write),                       //                         .write
		.av_readdata            (pio_reg1_s1_readdata),                    //                         .readdata
		.av_writedata           (pio_reg1_s1_writedata),                   //                         .writedata
		.av_chipselect          (pio_reg1_s1_chipselect),                  //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_reg2_s1_translator (
		.clk                    (clk_0_clk_clk),                           //                      clk.clk
		.reset                  (dma_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pio_reg2_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (pio_reg2_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (pio_reg2_s1_agent_m0_read),               //                         .read
		.uav_write              (pio_reg2_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (pio_reg2_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (pio_reg2_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (pio_reg2_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (pio_reg2_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (pio_reg2_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (pio_reg2_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (pio_reg2_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (pio_reg2_s1_address),                     //      avalon_anti_slave_0.address
		.av_write               (pio_reg2_s1_write),                       //                         .write
		.av_readdata            (pio_reg2_s1_readdata),                    //                         .readdata
		.av_writedata           (pio_reg2_s1_writedata),                   //                         .writedata
		.av_chipselect          (pio_reg2_s1_chipselect),                  //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_reg3_s1_translator (
		.clk                    (clk_0_clk_clk),                           //                      clk.clk
		.reset                  (dma_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pio_reg3_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (pio_reg3_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (pio_reg3_s1_agent_m0_read),               //                         .read
		.uav_write              (pio_reg3_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (pio_reg3_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (pio_reg3_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (pio_reg3_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (pio_reg3_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (pio_reg3_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (pio_reg3_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (pio_reg3_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (pio_reg3_s1_address),                     //      avalon_anti_slave_0.address
		.av_readdata            (pio_reg3_s1_readdata),                    //                         .readdata
		.av_write               (),                                        //              (terminated)
		.av_read                (),                                        //              (terminated)
		.av_writedata           (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_chipselect          (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) intr_capturer_0_avalon_slave_0_translator (
		.clk                    (clk_0_clk_clk),                                         //                      clk.clk
		.reset                  (dma_0_reset_reset_bridge_in_reset_reset),               //                    reset.reset
		.uav_address            (intr_capturer_0_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (intr_capturer_0_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (intr_capturer_0_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write              (intr_capturer_0_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (intr_capturer_0_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (intr_capturer_0_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (intr_capturer_0_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (intr_capturer_0_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (intr_capturer_0_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (intr_capturer_0_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (intr_capturer_0_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (intr_capturer_0_avalon_slave_0_address),                //      avalon_anti_slave_0.address
		.av_read                (intr_capturer_0_avalon_slave_0_read),                   //                         .read
		.av_readdata            (intr_capturer_0_avalon_slave_0_readdata),               //                         .readdata
		.av_write               (),                                                      //              (terminated)
		.av_writedata           (),                                                      //              (terminated)
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_chipselect          (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (30),
		.RDATA_WIDTH               (64),
		.WDATA_WIDTH               (64),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (133),
		.PKT_CACHE_H               (161),
		.PKT_CACHE_L               (158),
		.PKT_ADDR_SIDEBAND_H       (131),
		.PKT_ADDR_SIDEBAND_L       (131),
		.PKT_PROTECTION_H          (157),
		.PKT_PROTECTION_L          (155),
		.PKT_BURST_SIZE_H          (128),
		.PKT_BURST_SIZE_L          (126),
		.PKT_BURST_TYPE_H          (130),
		.PKT_BURST_TYPE_L          (129),
		.PKT_RESPONSE_STATUS_L     (162),
		.PKT_RESPONSE_STATUS_H     (163),
		.PKT_BURSTWRAP_H           (125),
		.PKT_BURSTWRAP_L           (118),
		.PKT_BYTE_CNT_H            (117),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_EXCLUSIVE       (109),
		.PKT_TRANS_LOCK            (108),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (138),
		.PKT_SRC_ID_L              (135),
		.PKT_DEST_ID_H             (142),
		.PKT_DEST_ID_L             (139),
		.PKT_THREAD_ID_H           (154),
		.PKT_THREAD_ID_L           (143),
		.PKT_QOS_L                 (134),
		.PKT_QOS_H                 (134),
		.PKT_ORI_BURST_SIZE_L      (164),
		.PKT_ORI_BURST_SIZE_H      (166),
		.PKT_DATA_SIDEBAND_H       (132),
		.PKT_DATA_SIDEBAND_L       (132),
		.ST_DATA_W                 (167),
		.ST_CHANNEL_W              (12),
		.ID                        (4)
	) hps_0_h2f_axi_master_agent (
		.aclk                   (clk_0_clk_clk),                                                     //              clk.clk
		.aresetn                (~hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (hps_0_h2f_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (hps_0_h2f_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (hps_0_h2f_axi_master_wr_limiter_rsp_src_valid),                     //         write_rp.valid
		.write_rp_data          (hps_0_h2f_axi_master_wr_limiter_rsp_src_data),                      //                 .data
		.write_rp_channel       (hps_0_h2f_axi_master_wr_limiter_rsp_src_channel),                   //                 .channel
		.write_rp_startofpacket (hps_0_h2f_axi_master_wr_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.write_rp_endofpacket   (hps_0_h2f_axi_master_wr_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.write_rp_ready         (hps_0_h2f_axi_master_wr_limiter_rsp_src_ready),                     //                 .ready
		.read_cp_valid          (hps_0_h2f_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (hps_0_h2f_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (hps_0_h2f_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (hps_0_h2f_axi_master_rd_limiter_rsp_src_valid),                     //          read_rp.valid
		.read_rp_data           (hps_0_h2f_axi_master_rd_limiter_rsp_src_data),                      //                 .data
		.read_rp_channel        (hps_0_h2f_axi_master_rd_limiter_rsp_src_channel),                   //                 .channel
		.read_rp_startofpacket  (hps_0_h2f_axi_master_rd_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.read_rp_endofpacket    (hps_0_h2f_axi_master_rd_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.read_rp_ready          (hps_0_h2f_axi_master_rd_limiter_rsp_src_ready),                     //                 .ready
		.awid                   (hps_0_h2f_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (hps_0_h2f_axi_master_awlen),                                        //                 .awlen
		.awsize                 (hps_0_h2f_axi_master_awsize),                                       //                 .awsize
		.awburst                (hps_0_h2f_axi_master_awburst),                                      //                 .awburst
		.awlock                 (hps_0_h2f_axi_master_awlock),                                       //                 .awlock
		.awcache                (hps_0_h2f_axi_master_awcache),                                      //                 .awcache
		.awprot                 (hps_0_h2f_axi_master_awprot),                                       //                 .awprot
		.awvalid                (hps_0_h2f_axi_master_awvalid),                                      //                 .awvalid
		.awready                (hps_0_h2f_axi_master_awready),                                      //                 .awready
		.wid                    (hps_0_h2f_axi_master_wid),                                          //                 .wid
		.wdata                  (hps_0_h2f_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (hps_0_h2f_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (hps_0_h2f_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (hps_0_h2f_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (hps_0_h2f_axi_master_wready),                                       //                 .wready
		.bid                    (hps_0_h2f_axi_master_bid),                                          //                 .bid
		.bresp                  (hps_0_h2f_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (hps_0_h2f_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (hps_0_h2f_axi_master_bready),                                       //                 .bready
		.arid                   (hps_0_h2f_axi_master_arid),                                         //                 .arid
		.araddr                 (hps_0_h2f_axi_master_araddr),                                       //                 .araddr
		.arlen                  (hps_0_h2f_axi_master_arlen),                                        //                 .arlen
		.arsize                 (hps_0_h2f_axi_master_arsize),                                       //                 .arsize
		.arburst                (hps_0_h2f_axi_master_arburst),                                      //                 .arburst
		.arlock                 (hps_0_h2f_axi_master_arlock),                                       //                 .arlock
		.arcache                (hps_0_h2f_axi_master_arcache),                                      //                 .arcache
		.arprot                 (hps_0_h2f_axi_master_arprot),                                       //                 .arprot
		.arvalid                (hps_0_h2f_axi_master_arvalid),                                      //                 .arvalid
		.arready                (hps_0_h2f_axi_master_arready),                                      //                 .arready
		.rid                    (hps_0_h2f_axi_master_rid),                                          //                 .rid
		.rdata                  (hps_0_h2f_axi_master_rdata),                                        //                 .rdata
		.rresp                  (hps_0_h2f_axi_master_rresp),                                        //                 .rresp
		.rlast                  (hps_0_h2f_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (hps_0_h2f_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (hps_0_h2f_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                              //      (terminated)
		.aruser                 (1'b0),                                                              //      (terminated)
		.awqos                  (4'b0000),                                                           //      (terminated)
		.arqos                  (4'b0000),                                                           //      (terminated)
		.awregion               (4'b0000),                                                           //      (terminated)
		.arregion               (4'b0000),                                                           //      (terminated)
		.wuser                  (1'b0),                                                              //      (terminated)
		.ruser                  (),                                                                  //      (terminated)
		.buser                  ()                                                                   //      (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_QOS_H                 (98),
		.PKT_QOS_L                 (98),
		.PKT_DATA_SIDEBAND_H       (96),
		.PKT_DATA_SIDEBAND_L       (96),
		.PKT_ADDR_SIDEBAND_H       (95),
		.PKT_ADDR_SIDEBAND_L       (95),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_CACHE_H               (125),
		.PKT_CACHE_L               (122),
		.PKT_THREAD_ID_H           (118),
		.PKT_THREAD_ID_L           (107),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (12),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (3),
		.BURSTWRAP_VALUE           (255),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) fpga_only_master_master_agent (
		.clk                   (clk_0_clk_clk),                                                              //       clk.clk
		.reset                 (dma_0_reset_reset_bridge_in_reset_reset),                                    // clk_reset.reset
		.av_address            (fpga_only_master_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (fpga_only_master_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (fpga_only_master_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (fpga_only_master_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (fpga_only_master_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (fpga_only_master_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (fpga_only_master_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (fpga_only_master_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (fpga_only_master_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (fpga_only_master_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (fpga_only_master_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (fpga_only_master_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (fpga_only_master_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (fpga_only_master_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (fpga_only_master_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (fpga_only_master_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (fpga_only_master_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (fpga_only_master_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (fpga_only_master_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (fpga_only_master_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (fpga_only_master_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (fpga_only_master_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                           // (terminated)
		.av_writeresponsevalid ()                                                                            // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (166),
		.PKT_ORI_BURST_SIZE_L      (164),
		.PKT_RESPONSE_STATUS_H     (163),
		.PKT_RESPONSE_STATUS_L     (162),
		.PKT_QOS_H                 (134),
		.PKT_QOS_L                 (134),
		.PKT_DATA_SIDEBAND_H       (132),
		.PKT_DATA_SIDEBAND_L       (132),
		.PKT_ADDR_SIDEBAND_H       (131),
		.PKT_ADDR_SIDEBAND_L       (131),
		.PKT_BURST_TYPE_H          (130),
		.PKT_BURST_TYPE_L          (129),
		.PKT_CACHE_H               (161),
		.PKT_CACHE_L               (158),
		.PKT_THREAD_ID_H           (154),
		.PKT_THREAD_ID_L           (143),
		.PKT_BURST_SIZE_H          (128),
		.PKT_BURST_SIZE_L          (126),
		.PKT_TRANS_EXCLUSIVE       (109),
		.PKT_TRANS_LOCK            (108),
		.PKT_BEGIN_BURST           (133),
		.PKT_PROTECTION_H          (157),
		.PKT_PROTECTION_L          (155),
		.PKT_BURSTWRAP_H           (125),
		.PKT_BURSTWRAP_L           (118),
		.PKT_BYTE_CNT_H            (117),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (138),
		.PKT_SRC_ID_L              (135),
		.PKT_DEST_ID_H             (142),
		.PKT_DEST_ID_L             (139),
		.ST_DATA_W                 (167),
		.ST_CHANNEL_W              (12),
		.AV_BURSTCOUNT_W           (4),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (255),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dma_0_read_master_agent (
		.clk                   (clk_0_clk_clk),                                                        //       clk.clk
		.reset                 (dma_0_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (dma_0_read_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (dma_0_read_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (dma_0_read_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (dma_0_read_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (dma_0_read_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (dma_0_read_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (dma_0_read_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (dma_0_read_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (dma_0_read_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (dma_0_read_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (dma_0_read_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (dma_0_read_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (dma_0_read_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (dma_0_read_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (dma_0_read_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (dma_0_read_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (dma_0_read_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (dma_0_read_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (dma_0_read_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (dma_0_read_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (dma_0_read_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (dma_0_read_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                     // (terminated)
		.av_writeresponsevalid ()                                                                      // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (166),
		.PKT_ORI_BURST_SIZE_L      (164),
		.PKT_RESPONSE_STATUS_H     (163),
		.PKT_RESPONSE_STATUS_L     (162),
		.PKT_QOS_H                 (134),
		.PKT_QOS_L                 (134),
		.PKT_DATA_SIDEBAND_H       (132),
		.PKT_DATA_SIDEBAND_L       (132),
		.PKT_ADDR_SIDEBAND_H       (131),
		.PKT_ADDR_SIDEBAND_L       (131),
		.PKT_BURST_TYPE_H          (130),
		.PKT_BURST_TYPE_L          (129),
		.PKT_CACHE_H               (161),
		.PKT_CACHE_L               (158),
		.PKT_THREAD_ID_H           (154),
		.PKT_THREAD_ID_L           (143),
		.PKT_BURST_SIZE_H          (128),
		.PKT_BURST_SIZE_L          (126),
		.PKT_TRANS_EXCLUSIVE       (109),
		.PKT_TRANS_LOCK            (108),
		.PKT_BEGIN_BURST           (133),
		.PKT_PROTECTION_H          (157),
		.PKT_PROTECTION_L          (155),
		.PKT_BURSTWRAP_H           (125),
		.PKT_BURSTWRAP_L           (118),
		.PKT_BYTE_CNT_H            (117),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (138),
		.PKT_SRC_ID_L              (135),
		.PKT_DEST_ID_H             (142),
		.PKT_DEST_ID_L             (139),
		.ST_DATA_W                 (167),
		.ST_CHANNEL_W              (12),
		.AV_BURSTCOUNT_W           (4),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (255),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dma_0_write_master_agent (
		.clk                   (clk_0_clk_clk),                                                         //       clk.clk
		.reset                 (dma_0_reset_reset_bridge_in_reset_reset),                               // clk_reset.reset
		.av_address            (dma_0_write_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (dma_0_write_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (dma_0_write_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (dma_0_write_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (dma_0_write_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (dma_0_write_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (dma_0_write_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (dma_0_write_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (dma_0_write_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (dma_0_write_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (dma_0_write_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (dma_0_write_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (dma_0_write_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (dma_0_write_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (dma_0_write_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (dma_0_write_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_004_src_valid),                                                 //        rp.valid
		.rp_data               (rsp_mux_004_src_data),                                                  //          .data
		.rp_channel            (rsp_mux_004_src_channel),                                               //          .channel
		.rp_startofpacket      (rsp_mux_004_src_startofpacket),                                         //          .startofpacket
		.rp_endofpacket        (rsp_mux_004_src_endofpacket),                                           //          .endofpacket
		.rp_ready              (rsp_mux_004_src_ready),                                                 //          .ready
		.av_response           (),                                                                      // (terminated)
		.av_writeresponsevalid ()                                                                       // (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (97),
		.PKT_CACHE_H               (125),
		.PKT_CACHE_L               (122),
		.PKT_ADDR_SIDEBAND_H       (95),
		.PKT_ADDR_SIDEBAND_L       (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_THREAD_ID_H           (118),
		.PKT_THREAD_ID_L           (107),
		.PKT_QOS_L                 (98),
		.PKT_QOS_H                 (98),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_DATA_SIDEBAND_H       (96),
		.PKT_DATA_SIDEBAND_L       (96),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (12),
		.ID                        (5)
	) hps_0_h2f_lw_axi_master_agent (
		.aclk                   (clk_0_clk_clk),                                                     //              clk.clk
		.aresetn                (~hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                      //         write_cp.valid
		.write_cp_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                       //                 .data
		.write_cp_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),              //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                      //                 .ready
		.write_rp_valid         (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                  //         write_rp.valid
		.write_rp_data          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data),                   //                 .data
		.write_rp_channel       (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                //                 .channel
		.write_rp_startofpacket (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),          //                 .startofpacket
		.write_rp_endofpacket   (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),            //                 .endofpacket
		.write_rp_ready         (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                  //                 .ready
		.read_cp_valid          (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                       //          read_cp.valid
		.read_cp_data           (hps_0_h2f_lw_axi_master_agent_read_cp_data),                        //                 .data
		.read_cp_startofpacket  (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),               //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                 //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                       //                 .ready
		.read_rp_valid          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                  //          read_rp.valid
		.read_rp_data           (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data),                   //                 .data
		.read_rp_channel        (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                //                 .channel
		.read_rp_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),          //                 .startofpacket
		.read_rp_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),            //                 .endofpacket
		.read_rp_ready          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                  //                 .ready
		.awid                   (hps_0_h2f_lw_axi_master_awid),                                      // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_lw_axi_master_awaddr),                                    //                 .awaddr
		.awlen                  (hps_0_h2f_lw_axi_master_awlen),                                     //                 .awlen
		.awsize                 (hps_0_h2f_lw_axi_master_awsize),                                    //                 .awsize
		.awburst                (hps_0_h2f_lw_axi_master_awburst),                                   //                 .awburst
		.awlock                 (hps_0_h2f_lw_axi_master_awlock),                                    //                 .awlock
		.awcache                (hps_0_h2f_lw_axi_master_awcache),                                   //                 .awcache
		.awprot                 (hps_0_h2f_lw_axi_master_awprot),                                    //                 .awprot
		.awvalid                (hps_0_h2f_lw_axi_master_awvalid),                                   //                 .awvalid
		.awready                (hps_0_h2f_lw_axi_master_awready),                                   //                 .awready
		.wid                    (hps_0_h2f_lw_axi_master_wid),                                       //                 .wid
		.wdata                  (hps_0_h2f_lw_axi_master_wdata),                                     //                 .wdata
		.wstrb                  (hps_0_h2f_lw_axi_master_wstrb),                                     //                 .wstrb
		.wlast                  (hps_0_h2f_lw_axi_master_wlast),                                     //                 .wlast
		.wvalid                 (hps_0_h2f_lw_axi_master_wvalid),                                    //                 .wvalid
		.wready                 (hps_0_h2f_lw_axi_master_wready),                                    //                 .wready
		.bid                    (hps_0_h2f_lw_axi_master_bid),                                       //                 .bid
		.bresp                  (hps_0_h2f_lw_axi_master_bresp),                                     //                 .bresp
		.bvalid                 (hps_0_h2f_lw_axi_master_bvalid),                                    //                 .bvalid
		.bready                 (hps_0_h2f_lw_axi_master_bready),                                    //                 .bready
		.arid                   (hps_0_h2f_lw_axi_master_arid),                                      //                 .arid
		.araddr                 (hps_0_h2f_lw_axi_master_araddr),                                    //                 .araddr
		.arlen                  (hps_0_h2f_lw_axi_master_arlen),                                     //                 .arlen
		.arsize                 (hps_0_h2f_lw_axi_master_arsize),                                    //                 .arsize
		.arburst                (hps_0_h2f_lw_axi_master_arburst),                                   //                 .arburst
		.arlock                 (hps_0_h2f_lw_axi_master_arlock),                                    //                 .arlock
		.arcache                (hps_0_h2f_lw_axi_master_arcache),                                   //                 .arcache
		.arprot                 (hps_0_h2f_lw_axi_master_arprot),                                    //                 .arprot
		.arvalid                (hps_0_h2f_lw_axi_master_arvalid),                                   //                 .arvalid
		.arready                (hps_0_h2f_lw_axi_master_arready),                                   //                 .arready
		.rid                    (hps_0_h2f_lw_axi_master_rid),                                       //                 .rid
		.rdata                  (hps_0_h2f_lw_axi_master_rdata),                                     //                 .rdata
		.rresp                  (hps_0_h2f_lw_axi_master_rresp),                                     //                 .rresp
		.rlast                  (hps_0_h2f_lw_axi_master_rlast),                                     //                 .rlast
		.rvalid                 (hps_0_h2f_lw_axi_master_rvalid),                                    //                 .rvalid
		.rready                 (hps_0_h2f_lw_axi_master_rready),                                    //                 .rready
		.awuser                 (1'b0),                                                              //      (terminated)
		.aruser                 (1'b0),                                                              //      (terminated)
		.awqos                  (4'b0000),                                                           //      (terminated)
		.arqos                  (4'b0000),                                                           //      (terminated)
		.awregion               (4'b0000),                                                           //      (terminated)
		.arregion               (4'b0000),                                                           //      (terminated)
		.wuser                  (1'b0),                                                              //      (terminated)
		.ruser                  (),                                                                  //      (terminated)
		.buser                  ()                                                                   //      (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_QOS_H                 (98),
		.PKT_QOS_L                 (98),
		.PKT_DATA_SIDEBAND_H       (96),
		.PKT_DATA_SIDEBAND_L       (96),
		.PKT_ADDR_SIDEBAND_H       (95),
		.PKT_ADDR_SIDEBAND_L       (95),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_CACHE_H               (125),
		.PKT_CACHE_L               (122),
		.PKT_THREAD_ID_H           (118),
		.PKT_THREAD_ID_L           (107),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (12),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (255),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) memorydma_m_write_agent (
		.clk                   (clk_0_clk_clk),                                                        //       clk.clk
		.reset                 (dma_0_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (memorydma_m_write_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (memorydma_m_write_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (memorydma_m_write_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (memorydma_m_write_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (memorydma_m_write_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (memorydma_m_write_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (memorydma_m_write_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (memorydma_m_write_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (memorydma_m_write_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (memorydma_m_write_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (memorydma_m_write_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (memorydma_m_write_agent_cp_valid),                                     //        cp.valid
		.cp_data               (memorydma_m_write_agent_cp_data),                                      //          .data
		.cp_startofpacket      (memorydma_m_write_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (memorydma_m_write_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (memorydma_m_write_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_007_src_valid),                                                //        rp.valid
		.rp_data               (rsp_mux_007_src_data),                                                 //          .data
		.rp_channel            (rsp_mux_007_src_channel),                                              //          .channel
		.rp_startofpacket      (rsp_mux_007_src_startofpacket),                                        //          .startofpacket
		.rp_endofpacket        (rsp_mux_007_src_endofpacket),                                          //          .endofpacket
		.rp_ready              (rsp_mux_007_src_ready),                                                //          .ready
		.av_response           (),                                                                     // (terminated)
		.av_writeresponsevalid ()                                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (166),
		.PKT_ORI_BURST_SIZE_L      (164),
		.PKT_RESPONSE_STATUS_H     (163),
		.PKT_RESPONSE_STATUS_L     (162),
		.PKT_BURST_SIZE_H          (128),
		.PKT_BURST_SIZE_L          (126),
		.PKT_TRANS_LOCK            (108),
		.PKT_BEGIN_BURST           (133),
		.PKT_PROTECTION_H          (157),
		.PKT_PROTECTION_L          (155),
		.PKT_BURSTWRAP_H           (125),
		.PKT_BURSTWRAP_L           (118),
		.PKT_BYTE_CNT_H            (117),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (138),
		.PKT_SRC_ID_L              (135),
		.PKT_DEST_ID_H             (142),
		.PKT_DEST_ID_L             (139),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (167),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_memory2_0_s1_agent (
		.clk                     (clk_0_clk_clk),                                           //             clk.clk
		.reset                   (dma_0_reset_reset_bridge_in_reset_reset),                 //       clk_reset.reset
		.m0_address              (onchip_memory2_0_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (onchip_memory2_0_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (onchip_memory2_0_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (onchip_memory2_0_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (onchip_memory2_0_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (onchip_memory2_0_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (onchip_memory2_0_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (onchip_memory2_0_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (onchip_memory2_0_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (onchip_memory2_0_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (onchip_memory2_0_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (onchip_memory2_0_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (onchip_memory2_0_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (onchip_memory2_0_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (onchip_memory2_0_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (onchip_memory2_0_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (onchip_memory2_0_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (onchip_memory2_0_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (onchip_memory2_0_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (onchip_memory2_0_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (onchip_memory2_0_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (onchip_memory2_0_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (onchip_memory2_0_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (onchip_memory2_0_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (onchip_memory2_0_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (onchip_memory2_0_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_0_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (onchip_memory2_0_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (onchip_memory2_0_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (168),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (dma_0_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (onchip_memory2_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_memory2_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_memory2_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (66),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (dma_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (onchip_memory2_0_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (onchip_memory2_0_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (onchip_memory2_0_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (onchip_memory2_0_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (onchip_memory2_0_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (onchip_memory2_0_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_startofpacket  (1'b0),                                           // (terminated)
		.in_endofpacket    (1'b0),                                           // (terminated)
		.out_startofpacket (),                                               // (terminated)
		.out_endofpacket   (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pio_led_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (dma_0_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (pio_led_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pio_led_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pio_led_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pio_led_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pio_led_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (pio_led_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pio_led_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pio_led_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (pio_led_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pio_led_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (pio_led_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (pio_led_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pio_led_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (pio_led_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (pio_led_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (pio_led_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pio_led_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pio_led_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pio_led_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pio_led_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pio_led_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pio_led_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pio_led_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pio_led_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pio_led_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pio_led_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pio_led_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pio_led_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pio_led_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pio_led_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pio_led_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pio_led_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),              //                .error
		.rdata_fifo_src_ready    (pio_led_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_led_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pio_led_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_led_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                               //       clk.clk
		.reset             (dma_0_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (pio_led_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pio_led_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pio_led_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pio_led_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pio_led_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pio_led_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pio_led_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pio_led_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pio_led_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pio_led_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_led_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                           //       clk.clk
		.reset             (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pio_led_s1_agent_rdata_fifo_src_data),    //        in.data
		.in_valid          (pio_led_s1_agent_rdata_fifo_src_valid),   //          .valid
		.in_ready          (pio_led_s1_agent_rdata_fifo_src_ready),   //          .ready
		.out_data          (pio_led_s1_agent_rdata_fifo_out_data),    //       out.data
		.out_valid         (pio_led_s1_agent_rdata_fifo_out_valid),   //          .valid
		.out_ready         (pio_led_s1_agent_rdata_fifo_out_ready),   //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (166),
		.PKT_ORI_BURST_SIZE_L      (164),
		.PKT_RESPONSE_STATUS_H     (163),
		.PKT_RESPONSE_STATUS_L     (162),
		.PKT_BURST_SIZE_H          (128),
		.PKT_BURST_SIZE_L          (126),
		.PKT_TRANS_LOCK            (108),
		.PKT_BEGIN_BURST           (133),
		.PKT_PROTECTION_H          (157),
		.PKT_PROTECTION_L          (155),
		.PKT_BURSTWRAP_H           (125),
		.PKT_BURSTWRAP_L           (118),
		.PKT_BYTE_CNT_H            (117),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (138),
		.PKT_SRC_ID_L              (135),
		.PKT_DEST_ID_H             (142),
		.PKT_DEST_ID_L             (139),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (167),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_memory2_1_s1_agent (
		.clk                     (clk_0_clk_clk),                                           //             clk.clk
		.reset                   (dma_0_reset_reset_bridge_in_reset_reset),                 //       clk_reset.reset
		.m0_address              (onchip_memory2_1_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (onchip_memory2_1_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (onchip_memory2_1_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (onchip_memory2_1_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (onchip_memory2_1_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (onchip_memory2_1_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (onchip_memory2_1_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (onchip_memory2_1_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (onchip_memory2_1_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (onchip_memory2_1_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (onchip_memory2_1_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (onchip_memory2_1_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (onchip_memory2_1_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (onchip_memory2_1_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (onchip_memory2_1_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (onchip_memory2_1_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (onchip_memory2_1_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (onchip_memory2_1_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (onchip_memory2_1_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (onchip_memory2_1_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (onchip_memory2_1_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (onchip_memory2_1_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (onchip_memory2_1_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_1_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (onchip_memory2_1_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_1_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (onchip_memory2_1_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (onchip_memory2_1_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (onchip_memory2_1_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (onchip_memory2_1_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_1_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (onchip_memory2_1_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (onchip_memory2_1_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_1_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (onchip_memory2_1_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (168),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_1_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (dma_0_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (onchip_memory2_1_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_memory2_1_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_memory2_1_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_memory2_1_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory2_1_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_memory2_1_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_memory2_1_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_memory2_1_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_memory2_1_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_memory2_1_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (66),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_1_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (dma_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (onchip_memory2_1_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (onchip_memory2_1_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (onchip_memory2_1_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (onchip_memory2_1_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (onchip_memory2_1_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (onchip_memory2_1_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_startofpacket  (1'b0),                                           // (terminated)
		.in_endofpacket    (1'b0),                                           // (terminated)
		.out_startofpacket (),                                               // (terminated)
		.out_endofpacket   (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mm_clock_crossing_bridge_0_s0_agent (
		.clk                     (clk_0_clk_clk),                                                     //             clk.clk
		.reset                   (dma_0_reset_reset_bridge_in_reset_reset),                           //       clk_reset.reset
		.m0_address              (mm_clock_crossing_bridge_0_s0_agent_m0_address),                    //              m0.address
		.m0_burstcount           (mm_clock_crossing_bridge_0_s0_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (mm_clock_crossing_bridge_0_s0_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (mm_clock_crossing_bridge_0_s0_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (mm_clock_crossing_bridge_0_s0_agent_m0_lock),                       //                .lock
		.m0_readdata             (mm_clock_crossing_bridge_0_s0_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (mm_clock_crossing_bridge_0_s0_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (mm_clock_crossing_bridge_0_s0_agent_m0_read),                       //                .read
		.m0_waitrequest          (mm_clock_crossing_bridge_0_s0_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (mm_clock_crossing_bridge_0_s0_agent_m0_writedata),                  //                .writedata
		.m0_write                (mm_clock_crossing_bridge_0_s0_agent_m0_write),                      //                .write
		.rp_endofpacket          (mm_clock_crossing_bridge_0_s0_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (mm_clock_crossing_bridge_0_s0_agent_rp_ready),                      //                .ready
		.rp_valid                (mm_clock_crossing_bridge_0_s0_agent_rp_valid),                      //                .valid
		.rp_data                 (mm_clock_crossing_bridge_0_s0_agent_rp_data),                       //                .data
		.rp_startofpacket        (mm_clock_crossing_bridge_0_s0_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (mm_clock_crossing_bridge_0_s0_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (mm_clock_crossing_bridge_0_s0_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (mm_clock_crossing_bridge_0_s0_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (mm_clock_crossing_bridge_0_s0_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (mm_clock_crossing_bridge_0_s0_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (mm_clock_crossing_bridge_0_s0_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (mm_clock_crossing_bridge_0_s0_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (mm_clock_crossing_bridge_0_s0_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (mm_clock_crossing_bridge_0_s0_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (mm_clock_crossing_bridge_0_s0_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (mm_clock_crossing_bridge_0_s0_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                                 //                .error
		.rdata_fifo_src_ready    (mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (129),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_clock_crossing_bridge_0_s0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                  //       clk.clk
		.reset             (dma_0_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_data           (mm_clock_crossing_bridge_0_s0_agent_rf_source_data),             //        in.data
		.in_valid          (mm_clock_crossing_bridge_0_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (mm_clock_crossing_bridge_0_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mm_clock_crossing_bridge_0_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mm_clock_crossing_bridge_0_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_clock_crossing_bridge_0_s0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (dma_0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                     // (terminated)
		.out_startofpacket (),                                                         // (terminated)
		.out_endofpacket   (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (clk_0_clk_clk),                                                   //             clk.clk
		.reset                   (dma_0_reset_reset_bridge_in_reset_reset),                         //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (jtag_uart_avalon_jtag_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (jtag_uart_avalon_jtag_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (jtag_uart_avalon_jtag_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (jtag_uart_avalon_jtag_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (jtag_uart_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (jtag_uart_avalon_jtag_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                //       clk.clk
		.reset             (dma_0_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                          //       clk.clk
		.reset             (dma_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_startofpacket  (1'b0),                                                   // (terminated)
		.in_endofpacket    (1'b0),                                                   // (terminated)
		.out_startofpacket (),                                                       // (terminated)
		.out_endofpacket   (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_0_control_port_slave_agent (
		.clk                     (clk_0_clk_clk),                                                //             clk.clk
		.reset                   (dma_0_reset_reset_bridge_in_reset_reset),                      //       clk_reset.reset
		.m0_address              (dma_0_control_port_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dma_0_control_port_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dma_0_control_port_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dma_0_control_port_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dma_0_control_port_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (dma_0_control_port_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dma_0_control_port_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dma_0_control_port_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (dma_0_control_port_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dma_0_control_port_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (dma_0_control_port_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (dma_0_control_port_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dma_0_control_port_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (dma_0_control_port_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (dma_0_control_port_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (dma_0_control_port_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dma_0_control_port_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (dma_0_control_port_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (dma_0_control_port_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (dma_0_control_port_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (dma_0_control_port_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (dma_0_control_port_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (dma_0_control_port_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dma_0_control_port_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dma_0_control_port_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dma_0_control_port_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dma_0_control_port_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dma_0_control_port_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dma_0_control_port_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dma_0_control_port_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dma_0_control_port_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dma_0_control_port_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (dma_0_control_port_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_0_control_port_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dma_0_control_port_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_0_control_port_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                             //       clk.clk
		.reset             (dma_0_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (dma_0_control_port_slave_agent_rf_source_data),             //        in.data
		.in_valid          (dma_0_control_port_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_0_control_port_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_0_control_port_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_0_control_port_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_0_control_port_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_0_control_port_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_0_control_port_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_0_control_port_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_0_control_port_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_0_control_port_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (dma_0_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (dma_0_control_port_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (dma_0_control_port_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (dma_0_control_port_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (dma_0_control_port_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (dma_0_control_port_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (dma_0_control_port_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_qsys_control_slave_agent (
		.clk                     (clk_0_clk_clk),                                                //             clk.clk
		.reset                   (dma_0_reset_reset_bridge_in_reset_reset),                      //       clk_reset.reset
		.m0_address              (sysid_qsys_control_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sysid_qsys_control_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sysid_qsys_control_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sysid_qsys_control_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sysid_qsys_control_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (sysid_qsys_control_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sysid_qsys_control_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sysid_qsys_control_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (sysid_qsys_control_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sysid_qsys_control_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (sysid_qsys_control_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (sysid_qsys_control_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sysid_qsys_control_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (sysid_qsys_control_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (sysid_qsys_control_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (sysid_qsys_control_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sysid_qsys_control_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sysid_qsys_control_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sysid_qsys_control_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sysid_qsys_control_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sysid_qsys_control_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sysid_qsys_control_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sysid_qsys_control_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sysid_qsys_control_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sysid_qsys_control_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sysid_qsys_control_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sysid_qsys_control_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sysid_qsys_control_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sysid_qsys_control_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sysid_qsys_control_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (sysid_qsys_control_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_qsys_control_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sysid_qsys_control_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_control_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                             //       clk.clk
		.reset             (dma_0_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (sysid_qsys_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_qsys_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_qsys_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_qsys_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_qsys_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_qsys_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_qsys_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_qsys_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_control_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (dma_0_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (sysid_qsys_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sysid_qsys_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sysid_qsys_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sysid_qsys_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sysid_qsys_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sysid_qsys_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) memorydma_csr_agent (
		.clk                     (clk_0_clk_clk),                                     //             clk.clk
		.reset                   (dma_0_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (memorydma_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (memorydma_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (memorydma_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (memorydma_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (memorydma_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (memorydma_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (memorydma_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (memorydma_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (memorydma_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (memorydma_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (memorydma_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (memorydma_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (memorydma_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (memorydma_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (memorydma_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (memorydma_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (memorydma_csr_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (memorydma_csr_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (memorydma_csr_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (memorydma_csr_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (memorydma_csr_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (memorydma_csr_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (memorydma_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (memorydma_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (memorydma_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (memorydma_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (memorydma_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (memorydma_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (memorydma_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (memorydma_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (memorydma_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (memorydma_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (memorydma_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (memorydma_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (memorydma_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) memorydma_csr_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (dma_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (memorydma_csr_agent_rf_source_data),             //        in.data
		.in_valid          (memorydma_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (memorydma_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (memorydma_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (memorydma_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (memorydma_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (memorydma_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (memorydma_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (memorydma_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (memorydma_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) memorydma_csr_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                            //       clk.clk
		.reset             (dma_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (memorydma_csr_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (memorydma_csr_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (memorydma_csr_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (memorydma_csr_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (memorydma_csr_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (memorydma_csr_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                    // (terminated)
		.csr_read          (1'b0),                                     // (terminated)
		.csr_write         (1'b0),                                     // (terminated)
		.csr_readdata      (),                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),     // (terminated)
		.almost_full_data  (),                                         // (terminated)
		.almost_empty_data (),                                         // (terminated)
		.in_startofpacket  (1'b0),                                     // (terminated)
		.in_endofpacket    (1'b0),                                     // (terminated)
		.out_startofpacket (),                                         // (terminated)
		.out_endofpacket   (),                                         // (terminated)
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_error         (),                                         // (terminated)
		.in_channel        (1'b0),                                     // (terminated)
		.out_channel       ()                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pio_reg1_s1_agent (
		.clk                     (clk_0_clk_clk),                                   //             clk.clk
		.reset                   (dma_0_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (pio_reg1_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pio_reg1_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pio_reg1_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pio_reg1_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pio_reg1_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (pio_reg1_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pio_reg1_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pio_reg1_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (pio_reg1_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pio_reg1_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (pio_reg1_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (pio_reg1_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pio_reg1_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (pio_reg1_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (pio_reg1_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (pio_reg1_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pio_reg1_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pio_reg1_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pio_reg1_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pio_reg1_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pio_reg1_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pio_reg1_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pio_reg1_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pio_reg1_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pio_reg1_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pio_reg1_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pio_reg1_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pio_reg1_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pio_reg1_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pio_reg1_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pio_reg1_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pio_reg1_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),               //                .error
		.rdata_fifo_src_ready    (pio_reg1_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_reg1_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pio_reg1_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_reg1_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                //       clk.clk
		.reset             (dma_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (pio_reg1_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pio_reg1_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pio_reg1_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pio_reg1_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pio_reg1_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pio_reg1_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pio_reg1_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pio_reg1_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pio_reg1_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pio_reg1_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_reg1_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                           //       clk.clk
		.reset             (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pio_reg1_s1_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (pio_reg1_s1_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (pio_reg1_s1_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (pio_reg1_s1_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (pio_reg1_s1_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (pio_reg1_s1_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pio_reg2_s1_agent (
		.clk                     (clk_0_clk_clk),                                   //             clk.clk
		.reset                   (dma_0_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (pio_reg2_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pio_reg2_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pio_reg2_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pio_reg2_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pio_reg2_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (pio_reg2_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pio_reg2_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pio_reg2_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (pio_reg2_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pio_reg2_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (pio_reg2_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (pio_reg2_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pio_reg2_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (pio_reg2_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (pio_reg2_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (pio_reg2_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pio_reg2_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pio_reg2_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pio_reg2_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pio_reg2_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pio_reg2_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pio_reg2_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pio_reg2_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pio_reg2_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pio_reg2_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pio_reg2_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pio_reg2_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pio_reg2_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pio_reg2_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pio_reg2_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pio_reg2_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pio_reg2_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),               //                .error
		.rdata_fifo_src_ready    (pio_reg2_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_reg2_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pio_reg2_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_reg2_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                //       clk.clk
		.reset             (dma_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (pio_reg2_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pio_reg2_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pio_reg2_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pio_reg2_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pio_reg2_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pio_reg2_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pio_reg2_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pio_reg2_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pio_reg2_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pio_reg2_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_reg2_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                           //       clk.clk
		.reset             (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pio_reg2_s1_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (pio_reg2_s1_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (pio_reg2_s1_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (pio_reg2_s1_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (pio_reg2_s1_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (pio_reg2_s1_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pio_reg3_s1_agent (
		.clk                     (clk_0_clk_clk),                                   //             clk.clk
		.reset                   (dma_0_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (pio_reg3_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pio_reg3_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pio_reg3_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pio_reg3_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pio_reg3_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (pio_reg3_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pio_reg3_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pio_reg3_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (pio_reg3_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pio_reg3_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (pio_reg3_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (pio_reg3_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pio_reg3_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (pio_reg3_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (pio_reg3_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (pio_reg3_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pio_reg3_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pio_reg3_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pio_reg3_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pio_reg3_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pio_reg3_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pio_reg3_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pio_reg3_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pio_reg3_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pio_reg3_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pio_reg3_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pio_reg3_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pio_reg3_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pio_reg3_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pio_reg3_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pio_reg3_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pio_reg3_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),               //                .error
		.rdata_fifo_src_ready    (pio_reg3_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_reg3_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pio_reg3_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_reg3_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                //       clk.clk
		.reset             (dma_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (pio_reg3_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pio_reg3_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pio_reg3_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pio_reg3_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pio_reg3_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pio_reg3_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pio_reg3_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pio_reg3_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pio_reg3_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pio_reg3_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_reg3_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                           //       clk.clk
		.reset             (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pio_reg3_s1_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (pio_reg3_s1_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (pio_reg3_s1_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (pio_reg3_s1_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (pio_reg3_s1_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (pio_reg3_s1_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) intr_capturer_0_avalon_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                   //             clk.clk
		.reset                   (dma_0_reset_reset_bridge_in_reset_reset),                         //       clk_reset.reset
		.m0_address              (intr_capturer_0_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (intr_capturer_0_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (intr_capturer_0_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (intr_capturer_0_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (intr_capturer_0_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (intr_capturer_0_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (intr_capturer_0_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (intr_capturer_0_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (intr_capturer_0_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (intr_capturer_0_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (intr_capturer_0_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (intr_capturer_0_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (intr_capturer_0_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (intr_capturer_0_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (intr_capturer_0_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (intr_capturer_0_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_011_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                                         //                .channel
		.rf_sink_ready           (intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (intr_capturer_0_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (intr_capturer_0_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (intr_capturer_0_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (intr_capturer_0_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (intr_capturer_0_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (intr_capturer_0_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (intr_capturer_0_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (intr_capturer_0_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) intr_capturer_0_avalon_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                   //       clk.clk
		.reset             (dma_0_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_data           (intr_capturer_0_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (intr_capturer_0_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (intr_capturer_0_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (intr_capturer_0_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (intr_capturer_0_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) intr_capturer_0_avalon_slave_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                             //       clk.clk
		.reset             (dma_0_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (intr_capturer_0_avalon_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (intr_capturer_0_avalon_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (intr_capturer_0_avalon_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (intr_capturer_0_avalon_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (intr_capturer_0_avalon_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (intr_capturer_0_avalon_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                      // (terminated)
		.out_startofpacket (),                                                          // (terminated)
		.out_endofpacket   (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	soc_system_mm_interconnect_1_router router (
		.sink_ready         (hps_0_h2f_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (hps_0_h2f_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (hps_0_h2f_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (hps_0_h2f_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                 //       src.ready
		.src_valid          (router_src_valid),                                                 //          .valid
		.src_data           (router_src_data),                                                  //          .data
		.src_channel        (router_src_channel),                                               //          .channel
		.src_startofpacket  (router_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_router router_001 (
		.sink_ready         (hps_0_h2f_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (hps_0_h2f_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (hps_0_h2f_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (hps_0_h2f_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                             //       src.ready
		.src_valid          (router_001_src_valid),                                             //          .valid
		.src_data           (router_001_src_data),                                              //          .data
		.src_channel        (router_001_src_channel),                                           //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_002 (
		.sink_ready         (fpga_only_master_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (fpga_only_master_master_agent_cp_valid),         //          .valid
		.sink_data          (fpga_only_master_master_agent_cp_data),          //          .data
		.sink_startofpacket (fpga_only_master_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (fpga_only_master_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_002_src_ready),                           //       src.ready
		.src_valid          (router_002_src_valid),                           //          .valid
		.src_data           (router_002_src_data),                            //          .data
		.src_channel        (router_002_src_channel),                         //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_003 router_003 (
		.sink_ready         (dma_0_read_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (dma_0_read_master_agent_cp_valid),         //          .valid
		.sink_data          (dma_0_read_master_agent_cp_data),          //          .data
		.sink_startofpacket (dma_0_read_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_0_read_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                            //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_003_src_ready),                     //       src.ready
		.src_valid          (router_003_src_valid),                     //          .valid
		.src_data           (router_003_src_data),                      //          .data
		.src_channel        (router_003_src_channel),                   //          .channel
		.src_startofpacket  (router_003_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_003 router_004 (
		.sink_ready         (dma_0_write_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (dma_0_write_master_agent_cp_valid),         //          .valid
		.sink_data          (dma_0_write_master_agent_cp_data),          //          .data
		.sink_startofpacket (dma_0_write_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_0_write_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_004_src_ready),                      //       src.ready
		.src_valid          (router_004_src_valid),                      //          .valid
		.src_data           (router_004_src_data),                       //          .data
		.src_channel        (router_004_src_channel),                    //          .channel
		.src_startofpacket  (router_004_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_005 router_005 (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                     //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                     //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                      //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),               //          .endofpacket
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                             //       src.ready
		.src_valid          (router_005_src_valid),                                             //          .valid
		.src_data           (router_005_src_data),                                              //          .data
		.src_channel        (router_005_src_channel),                                           //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_005 router_006 (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                      //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                      //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_read_cp_data),                       //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                //          .endofpacket
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                             //       src.ready
		.src_valid          (router_006_src_valid),                                             //          .valid
		.src_data           (router_006_src_data),                                              //          .data
		.src_channel        (router_006_src_channel),                                           //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_007 router_007 (
		.sink_ready         (memorydma_m_write_agent_cp_ready),         //      sink.ready
		.sink_valid         (memorydma_m_write_agent_cp_valid),         //          .valid
		.sink_data          (memorydma_m_write_agent_cp_data),          //          .data
		.sink_startofpacket (memorydma_m_write_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (memorydma_m_write_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                            //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_007_src_ready),                     //       src.ready
		.src_valid          (router_007_src_valid),                     //          .valid
		.src_data           (router_007_src_data),                      //          .data
		.src_channel        (router_007_src_channel),                   //          .channel
		.src_startofpacket  (router_007_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_008 router_008 (
		.sink_ready         (onchip_memory2_0_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (onchip_memory2_0_s1_agent_rp_valid),         //          .valid
		.sink_data          (onchip_memory2_0_s1_agent_rp_data),          //          .data
		.sink_startofpacket (onchip_memory2_0_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (onchip_memory2_0_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_008_src_ready),                       //       src.ready
		.src_valid          (router_008_src_valid),                       //          .valid
		.src_data           (router_008_src_data),                        //          .data
		.src_channel        (router_008_src_channel),                     //          .channel
		.src_startofpacket  (router_008_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_009 router_009 (
		.sink_ready         (pio_led_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (pio_led_s1_agent_rp_valid),               //          .valid
		.sink_data          (pio_led_s1_agent_rp_data),                //          .data
		.sink_startofpacket (pio_led_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (pio_led_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                    //       src.ready
		.src_valid          (router_009_src_valid),                    //          .valid
		.src_data           (router_009_src_data),                     //          .data
		.src_channel        (router_009_src_channel),                  //          .channel
		.src_startofpacket  (router_009_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)               //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_010 router_010 (
		.sink_ready         (onchip_memory2_1_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (onchip_memory2_1_s1_agent_rp_valid),         //          .valid
		.sink_data          (onchip_memory2_1_s1_agent_rp_data),          //          .data
		.sink_startofpacket (onchip_memory2_1_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (onchip_memory2_1_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_010_src_ready),                       //       src.ready
		.src_valid          (router_010_src_valid),                       //          .valid
		.src_data           (router_010_src_data),                        //          .data
		.src_channel        (router_010_src_channel),                     //          .channel
		.src_startofpacket  (router_010_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_011 router_011 (
		.sink_ready         (mm_clock_crossing_bridge_0_s0_agent_rp_ready),         //      sink.ready
		.sink_valid         (mm_clock_crossing_bridge_0_s0_agent_rp_valid),         //          .valid
		.sink_data          (mm_clock_crossing_bridge_0_s0_agent_rp_data),          //          .data
		.sink_startofpacket (mm_clock_crossing_bridge_0_s0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (mm_clock_crossing_bridge_0_s0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                        //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.src_ready          (router_011_src_ready),                                 //       src.ready
		.src_valid          (router_011_src_valid),                                 //          .valid
		.src_data           (router_011_src_data),                                  //          .data
		.src_channel        (router_011_src_channel),                               //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_012 router_012 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                      //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.src_ready          (router_012_src_ready),                               //       src.ready
		.src_valid          (router_012_src_valid),                               //          .valid
		.src_data           (router_012_src_data),                                //          .data
		.src_channel        (router_012_src_channel),                             //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                          //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_013 router_013 (
		.sink_ready         (dma_0_control_port_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (dma_0_control_port_slave_agent_rp_valid),         //          .valid
		.sink_data          (dma_0_control_port_slave_agent_rp_data),          //          .data
		.sink_startofpacket (dma_0_control_port_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_0_control_port_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_013_src_ready),                            //       src.ready
		.src_valid          (router_013_src_valid),                            //          .valid
		.src_data           (router_013_src_data),                             //          .data
		.src_channel        (router_013_src_channel),                          //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_012 router_014 (
		.sink_ready         (sysid_qsys_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sysid_qsys_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (sysid_qsys_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sysid_qsys_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysid_qsys_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_014_src_ready),                            //       src.ready
		.src_valid          (router_014_src_valid),                            //          .valid
		.src_data           (router_014_src_data),                             //          .data
		.src_channel        (router_014_src_channel),                          //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_013 router_015 (
		.sink_ready         (memorydma_csr_agent_rp_ready),            //      sink.ready
		.sink_valid         (memorydma_csr_agent_rp_valid),            //          .valid
		.sink_data          (memorydma_csr_agent_rp_data),             //          .data
		.sink_startofpacket (memorydma_csr_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (memorydma_csr_agent_rp_endofpacket),      //          .endofpacket
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                    //       src.ready
		.src_valid          (router_015_src_valid),                    //          .valid
		.src_data           (router_015_src_data),                     //          .data
		.src_channel        (router_015_src_channel),                  //          .channel
		.src_startofpacket  (router_015_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)               //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_013 router_016 (
		.sink_ready         (pio_reg1_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (pio_reg1_s1_agent_rp_valid),              //          .valid
		.sink_data          (pio_reg1_s1_agent_rp_data),               //          .data
		.sink_startofpacket (pio_reg1_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (pio_reg1_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                    //       src.ready
		.src_valid          (router_016_src_valid),                    //          .valid
		.src_data           (router_016_src_data),                     //          .data
		.src_channel        (router_016_src_channel),                  //          .channel
		.src_startofpacket  (router_016_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)               //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_013 router_017 (
		.sink_ready         (pio_reg2_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (pio_reg2_s1_agent_rp_valid),              //          .valid
		.sink_data          (pio_reg2_s1_agent_rp_data),               //          .data
		.sink_startofpacket (pio_reg2_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (pio_reg2_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                    //       src.ready
		.src_valid          (router_017_src_valid),                    //          .valid
		.src_data           (router_017_src_data),                     //          .data
		.src_channel        (router_017_src_channel),                  //          .channel
		.src_startofpacket  (router_017_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)               //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_013 router_018 (
		.sink_ready         (pio_reg3_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (pio_reg3_s1_agent_rp_valid),              //          .valid
		.sink_data          (pio_reg3_s1_agent_rp_data),               //          .data
		.sink_startofpacket (pio_reg3_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (pio_reg3_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                    //       src.ready
		.src_valid          (router_018_src_valid),                    //          .valid
		.src_data           (router_018_src_data),                     //          .data
		.src_channel        (router_018_src_channel),                  //          .channel
		.src_startofpacket  (router_018_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)               //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_019 router_019 (
		.sink_ready         (intr_capturer_0_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (intr_capturer_0_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (intr_capturer_0_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (intr_capturer_0_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (intr_capturer_0_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                         //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.src_ready          (router_019_src_ready),                                  //       src.ready
		.src_valid          (router_019_src_valid),                                  //          .valid
		.src_data           (router_019_src_data),                                   //          .data
		.src_channel        (router_019_src_channel),                                //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                             //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (142),
		.PKT_DEST_ID_L             (139),
		.PKT_SRC_ID_H              (138),
		.PKT_SRC_ID_L              (135),
		.PKT_BYTE_CNT_H            (117),
		.PKT_BYTE_CNT_L            (110),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (167),
		.ST_CHANNEL_W              (12),
		.VALID_WIDTH               (12),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_axi_master_wr_limiter (
		.clk                    (clk_0_clk_clk),                                                    //       clk.clk
		.reset                  (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                 //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                 //          .valid
		.cmd_sink_data          (router_src_data),                                                  //          .data
		.cmd_sink_channel       (router_src_channel),                                               //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                         //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                           //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_axi_master_wr_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                              //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                 //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                        //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                          //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_axi_master_wr_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_axi_master_wr_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_axi_master_wr_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_axi_master_wr_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_axi_master_wr_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_axi_master_wr_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_axi_master_wr_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (142),
		.PKT_DEST_ID_L             (139),
		.PKT_SRC_ID_H              (138),
		.PKT_SRC_ID_L              (135),
		.PKT_BYTE_CNT_H            (117),
		.PKT_BYTE_CNT_L            (110),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (167),
		.ST_CHANNEL_W              (12),
		.VALID_WIDTH               (12),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_axi_master_rd_limiter (
		.clk                    (clk_0_clk_clk),                                                    //       clk.clk
		.reset                  (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                             //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                             //          .valid
		.cmd_sink_data          (router_001_src_data),                                              //          .data
		.cmd_sink_channel       (router_001_src_channel),                                           //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                     //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                       //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_axi_master_rd_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                            //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                            //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                          //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                             //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                    //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                      //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_axi_master_rd_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_axi_master_rd_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_axi_master_rd_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_axi_master_rd_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_axi_master_rd_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_axi_master_rd_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_axi_master_rd_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (12),
		.VALID_WIDTH               (12),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) fpga_only_master_master_limiter (
		.clk                    (clk_0_clk_clk),                                         //       clk.clk
		.reset                  (dma_0_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                                  //  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                                  //          .valid
		.cmd_sink_data          (router_002_src_data),                                   //          .data
		.cmd_sink_channel       (router_002_src_channel),                                //          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                          //          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                            //          .endofpacket
		.cmd_src_ready          (fpga_only_master_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (fpga_only_master_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (fpga_only_master_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (fpga_only_master_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (fpga_only_master_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_002_src_ready),                                 //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_002_src_valid),                                 //          .valid
		.rsp_sink_channel       (rsp_mux_002_src_channel),                               //          .channel
		.rsp_sink_data          (rsp_mux_002_src_data),                                  //          .data
		.rsp_sink_startofpacket (rsp_mux_002_src_startofpacket),                         //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_002_src_endofpacket),                           //          .endofpacket
		.rsp_src_ready          (fpga_only_master_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (fpga_only_master_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (fpga_only_master_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (fpga_only_master_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (fpga_only_master_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (fpga_only_master_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (fpga_only_master_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (142),
		.PKT_DEST_ID_L             (139),
		.PKT_SRC_ID_H              (138),
		.PKT_SRC_ID_L              (135),
		.PKT_BYTE_CNT_H            (117),
		.PKT_BYTE_CNT_L            (110),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.MAX_OUTSTANDING_RESPONSES (130),
		.PIPELINED                 (0),
		.ST_DATA_W                 (167),
		.ST_CHANNEL_W              (12),
		.VALID_WIDTH               (12),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) dma_0_read_master_limiter (
		.clk                    (clk_0_clk_clk),                                   //       clk.clk
		.reset                  (dma_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.cmd_sink_ready         (router_003_src_ready),                            //  cmd_sink.ready
		.cmd_sink_valid         (router_003_src_valid),                            //          .valid
		.cmd_sink_data          (router_003_src_data),                             //          .data
		.cmd_sink_channel       (router_003_src_channel),                          //          .channel
		.cmd_sink_startofpacket (router_003_src_startofpacket),                    //          .startofpacket
		.cmd_sink_endofpacket   (router_003_src_endofpacket),                      //          .endofpacket
		.cmd_src_ready          (dma_0_read_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (dma_0_read_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (dma_0_read_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (dma_0_read_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (dma_0_read_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_003_src_ready),                           //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_003_src_valid),                           //          .valid
		.rsp_sink_channel       (rsp_mux_003_src_channel),                         //          .channel
		.rsp_sink_data          (rsp_mux_003_src_data),                            //          .data
		.rsp_sink_startofpacket (rsp_mux_003_src_startofpacket),                   //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_003_src_endofpacket),                     //          .endofpacket
		.rsp_src_ready          (dma_0_read_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (dma_0_read_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (dma_0_read_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (dma_0_read_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (dma_0_read_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (dma_0_read_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (dma_0_read_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (16),
		.PIPELINED                 (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (12),
		.VALID_WIDTH               (12),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_lw_axi_master_wr_limiter (
		.clk                    (clk_0_clk_clk),                                                    //       clk.clk
		.reset                  (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_005_src_ready),                                             //  cmd_sink.ready
		.cmd_sink_valid         (router_005_src_valid),                                             //          .valid
		.cmd_sink_data          (router_005_src_data),                                              //          .data
		.cmd_sink_channel       (router_005_src_channel),                                           //          .channel
		.cmd_sink_startofpacket (router_005_src_startofpacket),                                     //          .startofpacket
		.cmd_sink_endofpacket   (router_005_src_endofpacket),                                       //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                 //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data),                  //          .data
		.cmd_src_channel        (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel),               //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),         //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),           //          .endofpacket
		.rsp_sink_ready         (rsp_mux_005_src_ready),                                            //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_005_src_valid),                                            //          .valid
		.rsp_sink_channel       (rsp_mux_005_src_channel),                                          //          .channel
		.rsp_sink_data          (rsp_mux_005_src_data),                                             //          .data
		.rsp_sink_startofpacket (rsp_mux_005_src_startofpacket),                                    //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_005_src_endofpacket),                                      //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                 //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                 //          .valid
		.rsp_src_data           (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data),                  //          .data
		.rsp_src_channel        (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel),               //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),         //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),           //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data)                 // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (103),
		.PKT_SRC_ID_H              (102),
		.PKT_SRC_ID_L              (99),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (16),
		.PIPELINED                 (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (12),
		.VALID_WIDTH               (12),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_lw_axi_master_rd_limiter (
		.clk                    (clk_0_clk_clk),                                                    //       clk.clk
		.reset                  (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_006_src_ready),                                             //  cmd_sink.ready
		.cmd_sink_valid         (router_006_src_valid),                                             //          .valid
		.cmd_sink_data          (router_006_src_data),                                              //          .data
		.cmd_sink_channel       (router_006_src_channel),                                           //          .channel
		.cmd_sink_startofpacket (router_006_src_startofpacket),                                     //          .startofpacket
		.cmd_sink_endofpacket   (router_006_src_endofpacket),                                       //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                 //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data),                  //          .data
		.cmd_src_channel        (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel),               //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),         //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),           //          .endofpacket
		.rsp_sink_ready         (rsp_mux_006_src_ready),                                            //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_006_src_valid),                                            //          .valid
		.rsp_sink_channel       (rsp_mux_006_src_channel),                                          //          .channel
		.rsp_sink_data          (rsp_mux_006_src_data),                                             //          .data
		.rsp_sink_startofpacket (rsp_mux_006_src_startofpacket),                                    //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_006_src_endofpacket),                                      //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                 //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                 //          .valid
		.rsp_src_data           (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data),                  //          .data
		.rsp_src_channel        (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel),               //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),         //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),           //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data)                 // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_BEGIN_BURST           (133),
		.PKT_BYTE_CNT_H            (117),
		.PKT_BYTE_CNT_L            (110),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_BURST_SIZE_H          (128),
		.PKT_BURST_SIZE_L          (126),
		.PKT_BURST_TYPE_H          (130),
		.PKT_BURST_TYPE_L          (129),
		.PKT_BURSTWRAP_H           (125),
		.PKT_BURSTWRAP_L           (118),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (167),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (113),
		.OUT_BURSTWRAP_H           (125),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) onchip_memory2_0_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                           //       cr0.clk
		.reset                 (dma_0_reset_reset_bridge_in_reset_reset),                 // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                       //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                        //          .data
		.sink0_channel         (cmd_mux_src_channel),                                     //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                 //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                       //          .ready
		.source0_valid         (onchip_memory2_0_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (onchip_memory2_0_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (onchip_memory2_0_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (onchip_memory2_0_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (onchip_memory2_0_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (onchip_memory2_0_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pio_led_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                  //       cr0.clk
		.reset                 (dma_0_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                           //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                          //          .ready
		.source0_valid         (pio_led_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pio_led_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (pio_led_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pio_led_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pio_led_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pio_led_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_BEGIN_BURST           (133),
		.PKT_BYTE_CNT_H            (117),
		.PKT_BYTE_CNT_L            (110),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_BURST_SIZE_H          (128),
		.PKT_BURST_SIZE_L          (126),
		.PKT_BURST_TYPE_H          (130),
		.PKT_BURST_TYPE_L          (129),
		.PKT_BURSTWRAP_H           (125),
		.PKT_BURSTWRAP_L           (118),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (167),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (113),
		.OUT_BURSTWRAP_H           (125),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) onchip_memory2_1_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                           //       cr0.clk
		.reset                 (dma_0_reset_reset_bridge_in_reset_reset),                 // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                                   //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                    //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                                 //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                           //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                             //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                                   //          .ready
		.source0_valid         (onchip_memory2_1_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (onchip_memory2_1_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (onchip_memory2_1_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (onchip_memory2_1_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (onchip_memory2_1_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (onchip_memory2_1_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) mm_clock_crossing_bridge_0_s0_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                     //       cr0.clk
		.reset                 (dma_0_reset_reset_bridge_in_reset_reset),                           // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                                             //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                                              //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                                           //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                                     //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                                       //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                                             //          .ready
		.source0_valid         (mm_clock_crossing_bridge_0_s0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (mm_clock_crossing_bridge_0_s0_burst_adapter_source0_data),          //          .data
		.source0_channel       (mm_clock_crossing_bridge_0_s0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (mm_clock_crossing_bridge_0_s0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (mm_clock_crossing_bridge_0_s0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (mm_clock_crossing_bridge_0_s0_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) jtag_uart_avalon_jtag_slave_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                   //       cr0.clk
		.reset                 (dma_0_reset_reset_bridge_in_reset_reset),                         // cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                                           //     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                                            //          .data
		.sink0_channel         (cmd_mux_004_src_channel),                                         //          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                                     //          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                                           //          .ready
		.source0_valid         (jtag_uart_avalon_jtag_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (jtag_uart_avalon_jtag_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (jtag_uart_avalon_jtag_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (jtag_uart_avalon_jtag_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (jtag_uart_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (jtag_uart_avalon_jtag_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) dma_0_control_port_slave_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                //       cr0.clk
		.reset                 (dma_0_reset_reset_bridge_in_reset_reset),                      // cr0_reset.reset
		.sink0_valid           (cmd_mux_005_src_valid),                                        //     sink0.valid
		.sink0_data            (cmd_mux_005_src_data),                                         //          .data
		.sink0_channel         (cmd_mux_005_src_channel),                                      //          .channel
		.sink0_startofpacket   (cmd_mux_005_src_startofpacket),                                //          .startofpacket
		.sink0_endofpacket     (cmd_mux_005_src_endofpacket),                                  //          .endofpacket
		.sink0_ready           (cmd_mux_005_src_ready),                                        //          .ready
		.source0_valid         (dma_0_control_port_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (dma_0_control_port_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (dma_0_control_port_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (dma_0_control_port_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (dma_0_control_port_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (dma_0_control_port_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sysid_qsys_control_slave_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                //       cr0.clk
		.reset                 (dma_0_reset_reset_bridge_in_reset_reset),                      // cr0_reset.reset
		.sink0_valid           (cmd_mux_006_src_valid),                                        //     sink0.valid
		.sink0_data            (cmd_mux_006_src_data),                                         //          .data
		.sink0_channel         (cmd_mux_006_src_channel),                                      //          .channel
		.sink0_startofpacket   (cmd_mux_006_src_startofpacket),                                //          .startofpacket
		.sink0_endofpacket     (cmd_mux_006_src_endofpacket),                                  //          .endofpacket
		.sink0_ready           (cmd_mux_006_src_ready),                                        //          .ready
		.source0_valid         (sysid_qsys_control_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sysid_qsys_control_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (sysid_qsys_control_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sysid_qsys_control_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sysid_qsys_control_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sysid_qsys_control_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) memorydma_csr_burst_adapter (
		.clk                   (clk_0_clk_clk),                                     //       cr0.clk
		.reset                 (dma_0_reset_reset_bridge_in_reset_reset),           // cr0_reset.reset
		.sink0_valid           (cmd_mux_007_src_valid),                             //     sink0.valid
		.sink0_data            (cmd_mux_007_src_data),                              //          .data
		.sink0_channel         (cmd_mux_007_src_channel),                           //          .channel
		.sink0_startofpacket   (cmd_mux_007_src_startofpacket),                     //          .startofpacket
		.sink0_endofpacket     (cmd_mux_007_src_endofpacket),                       //          .endofpacket
		.sink0_ready           (cmd_mux_007_src_ready),                             //          .ready
		.source0_valid         (memorydma_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (memorydma_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (memorydma_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (memorydma_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (memorydma_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (memorydma_csr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pio_reg1_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                   //       cr0.clk
		.reset                 (dma_0_reset_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (cmd_mux_008_src_valid),                           //     sink0.valid
		.sink0_data            (cmd_mux_008_src_data),                            //          .data
		.sink0_channel         (cmd_mux_008_src_channel),                         //          .channel
		.sink0_startofpacket   (cmd_mux_008_src_startofpacket),                   //          .startofpacket
		.sink0_endofpacket     (cmd_mux_008_src_endofpacket),                     //          .endofpacket
		.sink0_ready           (cmd_mux_008_src_ready),                           //          .ready
		.source0_valid         (pio_reg1_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pio_reg1_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (pio_reg1_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pio_reg1_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pio_reg1_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pio_reg1_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pio_reg2_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                   //       cr0.clk
		.reset                 (dma_0_reset_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (cmd_mux_009_src_valid),                           //     sink0.valid
		.sink0_data            (cmd_mux_009_src_data),                            //          .data
		.sink0_channel         (cmd_mux_009_src_channel),                         //          .channel
		.sink0_startofpacket   (cmd_mux_009_src_startofpacket),                   //          .startofpacket
		.sink0_endofpacket     (cmd_mux_009_src_endofpacket),                     //          .endofpacket
		.sink0_ready           (cmd_mux_009_src_ready),                           //          .ready
		.source0_valid         (pio_reg2_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pio_reg2_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (pio_reg2_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pio_reg2_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pio_reg2_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pio_reg2_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pio_reg3_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                   //       cr0.clk
		.reset                 (dma_0_reset_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (cmd_mux_010_src_valid),                           //     sink0.valid
		.sink0_data            (cmd_mux_010_src_data),                            //          .data
		.sink0_channel         (cmd_mux_010_src_channel),                         //          .channel
		.sink0_startofpacket   (cmd_mux_010_src_startofpacket),                   //          .startofpacket
		.sink0_endofpacket     (cmd_mux_010_src_endofpacket),                     //          .endofpacket
		.sink0_ready           (cmd_mux_010_src_ready),                           //          .ready
		.source0_valid         (pio_reg3_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pio_reg3_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (pio_reg3_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pio_reg3_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pio_reg3_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pio_reg3_s1_burst_adapter_source0_ready)          //          .ready
	);

	soc_system_mm_interconnect_1_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                                    //        clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (hps_0_h2f_axi_master_wr_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (hps_0_h2f_axi_master_wr_limiter_cmd_src_channel),                  //           .channel
		.sink_data          (hps_0_h2f_axi_master_wr_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (hps_0_h2f_axi_master_wr_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_wr_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (hps_0_h2f_axi_master_wr_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                             //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                             //           .valid
		.src0_data          (cmd_demux_src0_data),                                              //           .data
		.src0_channel       (cmd_demux_src0_channel),                                           //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                     //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                       //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                             //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                             //           .valid
		.src1_data          (cmd_demux_src1_data),                                              //           .data
		.src1_channel       (cmd_demux_src1_channel),                                           //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                     //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                                       //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                             //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                             //           .valid
		.src2_data          (cmd_demux_src2_data),                                              //           .data
		.src2_channel       (cmd_demux_src2_channel),                                           //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                                     //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket)                                        //           .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_demux cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                                    //        clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (hps_0_h2f_axi_master_rd_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (hps_0_h2f_axi_master_rd_limiter_cmd_src_channel),                  //           .channel
		.sink_data          (hps_0_h2f_axi_master_rd_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (hps_0_h2f_axi_master_rd_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_rd_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (hps_0_h2f_axi_master_rd_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                                         //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                         //           .valid
		.src0_data          (cmd_demux_001_src0_data),                                          //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                                       //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                 //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                                   //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                         //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                         //           .valid
		.src1_data          (cmd_demux_001_src1_data),                                          //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                                       //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                                 //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                                   //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                                         //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                                         //           .valid
		.src2_data          (cmd_demux_001_src2_data),                                          //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                                       //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                                 //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket)                                    //           .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_demux_002 cmd_demux_002 (
		.clk                (clk_0_clk_clk),                                         //        clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset),               //  clk_reset.reset
		.sink_ready         (fpga_only_master_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (fpga_only_master_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (fpga_only_master_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (fpga_only_master_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (fpga_only_master_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (fpga_only_master_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_002_src0_ready),                              //       src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                              //           .valid
		.src0_data          (cmd_demux_002_src0_data),                               //           .data
		.src0_channel       (cmd_demux_002_src0_channel),                            //           .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                      //           .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),                        //           .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                              //       src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                              //           .valid
		.src1_data          (cmd_demux_002_src1_data),                               //           .data
		.src1_channel       (cmd_demux_002_src1_channel),                            //           .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),                      //           .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket),                        //           .endofpacket
		.src2_ready         (cmd_demux_002_src2_ready),                              //       src2.ready
		.src2_valid         (cmd_demux_002_src2_valid),                              //           .valid
		.src2_data          (cmd_demux_002_src2_data),                               //           .data
		.src2_channel       (cmd_demux_002_src2_channel),                            //           .channel
		.src2_startofpacket (cmd_demux_002_src2_startofpacket),                      //           .startofpacket
		.src2_endofpacket   (cmd_demux_002_src2_endofpacket),                        //           .endofpacket
		.src3_ready         (cmd_demux_002_src3_ready),                              //       src3.ready
		.src3_valid         (cmd_demux_002_src3_valid),                              //           .valid
		.src3_data          (cmd_demux_002_src3_data),                               //           .data
		.src3_channel       (cmd_demux_002_src3_channel),                            //           .channel
		.src3_startofpacket (cmd_demux_002_src3_startofpacket),                      //           .startofpacket
		.src3_endofpacket   (cmd_demux_002_src3_endofpacket)                         //           .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_demux cmd_demux_003 (
		.clk                (clk_0_clk_clk),                                   //        clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset),         //  clk_reset.reset
		.sink_ready         (dma_0_read_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (dma_0_read_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (dma_0_read_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (dma_0_read_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (dma_0_read_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (dma_0_read_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_003_src0_ready),                        //       src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                        //           .valid
		.src0_data          (cmd_demux_003_src0_data),                         //           .data
		.src0_channel       (cmd_demux_003_src0_channel),                      //           .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),                //           .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket),                  //           .endofpacket
		.src1_ready         (cmd_demux_003_src1_ready),                        //       src1.ready
		.src1_valid         (cmd_demux_003_src1_valid),                        //           .valid
		.src1_data          (cmd_demux_003_src1_data),                         //           .data
		.src1_channel       (cmd_demux_003_src1_channel),                      //           .channel
		.src1_startofpacket (cmd_demux_003_src1_startofpacket),                //           .startofpacket
		.src1_endofpacket   (cmd_demux_003_src1_endofpacket),                  //           .endofpacket
		.src2_ready         (cmd_demux_003_src2_ready),                        //       src2.ready
		.src2_valid         (cmd_demux_003_src2_valid),                        //           .valid
		.src2_data          (cmd_demux_003_src2_data),                         //           .data
		.src2_channel       (cmd_demux_003_src2_channel),                      //           .channel
		.src2_startofpacket (cmd_demux_003_src2_startofpacket),                //           .startofpacket
		.src2_endofpacket   (cmd_demux_003_src2_endofpacket)                   //           .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_demux_004 cmd_demux_004 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                    //      sink.ready
		.sink_channel       (router_004_src_channel),                  //          .channel
		.sink_data          (router_004_src_data),                     //          .data
		.sink_startofpacket (router_004_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_004_src_valid),                    //          .valid
		.src0_ready         (cmd_demux_004_src0_ready),                //      src0.ready
		.src0_valid         (cmd_demux_004_src0_valid),                //          .valid
		.src0_data          (cmd_demux_004_src0_data),                 //          .data
		.src0_channel       (cmd_demux_004_src0_channel),              //          .channel
		.src0_startofpacket (cmd_demux_004_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (cmd_demux_004_src0_endofpacket),          //          .endofpacket
		.src1_ready         (cmd_demux_004_src1_ready),                //      src1.ready
		.src1_valid         (cmd_demux_004_src1_valid),                //          .valid
		.src1_data          (cmd_demux_004_src1_data),                 //          .data
		.src1_channel       (cmd_demux_004_src1_channel),              //          .channel
		.src1_startofpacket (cmd_demux_004_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (cmd_demux_004_src1_endofpacket),          //          .endofpacket
		.src2_ready         (cmd_demux_004_src2_ready),                //      src2.ready
		.src2_valid         (cmd_demux_004_src2_valid),                //          .valid
		.src2_data          (cmd_demux_004_src2_data),                 //          .data
		.src2_channel       (cmd_demux_004_src2_channel),              //          .channel
		.src2_startofpacket (cmd_demux_004_src2_startofpacket),        //          .startofpacket
		.src2_endofpacket   (cmd_demux_004_src2_endofpacket)           //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_demux_005 cmd_demux_005 (
		.clk                (clk_0_clk_clk),                                                    //        clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                 //       sink.ready
		.sink_channel       (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel),               //           .channel
		.sink_data          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data),                  //           .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),         //           .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),           //           .endofpacket
		.sink_valid         (hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data),                // sink_valid.data
		.src0_ready         (cmd_demux_005_src0_ready),                                         //       src0.ready
		.src0_valid         (cmd_demux_005_src0_valid),                                         //           .valid
		.src0_data          (cmd_demux_005_src0_data),                                          //           .data
		.src0_channel       (cmd_demux_005_src0_channel),                                       //           .channel
		.src0_startofpacket (cmd_demux_005_src0_startofpacket),                                 //           .startofpacket
		.src0_endofpacket   (cmd_demux_005_src0_endofpacket),                                   //           .endofpacket
		.src1_ready         (cmd_demux_005_src1_ready),                                         //       src1.ready
		.src1_valid         (cmd_demux_005_src1_valid),                                         //           .valid
		.src1_data          (cmd_demux_005_src1_data),                                          //           .data
		.src1_channel       (cmd_demux_005_src1_channel),                                       //           .channel
		.src1_startofpacket (cmd_demux_005_src1_startofpacket),                                 //           .startofpacket
		.src1_endofpacket   (cmd_demux_005_src1_endofpacket),                                   //           .endofpacket
		.src2_ready         (cmd_demux_005_src2_ready),                                         //       src2.ready
		.src2_valid         (cmd_demux_005_src2_valid),                                         //           .valid
		.src2_data          (cmd_demux_005_src2_data),                                          //           .data
		.src2_channel       (cmd_demux_005_src2_channel),                                       //           .channel
		.src2_startofpacket (cmd_demux_005_src2_startofpacket),                                 //           .startofpacket
		.src2_endofpacket   (cmd_demux_005_src2_endofpacket),                                   //           .endofpacket
		.src3_ready         (cmd_demux_005_src3_ready),                                         //       src3.ready
		.src3_valid         (cmd_demux_005_src3_valid),                                         //           .valid
		.src3_data          (cmd_demux_005_src3_data),                                          //           .data
		.src3_channel       (cmd_demux_005_src3_channel),                                       //           .channel
		.src3_startofpacket (cmd_demux_005_src3_startofpacket),                                 //           .startofpacket
		.src3_endofpacket   (cmd_demux_005_src3_endofpacket),                                   //           .endofpacket
		.src4_ready         (cmd_demux_005_src4_ready),                                         //       src4.ready
		.src4_valid         (cmd_demux_005_src4_valid),                                         //           .valid
		.src4_data          (cmd_demux_005_src4_data),                                          //           .data
		.src4_channel       (cmd_demux_005_src4_channel),                                       //           .channel
		.src4_startofpacket (cmd_demux_005_src4_startofpacket),                                 //           .startofpacket
		.src4_endofpacket   (cmd_demux_005_src4_endofpacket),                                   //           .endofpacket
		.src5_ready         (cmd_demux_005_src5_ready),                                         //       src5.ready
		.src5_valid         (cmd_demux_005_src5_valid),                                         //           .valid
		.src5_data          (cmd_demux_005_src5_data),                                          //           .data
		.src5_channel       (cmd_demux_005_src5_channel),                                       //           .channel
		.src5_startofpacket (cmd_demux_005_src5_startofpacket),                                 //           .startofpacket
		.src5_endofpacket   (cmd_demux_005_src5_endofpacket),                                   //           .endofpacket
		.src6_ready         (cmd_demux_005_src6_ready),                                         //       src6.ready
		.src6_valid         (cmd_demux_005_src6_valid),                                         //           .valid
		.src6_data          (cmd_demux_005_src6_data),                                          //           .data
		.src6_channel       (cmd_demux_005_src6_channel),                                       //           .channel
		.src6_startofpacket (cmd_demux_005_src6_startofpacket),                                 //           .startofpacket
		.src6_endofpacket   (cmd_demux_005_src6_endofpacket),                                   //           .endofpacket
		.src7_ready         (cmd_demux_005_src7_ready),                                         //       src7.ready
		.src7_valid         (cmd_demux_005_src7_valid),                                         //           .valid
		.src7_data          (cmd_demux_005_src7_data),                                          //           .data
		.src7_channel       (cmd_demux_005_src7_channel),                                       //           .channel
		.src7_startofpacket (cmd_demux_005_src7_startofpacket),                                 //           .startofpacket
		.src7_endofpacket   (cmd_demux_005_src7_endofpacket)                                    //           .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_demux_005 cmd_demux_006 (
		.clk                (clk_0_clk_clk),                                                    //        clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                 //       sink.ready
		.sink_channel       (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel),               //           .channel
		.sink_data          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data),                  //           .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),         //           .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),           //           .endofpacket
		.sink_valid         (hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data),                // sink_valid.data
		.src0_ready         (cmd_demux_006_src0_ready),                                         //       src0.ready
		.src0_valid         (cmd_demux_006_src0_valid),                                         //           .valid
		.src0_data          (cmd_demux_006_src0_data),                                          //           .data
		.src0_channel       (cmd_demux_006_src0_channel),                                       //           .channel
		.src0_startofpacket (cmd_demux_006_src0_startofpacket),                                 //           .startofpacket
		.src0_endofpacket   (cmd_demux_006_src0_endofpacket),                                   //           .endofpacket
		.src1_ready         (cmd_demux_006_src1_ready),                                         //       src1.ready
		.src1_valid         (cmd_demux_006_src1_valid),                                         //           .valid
		.src1_data          (cmd_demux_006_src1_data),                                          //           .data
		.src1_channel       (cmd_demux_006_src1_channel),                                       //           .channel
		.src1_startofpacket (cmd_demux_006_src1_startofpacket),                                 //           .startofpacket
		.src1_endofpacket   (cmd_demux_006_src1_endofpacket),                                   //           .endofpacket
		.src2_ready         (cmd_demux_006_src2_ready),                                         //       src2.ready
		.src2_valid         (cmd_demux_006_src2_valid),                                         //           .valid
		.src2_data          (cmd_demux_006_src2_data),                                          //           .data
		.src2_channel       (cmd_demux_006_src2_channel),                                       //           .channel
		.src2_startofpacket (cmd_demux_006_src2_startofpacket),                                 //           .startofpacket
		.src2_endofpacket   (cmd_demux_006_src2_endofpacket),                                   //           .endofpacket
		.src3_ready         (cmd_demux_006_src3_ready),                                         //       src3.ready
		.src3_valid         (cmd_demux_006_src3_valid),                                         //           .valid
		.src3_data          (cmd_demux_006_src3_data),                                          //           .data
		.src3_channel       (cmd_demux_006_src3_channel),                                       //           .channel
		.src3_startofpacket (cmd_demux_006_src3_startofpacket),                                 //           .startofpacket
		.src3_endofpacket   (cmd_demux_006_src3_endofpacket),                                   //           .endofpacket
		.src4_ready         (cmd_demux_006_src4_ready),                                         //       src4.ready
		.src4_valid         (cmd_demux_006_src4_valid),                                         //           .valid
		.src4_data          (cmd_demux_006_src4_data),                                          //           .data
		.src4_channel       (cmd_demux_006_src4_channel),                                       //           .channel
		.src4_startofpacket (cmd_demux_006_src4_startofpacket),                                 //           .startofpacket
		.src4_endofpacket   (cmd_demux_006_src4_endofpacket),                                   //           .endofpacket
		.src5_ready         (cmd_demux_006_src5_ready),                                         //       src5.ready
		.src5_valid         (cmd_demux_006_src5_valid),                                         //           .valid
		.src5_data          (cmd_demux_006_src5_data),                                          //           .data
		.src5_channel       (cmd_demux_006_src5_channel),                                       //           .channel
		.src5_startofpacket (cmd_demux_006_src5_startofpacket),                                 //           .startofpacket
		.src5_endofpacket   (cmd_demux_006_src5_endofpacket),                                   //           .endofpacket
		.src6_ready         (cmd_demux_006_src6_ready),                                         //       src6.ready
		.src6_valid         (cmd_demux_006_src6_valid),                                         //           .valid
		.src6_data          (cmd_demux_006_src6_data),                                          //           .data
		.src6_channel       (cmd_demux_006_src6_channel),                                       //           .channel
		.src6_startofpacket (cmd_demux_006_src6_startofpacket),                                 //           .startofpacket
		.src6_endofpacket   (cmd_demux_006_src6_endofpacket),                                   //           .endofpacket
		.src7_ready         (cmd_demux_006_src7_ready),                                         //       src7.ready
		.src7_valid         (cmd_demux_006_src7_valid),                                         //           .valid
		.src7_data          (cmd_demux_006_src7_data),                                          //           .data
		.src7_channel       (cmd_demux_006_src7_channel),                                       //           .channel
		.src7_startofpacket (cmd_demux_006_src7_startofpacket),                                 //           .startofpacket
		.src7_endofpacket   (cmd_demux_006_src7_endofpacket)                                    //           .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_demux_007 cmd_demux_007 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                    //      sink.ready
		.sink_channel       (router_007_src_channel),                  //          .channel
		.sink_data          (router_007_src_data),                     //          .data
		.sink_startofpacket (router_007_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_007_src_valid),                    //          .valid
		.src0_ready         (cmd_demux_007_src0_ready),                //      src0.ready
		.src0_valid         (cmd_demux_007_src0_valid),                //          .valid
		.src0_data          (cmd_demux_007_src0_data),                 //          .data
		.src0_channel       (cmd_demux_007_src0_channel),              //          .channel
		.src0_startofpacket (cmd_demux_007_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (cmd_demux_007_src0_endofpacket),          //          .endofpacket
		.src1_ready         (cmd_demux_007_src1_ready),                //      src1.ready
		.src1_valid         (cmd_demux_007_src1_valid),                //          .valid
		.src1_data          (cmd_demux_007_src1_data),                 //          .data
		.src1_channel       (cmd_demux_007_src1_channel),              //          .channel
		.src1_startofpacket (cmd_demux_007_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (cmd_demux_007_src1_endofpacket)           //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                                                      //       clk.clk
		.reset               (dma_0_reset_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                                  //       src.ready
		.src_valid           (cmd_mux_src_valid),                                                                  //          .valid
		.src_data            (cmd_mux_src_data),                                                                   //          .data
		.src_channel         (cmd_mux_src_channel),                                                                //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                                          //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                                            //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                                               //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                                               //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                                             //          .channel
		.sink0_data          (cmd_demux_src0_data),                                                                //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                                                         //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                                                           //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                                                           //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                                                         //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                                                            //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                                                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket),                                                     //          .endofpacket
		.sink2_ready         (fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_ready),         //     sink2.ready
		.sink2_valid         (fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink2_channel       (fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink2_data          (fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_data),          //          .data
		.sink2_startofpacket (fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink2_endofpacket   (fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink3_ready         (cmd_demux_003_src0_ready),                                                           //     sink3.ready
		.sink3_valid         (cmd_demux_003_src0_valid),                                                           //          .valid
		.sink3_channel       (cmd_demux_003_src0_channel),                                                         //          .channel
		.sink3_data          (cmd_demux_003_src0_data),                                                            //          .data
		.sink3_startofpacket (cmd_demux_003_src0_startofpacket),                                                   //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src0_endofpacket),                                                     //          .endofpacket
		.sink4_ready         (cmd_demux_004_src0_ready),                                                           //     sink4.ready
		.sink4_valid         (cmd_demux_004_src0_valid),                                                           //          .valid
		.sink4_channel       (cmd_demux_004_src0_channel),                                                         //          .channel
		.sink4_data          (cmd_demux_004_src0_data),                                                            //          .data
		.sink4_startofpacket (cmd_demux_004_src0_startofpacket),                                                   //          .startofpacket
		.sink4_endofpacket   (cmd_demux_004_src0_endofpacket)                                                      //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux_001 cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                                             //       clk.clk
		.reset               (dma_0_reset_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                                     //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                                     //          .valid
		.src_data            (cmd_mux_001_src_data),                                                      //          .data
		.src_channel         (cmd_mux_001_src_channel),                                                   //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                               //          .endofpacket
		.sink0_ready         (hps_0_h2f_axi_master_wr_to_pio_led_s1_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (hps_0_h2f_axi_master_wr_to_pio_led_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (hps_0_h2f_axi_master_wr_to_pio_led_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (hps_0_h2f_axi_master_wr_to_pio_led_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (hps_0_h2f_axi_master_wr_to_pio_led_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (hps_0_h2f_axi_master_wr_to_pio_led_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (hps_0_h2f_axi_master_rd_to_pio_led_s1_cmd_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (hps_0_h2f_axi_master_rd_to_pio_led_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink1_channel       (hps_0_h2f_axi_master_rd_to_pio_led_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink1_data          (hps_0_h2f_axi_master_rd_to_pio_led_s1_cmd_width_adapter_src_data),          //          .data
		.sink1_startofpacket (hps_0_h2f_axi_master_rd_to_pio_led_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (hps_0_h2f_axi_master_rd_to_pio_led_s1_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                                                //       clk.clk
		.reset               (dma_0_reset_reset_bridge_in_reset_reset),                                      // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                                        //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                                        //          .valid
		.src_data            (cmd_mux_002_src_data),                                                         //          .data
		.src_channel         (cmd_mux_002_src_channel),                                                      //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                                                //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                                                  //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                                         //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                                         //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                                                       //          .channel
		.sink0_data          (cmd_demux_src2_data),                                                          //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                                                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                                                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                                                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                                                     //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                                                   //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                                                      //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),                                             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket),                                               //          .endofpacket
		.sink2_ready         (cmd_demux_003_src1_ready),                                                     //     sink2.ready
		.sink2_valid         (cmd_demux_003_src1_valid),                                                     //          .valid
		.sink2_channel       (cmd_demux_003_src1_channel),                                                   //          .channel
		.sink2_data          (cmd_demux_003_src1_data),                                                      //          .data
		.sink2_startofpacket (cmd_demux_003_src1_startofpacket),                                             //          .startofpacket
		.sink2_endofpacket   (cmd_demux_003_src1_endofpacket),                                               //          .endofpacket
		.sink3_ready         (cmd_demux_004_src1_ready),                                                     //     sink3.ready
		.sink3_valid         (cmd_demux_004_src1_valid),                                                     //          .valid
		.sink3_channel       (cmd_demux_004_src1_channel),                                                   //          .channel
		.sink3_data          (cmd_demux_004_src1_data),                                                      //          .data
		.sink3_startofpacket (cmd_demux_004_src1_startofpacket),                                             //          .startofpacket
		.sink3_endofpacket   (cmd_demux_004_src1_endofpacket),                                               //          .endofpacket
		.sink4_ready         (memorydma_m_write_to_onchip_memory2_1_s1_cmd_width_adapter_src_ready),         //     sink4.ready
		.sink4_valid         (memorydma_m_write_to_onchip_memory2_1_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink4_channel       (memorydma_m_write_to_onchip_memory2_1_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink4_data          (memorydma_m_write_to_onchip_memory2_1_s1_cmd_width_adapter_src_data),          //          .data
		.sink4_startofpacket (memorydma_m_write_to_onchip_memory2_1_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink4_endofpacket   (memorydma_m_write_to_onchip_memory2_1_s1_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux_003 cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                                                                           //       clk.clk
		.reset               (dma_0_reset_reset_bridge_in_reset_reset),                                                 // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                                                   //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                                                   //          .valid
		.src_data            (cmd_mux_003_src_data),                                                                    //          .data
		.src_channel         (cmd_mux_003_src_channel),                                                                 //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                                                           //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                                                             //          .endofpacket
		.sink0_ready         (dma_0_read_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_ready),          //     sink0.ready
		.sink0_valid         (dma_0_read_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_valid),          //          .valid
		.sink0_channel       (dma_0_read_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_channel),        //          .channel
		.sink0_data          (dma_0_read_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_data),           //          .data
		.sink0_startofpacket (dma_0_read_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (dma_0_read_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_endofpacket),    //          .endofpacket
		.sink1_ready         (dma_0_write_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (dma_0_write_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_valid),         //          .valid
		.sink1_channel       (dma_0_write_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_channel),       //          .channel
		.sink1_data          (dma_0_write_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_data),          //          .data
		.sink1_startofpacket (dma_0_write_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (dma_0_write_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink2_ready         (cmd_demux_005_src0_ready),                                                                //     sink2.ready
		.sink2_valid         (cmd_demux_005_src0_valid),                                                                //          .valid
		.sink2_channel       (cmd_demux_005_src0_channel),                                                              //          .channel
		.sink2_data          (cmd_demux_005_src0_data),                                                                 //          .data
		.sink2_startofpacket (cmd_demux_005_src0_startofpacket),                                                        //          .startofpacket
		.sink2_endofpacket   (cmd_demux_005_src0_endofpacket),                                                          //          .endofpacket
		.sink3_ready         (cmd_demux_006_src0_ready),                                                                //     sink3.ready
		.sink3_valid         (cmd_demux_006_src0_valid),                                                                //          .valid
		.sink3_channel       (cmd_demux_006_src0_channel),                                                              //          .channel
		.sink3_data          (cmd_demux_006_src0_data),                                                                 //          .data
		.sink3_startofpacket (cmd_demux_006_src0_startofpacket),                                                        //          .startofpacket
		.sink3_endofpacket   (cmd_demux_006_src0_endofpacket),                                                          //          .endofpacket
		.sink4_ready         (cmd_demux_007_src1_ready),                                                                //     sink4.ready
		.sink4_valid         (cmd_demux_007_src1_valid),                                                                //          .valid
		.sink4_channel       (cmd_demux_007_src1_channel),                                                              //          .channel
		.sink4_data          (cmd_demux_007_src1_data),                                                                 //          .data
		.sink4_startofpacket (cmd_demux_007_src1_startofpacket),                                                        //          .startofpacket
		.sink4_endofpacket   (cmd_demux_007_src1_endofpacket)                                                           //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux_004 cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                   //          .valid
		.src_data            (cmd_mux_004_src_data),                    //          .data
		.src_channel         (cmd_mux_004_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_002_src1_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_002_src1_valid),                //          .valid
		.sink0_channel       (cmd_demux_002_src1_channel),              //          .channel
		.sink0_data          (cmd_demux_002_src1_data),                 //          .data
		.sink0_startofpacket (cmd_demux_002_src1_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src1_endofpacket),          //          .endofpacket
		.sink1_ready         (cmd_demux_005_src1_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_005_src1_valid),                //          .valid
		.sink1_channel       (cmd_demux_005_src1_channel),              //          .channel
		.sink1_data          (cmd_demux_005_src1_data),                 //          .data
		.sink1_startofpacket (cmd_demux_005_src1_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_005_src1_endofpacket),          //          .endofpacket
		.sink2_ready         (cmd_demux_006_src1_ready),                //     sink2.ready
		.sink2_valid         (cmd_demux_006_src1_valid),                //          .valid
		.sink2_channel       (cmd_demux_006_src1_channel),              //          .channel
		.sink2_data          (cmd_demux_006_src1_data),                 //          .data
		.sink2_startofpacket (cmd_demux_006_src1_startofpacket),        //          .startofpacket
		.sink2_endofpacket   (cmd_demux_006_src1_endofpacket)           //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux_001 cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                   //          .valid
		.src_data            (cmd_mux_005_src_data),                    //          .data
		.src_channel         (cmd_mux_005_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_005_src2_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_005_src2_valid),                //          .valid
		.sink0_channel       (cmd_demux_005_src2_channel),              //          .channel
		.sink0_data          (cmd_demux_005_src2_data),                 //          .data
		.sink0_startofpacket (cmd_demux_005_src2_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_005_src2_endofpacket),          //          .endofpacket
		.sink1_ready         (cmd_demux_006_src2_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_006_src2_valid),                //          .valid
		.sink1_channel       (cmd_demux_006_src2_channel),              //          .channel
		.sink1_data          (cmd_demux_006_src2_data),                 //          .data
		.sink1_startofpacket (cmd_demux_006_src2_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_006_src2_endofpacket)           //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux_004 cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                   //          .valid
		.src_data            (cmd_mux_006_src_data),                    //          .data
		.src_channel         (cmd_mux_006_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_002_src2_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_002_src2_valid),                //          .valid
		.sink0_channel       (cmd_demux_002_src2_channel),              //          .channel
		.sink0_data          (cmd_demux_002_src2_data),                 //          .data
		.sink0_startofpacket (cmd_demux_002_src2_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src2_endofpacket),          //          .endofpacket
		.sink1_ready         (cmd_demux_005_src3_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_005_src3_valid),                //          .valid
		.sink1_channel       (cmd_demux_005_src3_channel),              //          .channel
		.sink1_data          (cmd_demux_005_src3_data),                 //          .data
		.sink1_startofpacket (cmd_demux_005_src3_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_005_src3_endofpacket),          //          .endofpacket
		.sink2_ready         (cmd_demux_006_src3_ready),                //     sink2.ready
		.sink2_valid         (cmd_demux_006_src3_valid),                //          .valid
		.sink2_channel       (cmd_demux_006_src3_channel),              //          .channel
		.sink2_data          (cmd_demux_006_src3_data),                 //          .data
		.sink2_startofpacket (cmd_demux_006_src3_startofpacket),        //          .startofpacket
		.sink2_endofpacket   (cmd_demux_006_src3_endofpacket)           //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux_001 cmd_mux_007 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                   //          .valid
		.src_data            (cmd_mux_007_src_data),                    //          .data
		.src_channel         (cmd_mux_007_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_005_src4_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_005_src4_valid),                //          .valid
		.sink0_channel       (cmd_demux_005_src4_channel),              //          .channel
		.sink0_data          (cmd_demux_005_src4_data),                 //          .data
		.sink0_startofpacket (cmd_demux_005_src4_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_005_src4_endofpacket),          //          .endofpacket
		.sink1_ready         (cmd_demux_006_src4_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_006_src4_valid),                //          .valid
		.sink1_channel       (cmd_demux_006_src4_channel),              //          .channel
		.sink1_data          (cmd_demux_006_src4_data),                 //          .data
		.sink1_startofpacket (cmd_demux_006_src4_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_006_src4_endofpacket)           //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux_001 cmd_mux_008 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                   //          .valid
		.src_data            (cmd_mux_008_src_data),                    //          .data
		.src_channel         (cmd_mux_008_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_005_src5_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_005_src5_valid),                //          .valid
		.sink0_channel       (cmd_demux_005_src5_channel),              //          .channel
		.sink0_data          (cmd_demux_005_src5_data),                 //          .data
		.sink0_startofpacket (cmd_demux_005_src5_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_005_src5_endofpacket),          //          .endofpacket
		.sink1_ready         (cmd_demux_006_src5_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_006_src5_valid),                //          .valid
		.sink1_channel       (cmd_demux_006_src5_channel),              //          .channel
		.sink1_data          (cmd_demux_006_src5_data),                 //          .data
		.sink1_startofpacket (cmd_demux_006_src5_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_006_src5_endofpacket)           //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux_001 cmd_mux_009 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                   //          .valid
		.src_data            (cmd_mux_009_src_data),                    //          .data
		.src_channel         (cmd_mux_009_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_005_src6_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_005_src6_valid),                //          .valid
		.sink0_channel       (cmd_demux_005_src6_channel),              //          .channel
		.sink0_data          (cmd_demux_005_src6_data),                 //          .data
		.sink0_startofpacket (cmd_demux_005_src6_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_005_src6_endofpacket),          //          .endofpacket
		.sink1_ready         (cmd_demux_006_src6_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_006_src6_valid),                //          .valid
		.sink1_channel       (cmd_demux_006_src6_channel),              //          .channel
		.sink1_data          (cmd_demux_006_src6_data),                 //          .data
		.sink1_startofpacket (cmd_demux_006_src6_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_006_src6_endofpacket)           //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux_001 cmd_mux_010 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                   //          .valid
		.src_data            (cmd_mux_010_src_data),                    //          .data
		.src_channel         (cmd_mux_010_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_005_src7_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_005_src7_valid),                //          .valid
		.sink0_channel       (cmd_demux_005_src7_channel),              //          .channel
		.sink0_data          (cmd_demux_005_src7_data),                 //          .data
		.sink0_startofpacket (cmd_demux_005_src7_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_005_src7_endofpacket),          //          .endofpacket
		.sink1_ready         (cmd_demux_006_src7_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_006_src7_valid),                //          .valid
		.sink1_channel       (cmd_demux_006_src7_channel),              //          .channel
		.sink1_data          (cmd_demux_006_src7_data),                 //          .data
		.sink1_startofpacket (cmd_demux_006_src7_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_006_src7_endofpacket)           //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux_011 cmd_mux_011 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                   //          .valid
		.src_data            (cmd_mux_011_src_data),                    //          .data
		.src_channel         (cmd_mux_011_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_002_src3_ready),                //     sink0.ready
		.sink0_valid         (cmd_demux_002_src3_valid),                //          .valid
		.sink0_channel       (cmd_demux_002_src3_channel),              //          .channel
		.sink0_data          (cmd_demux_002_src3_data),                 //          .data
		.sink0_startofpacket (cmd_demux_002_src3_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src3_endofpacket)           //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                    //      sink.ready
		.sink_channel       (router_008_src_channel),                  //          .channel
		.sink_data          (router_008_src_data),                     //          .data
		.sink_startofpacket (router_008_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_008_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_src0_data),                     //          .data
		.src0_channel       (rsp_demux_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_src1_data),                     //          .data
		.src1_channel       (rsp_demux_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),              //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                    //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                    //          .valid
		.src2_data          (rsp_demux_src2_data),                     //          .data
		.src2_channel       (rsp_demux_src2_channel),                  //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),            //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket),              //          .endofpacket
		.src3_ready         (rsp_demux_src3_ready),                    //      src3.ready
		.src3_valid         (rsp_demux_src3_valid),                    //          .valid
		.src3_data          (rsp_demux_src3_data),                     //          .data
		.src3_channel       (rsp_demux_src3_channel),                  //          .channel
		.src3_startofpacket (rsp_demux_src3_startofpacket),            //          .startofpacket
		.src3_endofpacket   (rsp_demux_src3_endofpacket),              //          .endofpacket
		.src4_ready         (rsp_demux_src4_ready),                    //      src4.ready
		.src4_valid         (rsp_demux_src4_valid),                    //          .valid
		.src4_data          (rsp_demux_src4_data),                     //          .data
		.src4_channel       (rsp_demux_src4_channel),                  //          .channel
		.src4_startofpacket (rsp_demux_src4_startofpacket),            //          .startofpacket
		.src4_endofpacket   (rsp_demux_src4_endofpacket)               //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_demux_007 rsp_demux_001 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                    //      sink.ready
		.sink_channel       (router_009_src_channel),                  //          .channel
		.sink_data          (router_009_src_data),                     //          .data
		.sink_startofpacket (router_009_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_009_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                //          .valid
		.src0_data          (rsp_demux_001_src0_data),                 //          .data
		.src0_channel       (rsp_demux_001_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                //          .valid
		.src1_data          (rsp_demux_001_src1_data),                 //          .data
		.src1_channel       (rsp_demux_001_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)           //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_002 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                    //      sink.ready
		.sink_channel       (router_010_src_channel),                  //          .channel
		.sink_data          (router_010_src_data),                     //          .data
		.sink_startofpacket (router_010_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_010_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                //          .valid
		.src0_data          (rsp_demux_002_src0_data),                 //          .data
		.src0_channel       (rsp_demux_002_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                //          .valid
		.src1_data          (rsp_demux_002_src1_data),                 //          .data
		.src1_channel       (rsp_demux_002_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket),          //          .endofpacket
		.src2_ready         (rsp_demux_002_src2_ready),                //      src2.ready
		.src2_valid         (rsp_demux_002_src2_valid),                //          .valid
		.src2_data          (rsp_demux_002_src2_data),                 //          .data
		.src2_channel       (rsp_demux_002_src2_channel),              //          .channel
		.src2_startofpacket (rsp_demux_002_src2_startofpacket),        //          .startofpacket
		.src2_endofpacket   (rsp_demux_002_src2_endofpacket),          //          .endofpacket
		.src3_ready         (rsp_demux_002_src3_ready),                //      src3.ready
		.src3_valid         (rsp_demux_002_src3_valid),                //          .valid
		.src3_data          (rsp_demux_002_src3_data),                 //          .data
		.src3_channel       (rsp_demux_002_src3_channel),              //          .channel
		.src3_startofpacket (rsp_demux_002_src3_startofpacket),        //          .startofpacket
		.src3_endofpacket   (rsp_demux_002_src3_endofpacket),          //          .endofpacket
		.src4_ready         (rsp_demux_002_src4_ready),                //      src4.ready
		.src4_valid         (rsp_demux_002_src4_valid),                //          .valid
		.src4_data          (rsp_demux_002_src4_data),                 //          .data
		.src4_channel       (rsp_demux_002_src4_channel),              //          .channel
		.src4_startofpacket (rsp_demux_002_src4_startofpacket),        //          .startofpacket
		.src4_endofpacket   (rsp_demux_002_src4_endofpacket)           //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux_003 rsp_demux_003 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                    //      sink.ready
		.sink_channel       (router_011_src_channel),                  //          .channel
		.sink_data          (router_011_src_data),                     //          .data
		.sink_startofpacket (router_011_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_011_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                //          .valid
		.src0_data          (rsp_demux_003_src0_data),                 //          .data
		.src0_channel       (rsp_demux_003_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                //          .valid
		.src1_data          (rsp_demux_003_src1_data),                 //          .data
		.src1_channel       (rsp_demux_003_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket),          //          .endofpacket
		.src2_ready         (rsp_demux_003_src2_ready),                //      src2.ready
		.src2_valid         (rsp_demux_003_src2_valid),                //          .valid
		.src2_data          (rsp_demux_003_src2_data),                 //          .data
		.src2_channel       (rsp_demux_003_src2_channel),              //          .channel
		.src2_startofpacket (rsp_demux_003_src2_startofpacket),        //          .startofpacket
		.src2_endofpacket   (rsp_demux_003_src2_endofpacket),          //          .endofpacket
		.src3_ready         (rsp_demux_003_src3_ready),                //      src3.ready
		.src3_valid         (rsp_demux_003_src3_valid),                //          .valid
		.src3_data          (rsp_demux_003_src3_data),                 //          .data
		.src3_channel       (rsp_demux_003_src3_channel),              //          .channel
		.src3_startofpacket (rsp_demux_003_src3_startofpacket),        //          .startofpacket
		.src3_endofpacket   (rsp_demux_003_src3_endofpacket),          //          .endofpacket
		.src4_ready         (rsp_demux_003_src4_ready),                //      src4.ready
		.src4_valid         (rsp_demux_003_src4_valid),                //          .valid
		.src4_data          (rsp_demux_003_src4_data),                 //          .data
		.src4_channel       (rsp_demux_003_src4_channel),              //          .channel
		.src4_startofpacket (rsp_demux_003_src4_startofpacket),        //          .startofpacket
		.src4_endofpacket   (rsp_demux_003_src4_endofpacket)           //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux_004 rsp_demux_004 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                    //      sink.ready
		.sink_channel       (router_012_src_channel),                  //          .channel
		.sink_data          (router_012_src_data),                     //          .data
		.sink_startofpacket (router_012_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_012_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                //          .valid
		.src0_data          (rsp_demux_004_src0_data),                 //          .data
		.src0_channel       (rsp_demux_004_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                //          .valid
		.src1_data          (rsp_demux_004_src1_data),                 //          .data
		.src1_channel       (rsp_demux_004_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket),          //          .endofpacket
		.src2_ready         (rsp_demux_004_src2_ready),                //      src2.ready
		.src2_valid         (rsp_demux_004_src2_valid),                //          .valid
		.src2_data          (rsp_demux_004_src2_data),                 //          .data
		.src2_channel       (rsp_demux_004_src2_channel),              //          .channel
		.src2_startofpacket (rsp_demux_004_src2_startofpacket),        //          .startofpacket
		.src2_endofpacket   (rsp_demux_004_src2_endofpacket)           //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_demux_007 rsp_demux_005 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                    //      sink.ready
		.sink_channel       (router_013_src_channel),                  //          .channel
		.sink_data          (router_013_src_data),                     //          .data
		.sink_startofpacket (router_013_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_013_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                //          .valid
		.src0_data          (rsp_demux_005_src0_data),                 //          .data
		.src0_channel       (rsp_demux_005_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                //          .valid
		.src1_data          (rsp_demux_005_src1_data),                 //          .data
		.src1_channel       (rsp_demux_005_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket)           //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux_004 rsp_demux_006 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                    //      sink.ready
		.sink_channel       (router_014_src_channel),                  //          .channel
		.sink_data          (router_014_src_data),                     //          .data
		.sink_startofpacket (router_014_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_014_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                //          .valid
		.src0_data          (rsp_demux_006_src0_data),                 //          .data
		.src0_channel       (rsp_demux_006_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                //          .valid
		.src1_data          (rsp_demux_006_src1_data),                 //          .data
		.src1_channel       (rsp_demux_006_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket),          //          .endofpacket
		.src2_ready         (rsp_demux_006_src2_ready),                //      src2.ready
		.src2_valid         (rsp_demux_006_src2_valid),                //          .valid
		.src2_data          (rsp_demux_006_src2_data),                 //          .data
		.src2_channel       (rsp_demux_006_src2_channel),              //          .channel
		.src2_startofpacket (rsp_demux_006_src2_startofpacket),        //          .startofpacket
		.src2_endofpacket   (rsp_demux_006_src2_endofpacket)           //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_demux_007 rsp_demux_007 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                    //      sink.ready
		.sink_channel       (router_015_src_channel),                  //          .channel
		.sink_data          (router_015_src_data),                     //          .data
		.sink_startofpacket (router_015_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_015_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                //          .valid
		.src0_data          (rsp_demux_007_src0_data),                 //          .data
		.src0_channel       (rsp_demux_007_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                //          .valid
		.src1_data          (rsp_demux_007_src1_data),                 //          .data
		.src1_channel       (rsp_demux_007_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket)           //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_demux_007 rsp_demux_008 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                    //      sink.ready
		.sink_channel       (router_016_src_channel),                  //          .channel
		.sink_data          (router_016_src_data),                     //          .data
		.sink_startofpacket (router_016_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_016_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                //          .valid
		.src0_data          (rsp_demux_008_src0_data),                 //          .data
		.src0_channel       (rsp_demux_008_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                //          .valid
		.src1_data          (rsp_demux_008_src1_data),                 //          .data
		.src1_channel       (rsp_demux_008_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket)           //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_demux_007 rsp_demux_009 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                    //      sink.ready
		.sink_channel       (router_017_src_channel),                  //          .channel
		.sink_data          (router_017_src_data),                     //          .data
		.sink_startofpacket (router_017_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_017_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                //          .valid
		.src0_data          (rsp_demux_009_src0_data),                 //          .data
		.src0_channel       (rsp_demux_009_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_009_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_009_src1_valid),                //          .valid
		.src1_data          (rsp_demux_009_src1_data),                 //          .data
		.src1_channel       (rsp_demux_009_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_009_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_009_src1_endofpacket)           //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_demux_007 rsp_demux_010 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                    //      sink.ready
		.sink_channel       (router_018_src_channel),                  //          .channel
		.sink_data          (router_018_src_data),                     //          .data
		.sink_startofpacket (router_018_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_018_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                //          .valid
		.src0_data          (rsp_demux_010_src0_data),                 //          .data
		.src0_channel       (rsp_demux_010_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),                //          .valid
		.src1_data          (rsp_demux_010_src1_data),                 //          .data
		.src1_channel       (rsp_demux_010_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket)           //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux_011 rsp_demux_011 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                    //      sink.ready
		.sink_channel       (router_019_src_channel),                  //          .channel
		.sink_data          (router_019_src_data),                     //          .data
		.sink_startofpacket (router_019_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_019_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                //          .valid
		.src0_data          (rsp_demux_011_src0_data),                 //          .data
		.src0_channel       (rsp_demux_011_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)           //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                                             //       clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                         //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                         //          .valid
		.src_data            (rsp_mux_src_data),                                                          //          .data
		.src_channel         (rsp_mux_src_channel),                                                       //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                                 //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                                   //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                                      //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                                      //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                                    //          .channel
		.sink0_data          (rsp_demux_src0_data),                                                       //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                              //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                                                //          .endofpacket
		.sink1_ready         (pio_led_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (pio_led_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid),         //          .valid
		.sink1_channel       (pio_led_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel),       //          .channel
		.sink1_data          (pio_led_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data),          //          .data
		.sink1_startofpacket (pio_led_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (pio_led_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                                                  //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                                                  //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                                                //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                                                   //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                                          //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket)                                             //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_mux rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                                             //       clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                                     //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                                     //          .valid
		.src_data            (rsp_mux_001_src_data),                                                      //          .data
		.src_channel         (rsp_mux_001_src_channel),                                                   //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                               //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                                                      //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                                                      //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                                                    //          .channel
		.sink0_data          (rsp_demux_src1_data),                                                       //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                                              //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),                                                //          .endofpacket
		.sink1_ready         (pio_led_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (pio_led_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid),         //          .valid
		.sink1_channel       (pio_led_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel),       //          .channel
		.sink1_data          (pio_led_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data),          //          .data
		.sink1_startofpacket (pio_led_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (pio_led_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink2_ready         (rsp_demux_002_src1_ready),                                                  //     sink2.ready
		.sink2_valid         (rsp_demux_002_src1_valid),                                                  //          .valid
		.sink2_channel       (rsp_demux_002_src1_channel),                                                //          .channel
		.sink2_data          (rsp_demux_002_src1_data),                                                   //          .data
		.sink2_startofpacket (rsp_demux_002_src1_startofpacket),                                          //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src1_endofpacket)                                             //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_mux_002 rsp_mux_002 (
		.clk                 (clk_0_clk_clk),                                                                      //       clk.clk
		.reset               (dma_0_reset_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                                                              //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                                                              //          .valid
		.src_data            (rsp_mux_002_src_data),                                                               //          .data
		.src_channel         (rsp_mux_002_src_channel),                                                            //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                                                      //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                                                        //          .endofpacket
		.sink0_ready         (onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (rsp_demux_004_src0_ready),                                                           //     sink1.ready
		.sink1_valid         (rsp_demux_004_src0_valid),                                                           //          .valid
		.sink1_channel       (rsp_demux_004_src0_channel),                                                         //          .channel
		.sink1_data          (rsp_demux_004_src0_data),                                                            //          .data
		.sink1_startofpacket (rsp_demux_004_src0_startofpacket),                                                   //          .startofpacket
		.sink1_endofpacket   (rsp_demux_004_src0_endofpacket),                                                     //          .endofpacket
		.sink2_ready         (rsp_demux_006_src0_ready),                                                           //     sink2.ready
		.sink2_valid         (rsp_demux_006_src0_valid),                                                           //          .valid
		.sink2_channel       (rsp_demux_006_src0_channel),                                                         //          .channel
		.sink2_data          (rsp_demux_006_src0_data),                                                            //          .data
		.sink2_startofpacket (rsp_demux_006_src0_startofpacket),                                                   //          .startofpacket
		.sink2_endofpacket   (rsp_demux_006_src0_endofpacket),                                                     //          .endofpacket
		.sink3_ready         (rsp_demux_011_src0_ready),                                                           //     sink3.ready
		.sink3_valid         (rsp_demux_011_src0_valid),                                                           //          .valid
		.sink3_channel       (rsp_demux_011_src0_channel),                                                         //          .channel
		.sink3_data          (rsp_demux_011_src0_data),                                                            //          .data
		.sink3_startofpacket (rsp_demux_011_src0_startofpacket),                                                   //          .startofpacket
		.sink3_endofpacket   (rsp_demux_011_src0_endofpacket)                                                      //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_mux rsp_mux_003 (
		.clk                 (clk_0_clk_clk),                                                                          //       clk.clk
		.reset               (dma_0_reset_reset_bridge_in_reset_reset),                                                // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                                                                  //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                                                                  //          .valid
		.src_data            (rsp_mux_003_src_data),                                                                   //          .data
		.src_channel         (rsp_mux_003_src_channel),                                                                //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),                                                          //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                                                            //          .endofpacket
		.sink0_ready         (rsp_demux_src3_ready),                                                                   //     sink0.ready
		.sink0_valid         (rsp_demux_src3_valid),                                                                   //          .valid
		.sink0_channel       (rsp_demux_src3_channel),                                                                 //          .channel
		.sink0_data          (rsp_demux_src3_data),                                                                    //          .data
		.sink0_startofpacket (rsp_demux_src3_startofpacket),                                                           //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src3_endofpacket),                                                             //          .endofpacket
		.sink1_ready         (rsp_demux_002_src2_ready),                                                               //     sink1.ready
		.sink1_valid         (rsp_demux_002_src2_valid),                                                               //          .valid
		.sink1_channel       (rsp_demux_002_src2_channel),                                                             //          .channel
		.sink1_data          (rsp_demux_002_src2_data),                                                                //          .data
		.sink1_startofpacket (rsp_demux_002_src2_startofpacket),                                                       //          .startofpacket
		.sink1_endofpacket   (rsp_demux_002_src2_endofpacket),                                                         //          .endofpacket
		.sink2_ready         (mm_clock_crossing_bridge_0_s0_to_dma_0_read_master_rsp_width_adapter_src_ready),         //     sink2.ready
		.sink2_valid         (mm_clock_crossing_bridge_0_s0_to_dma_0_read_master_rsp_width_adapter_src_valid),         //          .valid
		.sink2_channel       (mm_clock_crossing_bridge_0_s0_to_dma_0_read_master_rsp_width_adapter_src_channel),       //          .channel
		.sink2_data          (mm_clock_crossing_bridge_0_s0_to_dma_0_read_master_rsp_width_adapter_src_data),          //          .data
		.sink2_startofpacket (mm_clock_crossing_bridge_0_s0_to_dma_0_read_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink2_endofpacket   (mm_clock_crossing_bridge_0_s0_to_dma_0_read_master_rsp_width_adapter_src_endofpacket)    //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_mux rsp_mux_004 (
		.clk                 (clk_0_clk_clk),                                                                           //       clk.clk
		.reset               (dma_0_reset_reset_bridge_in_reset_reset),                                                 // clk_reset.reset
		.src_ready           (rsp_mux_004_src_ready),                                                                   //       src.ready
		.src_valid           (rsp_mux_004_src_valid),                                                                   //          .valid
		.src_data            (rsp_mux_004_src_data),                                                                    //          .data
		.src_channel         (rsp_mux_004_src_channel),                                                                 //          .channel
		.src_startofpacket   (rsp_mux_004_src_startofpacket),                                                           //          .startofpacket
		.src_endofpacket     (rsp_mux_004_src_endofpacket),                                                             //          .endofpacket
		.sink0_ready         (rsp_demux_src4_ready),                                                                    //     sink0.ready
		.sink0_valid         (rsp_demux_src4_valid),                                                                    //          .valid
		.sink0_channel       (rsp_demux_src4_channel),                                                                  //          .channel
		.sink0_data          (rsp_demux_src4_data),                                                                     //          .data
		.sink0_startofpacket (rsp_demux_src4_startofpacket),                                                            //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src4_endofpacket),                                                              //          .endofpacket
		.sink1_ready         (rsp_demux_002_src3_ready),                                                                //     sink1.ready
		.sink1_valid         (rsp_demux_002_src3_valid),                                                                //          .valid
		.sink1_channel       (rsp_demux_002_src3_channel),                                                              //          .channel
		.sink1_data          (rsp_demux_002_src3_data),                                                                 //          .data
		.sink1_startofpacket (rsp_demux_002_src3_startofpacket),                                                        //          .startofpacket
		.sink1_endofpacket   (rsp_demux_002_src3_endofpacket),                                                          //          .endofpacket
		.sink2_ready         (mm_clock_crossing_bridge_0_s0_to_dma_0_write_master_rsp_width_adapter_src_ready),         //     sink2.ready
		.sink2_valid         (mm_clock_crossing_bridge_0_s0_to_dma_0_write_master_rsp_width_adapter_src_valid),         //          .valid
		.sink2_channel       (mm_clock_crossing_bridge_0_s0_to_dma_0_write_master_rsp_width_adapter_src_channel),       //          .channel
		.sink2_data          (mm_clock_crossing_bridge_0_s0_to_dma_0_write_master_rsp_width_adapter_src_data),          //          .data
		.sink2_startofpacket (mm_clock_crossing_bridge_0_s0_to_dma_0_write_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink2_endofpacket   (mm_clock_crossing_bridge_0_s0_to_dma_0_write_master_rsp_width_adapter_src_endofpacket)    //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_mux_005 rsp_mux_005 (
		.clk                 (clk_0_clk_clk),                                                    //       clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_005_src_ready),                                            //       src.ready
		.src_valid           (rsp_mux_005_src_valid),                                            //          .valid
		.src_data            (rsp_mux_005_src_data),                                             //          .data
		.src_channel         (rsp_mux_005_src_channel),                                          //          .channel
		.src_startofpacket   (rsp_mux_005_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (rsp_mux_005_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (rsp_demux_003_src2_ready),                                         //     sink0.ready
		.sink0_valid         (rsp_demux_003_src2_valid),                                         //          .valid
		.sink0_channel       (rsp_demux_003_src2_channel),                                       //          .channel
		.sink0_data          (rsp_demux_003_src2_data),                                          //          .data
		.sink0_startofpacket (rsp_demux_003_src2_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_003_src2_endofpacket),                                   //          .endofpacket
		.sink1_ready         (rsp_demux_004_src1_ready),                                         //     sink1.ready
		.sink1_valid         (rsp_demux_004_src1_valid),                                         //          .valid
		.sink1_channel       (rsp_demux_004_src1_channel),                                       //          .channel
		.sink1_data          (rsp_demux_004_src1_data),                                          //          .data
		.sink1_startofpacket (rsp_demux_004_src1_startofpacket),                                 //          .startofpacket
		.sink1_endofpacket   (rsp_demux_004_src1_endofpacket),                                   //          .endofpacket
		.sink2_ready         (rsp_demux_005_src0_ready),                                         //     sink2.ready
		.sink2_valid         (rsp_demux_005_src0_valid),                                         //          .valid
		.sink2_channel       (rsp_demux_005_src0_channel),                                       //          .channel
		.sink2_data          (rsp_demux_005_src0_data),                                          //          .data
		.sink2_startofpacket (rsp_demux_005_src0_startofpacket),                                 //          .startofpacket
		.sink2_endofpacket   (rsp_demux_005_src0_endofpacket),                                   //          .endofpacket
		.sink3_ready         (rsp_demux_006_src1_ready),                                         //     sink3.ready
		.sink3_valid         (rsp_demux_006_src1_valid),                                         //          .valid
		.sink3_channel       (rsp_demux_006_src1_channel),                                       //          .channel
		.sink3_data          (rsp_demux_006_src1_data),                                          //          .data
		.sink3_startofpacket (rsp_demux_006_src1_startofpacket),                                 //          .startofpacket
		.sink3_endofpacket   (rsp_demux_006_src1_endofpacket),                                   //          .endofpacket
		.sink4_ready         (rsp_demux_007_src0_ready),                                         //     sink4.ready
		.sink4_valid         (rsp_demux_007_src0_valid),                                         //          .valid
		.sink4_channel       (rsp_demux_007_src0_channel),                                       //          .channel
		.sink4_data          (rsp_demux_007_src0_data),                                          //          .data
		.sink4_startofpacket (rsp_demux_007_src0_startofpacket),                                 //          .startofpacket
		.sink4_endofpacket   (rsp_demux_007_src0_endofpacket),                                   //          .endofpacket
		.sink5_ready         (rsp_demux_008_src0_ready),                                         //     sink5.ready
		.sink5_valid         (rsp_demux_008_src0_valid),                                         //          .valid
		.sink5_channel       (rsp_demux_008_src0_channel),                                       //          .channel
		.sink5_data          (rsp_demux_008_src0_data),                                          //          .data
		.sink5_startofpacket (rsp_demux_008_src0_startofpacket),                                 //          .startofpacket
		.sink5_endofpacket   (rsp_demux_008_src0_endofpacket),                                   //          .endofpacket
		.sink6_ready         (rsp_demux_009_src0_ready),                                         //     sink6.ready
		.sink6_valid         (rsp_demux_009_src0_valid),                                         //          .valid
		.sink6_channel       (rsp_demux_009_src0_channel),                                       //          .channel
		.sink6_data          (rsp_demux_009_src0_data),                                          //          .data
		.sink6_startofpacket (rsp_demux_009_src0_startofpacket),                                 //          .startofpacket
		.sink6_endofpacket   (rsp_demux_009_src0_endofpacket),                                   //          .endofpacket
		.sink7_ready         (rsp_demux_010_src0_ready),                                         //     sink7.ready
		.sink7_valid         (rsp_demux_010_src0_valid),                                         //          .valid
		.sink7_channel       (rsp_demux_010_src0_channel),                                       //          .channel
		.sink7_data          (rsp_demux_010_src0_data),                                          //          .data
		.sink7_startofpacket (rsp_demux_010_src0_startofpacket),                                 //          .startofpacket
		.sink7_endofpacket   (rsp_demux_010_src0_endofpacket)                                    //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_mux_005 rsp_mux_006 (
		.clk                 (clk_0_clk_clk),                                                    //       clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_006_src_ready),                                            //       src.ready
		.src_valid           (rsp_mux_006_src_valid),                                            //          .valid
		.src_data            (rsp_mux_006_src_data),                                             //          .data
		.src_channel         (rsp_mux_006_src_channel),                                          //          .channel
		.src_startofpacket   (rsp_mux_006_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (rsp_mux_006_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (rsp_demux_003_src3_ready),                                         //     sink0.ready
		.sink0_valid         (rsp_demux_003_src3_valid),                                         //          .valid
		.sink0_channel       (rsp_demux_003_src3_channel),                                       //          .channel
		.sink0_data          (rsp_demux_003_src3_data),                                          //          .data
		.sink0_startofpacket (rsp_demux_003_src3_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_003_src3_endofpacket),                                   //          .endofpacket
		.sink1_ready         (rsp_demux_004_src2_ready),                                         //     sink1.ready
		.sink1_valid         (rsp_demux_004_src2_valid),                                         //          .valid
		.sink1_channel       (rsp_demux_004_src2_channel),                                       //          .channel
		.sink1_data          (rsp_demux_004_src2_data),                                          //          .data
		.sink1_startofpacket (rsp_demux_004_src2_startofpacket),                                 //          .startofpacket
		.sink1_endofpacket   (rsp_demux_004_src2_endofpacket),                                   //          .endofpacket
		.sink2_ready         (rsp_demux_005_src1_ready),                                         //     sink2.ready
		.sink2_valid         (rsp_demux_005_src1_valid),                                         //          .valid
		.sink2_channel       (rsp_demux_005_src1_channel),                                       //          .channel
		.sink2_data          (rsp_demux_005_src1_data),                                          //          .data
		.sink2_startofpacket (rsp_demux_005_src1_startofpacket),                                 //          .startofpacket
		.sink2_endofpacket   (rsp_demux_005_src1_endofpacket),                                   //          .endofpacket
		.sink3_ready         (rsp_demux_006_src2_ready),                                         //     sink3.ready
		.sink3_valid         (rsp_demux_006_src2_valid),                                         //          .valid
		.sink3_channel       (rsp_demux_006_src2_channel),                                       //          .channel
		.sink3_data          (rsp_demux_006_src2_data),                                          //          .data
		.sink3_startofpacket (rsp_demux_006_src2_startofpacket),                                 //          .startofpacket
		.sink3_endofpacket   (rsp_demux_006_src2_endofpacket),                                   //          .endofpacket
		.sink4_ready         (rsp_demux_007_src1_ready),                                         //     sink4.ready
		.sink4_valid         (rsp_demux_007_src1_valid),                                         //          .valid
		.sink4_channel       (rsp_demux_007_src1_channel),                                       //          .channel
		.sink4_data          (rsp_demux_007_src1_data),                                          //          .data
		.sink4_startofpacket (rsp_demux_007_src1_startofpacket),                                 //          .startofpacket
		.sink4_endofpacket   (rsp_demux_007_src1_endofpacket),                                   //          .endofpacket
		.sink5_ready         (rsp_demux_008_src1_ready),                                         //     sink5.ready
		.sink5_valid         (rsp_demux_008_src1_valid),                                         //          .valid
		.sink5_channel       (rsp_demux_008_src1_channel),                                       //          .channel
		.sink5_data          (rsp_demux_008_src1_data),                                          //          .data
		.sink5_startofpacket (rsp_demux_008_src1_startofpacket),                                 //          .startofpacket
		.sink5_endofpacket   (rsp_demux_008_src1_endofpacket),                                   //          .endofpacket
		.sink6_ready         (rsp_demux_009_src1_ready),                                         //     sink6.ready
		.sink6_valid         (rsp_demux_009_src1_valid),                                         //          .valid
		.sink6_channel       (rsp_demux_009_src1_channel),                                       //          .channel
		.sink6_data          (rsp_demux_009_src1_data),                                          //          .data
		.sink6_startofpacket (rsp_demux_009_src1_startofpacket),                                 //          .startofpacket
		.sink6_endofpacket   (rsp_demux_009_src1_endofpacket),                                   //          .endofpacket
		.sink7_ready         (rsp_demux_010_src1_ready),                                         //     sink7.ready
		.sink7_valid         (rsp_demux_010_src1_valid),                                         //          .valid
		.sink7_channel       (rsp_demux_010_src1_channel),                                       //          .channel
		.sink7_data          (rsp_demux_010_src1_data),                                          //          .data
		.sink7_startofpacket (rsp_demux_010_src1_startofpacket),                                 //          .startofpacket
		.sink7_endofpacket   (rsp_demux_010_src1_endofpacket)                                    //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_mux_007 rsp_mux_007 (
		.clk                 (clk_0_clk_clk),                                                                //       clk.clk
		.reset               (dma_0_reset_reset_bridge_in_reset_reset),                                      // clk_reset.reset
		.src_ready           (rsp_mux_007_src_ready),                                                        //       src.ready
		.src_valid           (rsp_mux_007_src_valid),                                                        //          .valid
		.src_data            (rsp_mux_007_src_data),                                                         //          .data
		.src_channel         (rsp_mux_007_src_channel),                                                      //          .channel
		.src_startofpacket   (rsp_mux_007_src_startofpacket),                                                //          .startofpacket
		.src_endofpacket     (rsp_mux_007_src_endofpacket),                                                  //          .endofpacket
		.sink0_ready         (onchip_memory2_1_s1_to_memorydma_m_write_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (onchip_memory2_1_s1_to_memorydma_m_write_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (onchip_memory2_1_s1_to_memorydma_m_write_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (onchip_memory2_1_s1_to_memorydma_m_write_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (onchip_memory2_1_s1_to_memorydma_m_write_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (onchip_memory2_1_s1_to_memorydma_m_write_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (rsp_demux_003_src4_ready),                                                     //     sink1.ready
		.sink1_valid         (rsp_demux_003_src4_valid),                                                     //          .valid
		.sink1_channel       (rsp_demux_003_src4_channel),                                                   //          .channel
		.sink1_data          (rsp_demux_003_src4_data),                                                      //          .data
		.sink1_startofpacket (rsp_demux_003_src4_startofpacket),                                             //          .startofpacket
		.sink1_endofpacket   (rsp_demux_003_src4_endofpacket)                                                //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (117),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (125),
		.IN_PKT_BURSTWRAP_L            (118),
		.IN_PKT_BURST_SIZE_H           (128),
		.IN_PKT_BURST_SIZE_L           (126),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (130),
		.IN_PKT_BURST_TYPE_L           (129),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (81),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_axi_master_wr_to_pio_led_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                             //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_valid             (cmd_demux_src1_valid),                                                      //      sink.valid
		.in_channel           (cmd_demux_src1_channel),                                                    //          .channel
		.in_startofpacket     (cmd_demux_src1_startofpacket),                                              //          .startofpacket
		.in_endofpacket       (cmd_demux_src1_endofpacket),                                                //          .endofpacket
		.in_ready             (cmd_demux_src1_ready),                                                      //          .ready
		.in_data              (cmd_demux_src1_data),                                                       //          .data
		.out_endofpacket      (hps_0_h2f_axi_master_wr_to_pio_led_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_axi_master_wr_to_pio_led_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_axi_master_wr_to_pio_led_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_axi_master_wr_to_pio_led_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_axi_master_wr_to_pio_led_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_axi_master_wr_to_pio_led_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (117),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (125),
		.IN_PKT_BURSTWRAP_L            (118),
		.IN_PKT_BURST_SIZE_H           (128),
		.IN_PKT_BURST_SIZE_L           (126),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (130),
		.IN_PKT_BURST_TYPE_L           (129),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (81),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_axi_master_rd_to_pio_led_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                             //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_valid             (cmd_demux_001_src1_valid),                                                  //      sink.valid
		.in_channel           (cmd_demux_001_src1_channel),                                                //          .channel
		.in_startofpacket     (cmd_demux_001_src1_startofpacket),                                          //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src1_endofpacket),                                            //          .endofpacket
		.in_ready             (cmd_demux_001_src1_ready),                                                  //          .ready
		.in_data              (cmd_demux_001_src1_data),                                                   //          .data
		.out_endofpacket      (hps_0_h2f_axi_master_rd_to_pio_led_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_axi_master_rd_to_pio_led_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_axi_master_rd_to_pio_led_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_axi_master_rd_to_pio_led_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_axi_master_rd_to_pio_led_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_axi_master_rd_to_pio_led_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (81),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (82),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (117),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (128),
		.OUT_PKT_BURST_SIZE_L          (126),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (130),
		.OUT_PKT_BURST_TYPE_L          (129),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                      //       clk.clk
		.reset                (dma_0_reset_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.in_valid             (cmd_demux_002_src0_valid),                                                           //      sink.valid
		.in_channel           (cmd_demux_002_src0_channel),                                                         //          .channel
		.in_startofpacket     (cmd_demux_002_src0_startofpacket),                                                   //          .startofpacket
		.in_endofpacket       (cmd_demux_002_src0_endofpacket),                                                     //          .endofpacket
		.in_ready             (cmd_demux_002_src0_ready),                                                           //          .ready
		.in_data              (cmd_demux_002_src0_data),                                                            //          .data
		.out_endofpacket      (fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (117),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (125),
		.IN_PKT_BURSTWRAP_L            (118),
		.IN_PKT_BURST_SIZE_H           (128),
		.IN_PKT_BURST_SIZE_L           (126),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (130),
		.IN_PKT_BURST_TYPE_L           (129),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (81),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) dma_0_read_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                          //       clk.clk
		.reset                (dma_0_reset_reset_bridge_in_reset_reset),                                                // clk_reset.reset
		.in_valid             (cmd_demux_003_src2_valid),                                                               //      sink.valid
		.in_channel           (cmd_demux_003_src2_channel),                                                             //          .channel
		.in_startofpacket     (cmd_demux_003_src2_startofpacket),                                                       //          .startofpacket
		.in_endofpacket       (cmd_demux_003_src2_endofpacket),                                                         //          .endofpacket
		.in_ready             (cmd_demux_003_src2_ready),                                                               //          .ready
		.in_data              (cmd_demux_003_src2_data),                                                                //          .data
		.out_endofpacket      (dma_0_read_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_0_read_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_data),          //          .data
		.out_channel          (dma_0_read_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_0_read_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_0_read_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_0_read_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                  // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (117),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (125),
		.IN_PKT_BURSTWRAP_L            (118),
		.IN_PKT_BURST_SIZE_H           (128),
		.IN_PKT_BURST_SIZE_L           (126),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (130),
		.IN_PKT_BURST_TYPE_L           (129),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (81),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) dma_0_write_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                           //       clk.clk
		.reset                (dma_0_reset_reset_bridge_in_reset_reset),                                                 // clk_reset.reset
		.in_valid             (cmd_demux_004_src2_valid),                                                                //      sink.valid
		.in_channel           (cmd_demux_004_src2_channel),                                                              //          .channel
		.in_startofpacket     (cmd_demux_004_src2_startofpacket),                                                        //          .startofpacket
		.in_endofpacket       (cmd_demux_004_src2_endofpacket),                                                          //          .endofpacket
		.in_ready             (cmd_demux_004_src2_ready),                                                                //          .ready
		.in_data              (cmd_demux_004_src2_data),                                                                 //          .data
		.out_endofpacket      (dma_0_write_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (dma_0_write_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_data),          //          .data
		.out_channel          (dma_0_write_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (dma_0_write_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (dma_0_write_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (dma_0_write_master_to_mm_clock_crossing_bridge_0_s0_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (81),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (82),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (117),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (128),
		.OUT_PKT_BURST_SIZE_L          (126),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (130),
		.OUT_PKT_BURST_TYPE_L          (129),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) memorydma_m_write_to_onchip_memory2_1_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                //       clk.clk
		.reset                (dma_0_reset_reset_bridge_in_reset_reset),                                      // clk_reset.reset
		.in_valid             (cmd_demux_007_src0_valid),                                                     //      sink.valid
		.in_channel           (cmd_demux_007_src0_channel),                                                   //          .channel
		.in_startofpacket     (cmd_demux_007_src0_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (cmd_demux_007_src0_endofpacket),                                               //          .endofpacket
		.in_ready             (cmd_demux_007_src0_ready),                                                     //          .ready
		.in_data              (cmd_demux_007_src0_data),                                                      //          .data
		.out_endofpacket      (memorydma_m_write_to_onchip_memory2_1_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (memorydma_m_write_to_onchip_memory2_1_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (memorydma_m_write_to_onchip_memory2_1_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (memorydma_m_write_to_onchip_memory2_1_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (memorydma_m_write_to_onchip_memory2_1_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (memorydma_m_write_to_onchip_memory2_1_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (117),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (125),
		.IN_PKT_BURSTWRAP_L            (118),
		.IN_PKT_BURST_SIZE_H           (128),
		.IN_PKT_BURST_SIZE_L           (126),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (130),
		.IN_PKT_BURST_TYPE_L           (129),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (81),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                      //       clk.clk
		.reset                (dma_0_reset_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.in_valid             (rsp_demux_src2_valid),                                                               //      sink.valid
		.in_channel           (rsp_demux_src2_channel),                                                             //          .channel
		.in_startofpacket     (rsp_demux_src2_startofpacket),                                                       //          .startofpacket
		.in_endofpacket       (rsp_demux_src2_endofpacket),                                                         //          .endofpacket
		.in_ready             (rsp_demux_src2_ready),                                                               //          .ready
		.in_data              (rsp_demux_src2_data),                                                                //          .data
		.out_endofpacket      (onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (81),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (82),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (117),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (128),
		.OUT_PKT_BURST_SIZE_L          (126),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (130),
		.OUT_PKT_BURST_TYPE_L          (129),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) pio_led_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                             //       clk.clk
		.reset                (dma_0_reset_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.in_valid             (rsp_demux_001_src0_valid),                                                  //      sink.valid
		.in_channel           (rsp_demux_001_src0_channel),                                                //          .channel
		.in_startofpacket     (rsp_demux_001_src0_startofpacket),                                          //          .startofpacket
		.in_endofpacket       (rsp_demux_001_src0_endofpacket),                                            //          .endofpacket
		.in_ready             (rsp_demux_001_src0_ready),                                                  //          .ready
		.in_data              (rsp_demux_001_src0_data),                                                   //          .data
		.out_endofpacket      (pio_led_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pio_led_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (pio_led_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (pio_led_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (pio_led_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pio_led_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (81),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (82),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (117),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (128),
		.OUT_PKT_BURST_SIZE_L          (126),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (130),
		.OUT_PKT_BURST_TYPE_L          (129),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) pio_led_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                             //       clk.clk
		.reset                (dma_0_reset_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.in_valid             (rsp_demux_001_src1_valid),                                                  //      sink.valid
		.in_channel           (rsp_demux_001_src1_channel),                                                //          .channel
		.in_startofpacket     (rsp_demux_001_src1_startofpacket),                                          //          .startofpacket
		.in_endofpacket       (rsp_demux_001_src1_endofpacket),                                            //          .endofpacket
		.in_ready             (rsp_demux_001_src1_ready),                                                  //          .ready
		.in_data              (rsp_demux_001_src1_data),                                                   //          .data
		.out_endofpacket      (pio_led_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pio_led_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data),          //          .data
		.out_channel          (pio_led_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (pio_led_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (pio_led_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pio_led_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (117),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (125),
		.IN_PKT_BURSTWRAP_L            (118),
		.IN_PKT_BURST_SIZE_H           (128),
		.IN_PKT_BURST_SIZE_L           (126),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (130),
		.IN_PKT_BURST_TYPE_L           (129),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (81),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) onchip_memory2_1_s1_to_memorydma_m_write_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                //       clk.clk
		.reset                (dma_0_reset_reset_bridge_in_reset_reset),                                      // clk_reset.reset
		.in_valid             (rsp_demux_002_src4_valid),                                                     //      sink.valid
		.in_channel           (rsp_demux_002_src4_channel),                                                   //          .channel
		.in_startofpacket     (rsp_demux_002_src4_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (rsp_demux_002_src4_endofpacket),                                               //          .endofpacket
		.in_ready             (rsp_demux_002_src4_ready),                                                     //          .ready
		.in_data              (rsp_demux_002_src4_data),                                                      //          .data
		.out_endofpacket      (onchip_memory2_1_s1_to_memorydma_m_write_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (onchip_memory2_1_s1_to_memorydma_m_write_rsp_width_adapter_src_data),          //          .data
		.out_channel          (onchip_memory2_1_s1_to_memorydma_m_write_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (onchip_memory2_1_s1_to_memorydma_m_write_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (onchip_memory2_1_s1_to_memorydma_m_write_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (onchip_memory2_1_s1_to_memorydma_m_write_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (81),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (82),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (117),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (128),
		.OUT_PKT_BURST_SIZE_L          (126),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (130),
		.OUT_PKT_BURST_TYPE_L          (129),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) mm_clock_crossing_bridge_0_s0_to_dma_0_read_master_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                          //       clk.clk
		.reset                (dma_0_reset_reset_bridge_in_reset_reset),                                                // clk_reset.reset
		.in_valid             (rsp_demux_003_src0_valid),                                                               //      sink.valid
		.in_channel           (rsp_demux_003_src0_channel),                                                             //          .channel
		.in_startofpacket     (rsp_demux_003_src0_startofpacket),                                                       //          .startofpacket
		.in_endofpacket       (rsp_demux_003_src0_endofpacket),                                                         //          .endofpacket
		.in_ready             (rsp_demux_003_src0_ready),                                                               //          .ready
		.in_data              (rsp_demux_003_src0_data),                                                                //          .data
		.out_endofpacket      (mm_clock_crossing_bridge_0_s0_to_dma_0_read_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (mm_clock_crossing_bridge_0_s0_to_dma_0_read_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (mm_clock_crossing_bridge_0_s0_to_dma_0_read_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (mm_clock_crossing_bridge_0_s0_to_dma_0_read_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (mm_clock_crossing_bridge_0_s0_to_dma_0_read_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (mm_clock_crossing_bridge_0_s0_to_dma_0_read_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                  // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (81),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (82),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (117),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (128),
		.OUT_PKT_BURST_SIZE_L          (126),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (130),
		.OUT_PKT_BURST_TYPE_L          (129),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) mm_clock_crossing_bridge_0_s0_to_dma_0_write_master_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                           //       clk.clk
		.reset                (dma_0_reset_reset_bridge_in_reset_reset),                                                 // clk_reset.reset
		.in_valid             (rsp_demux_003_src1_valid),                                                                //      sink.valid
		.in_channel           (rsp_demux_003_src1_channel),                                                              //          .channel
		.in_startofpacket     (rsp_demux_003_src1_startofpacket),                                                        //          .startofpacket
		.in_endofpacket       (rsp_demux_003_src1_endofpacket),                                                          //          .endofpacket
		.in_ready             (rsp_demux_003_src1_ready),                                                                //          .ready
		.in_data              (rsp_demux_003_src1_data),                                                                 //          .data
		.out_endofpacket      (mm_clock_crossing_bridge_0_s0_to_dma_0_write_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (mm_clock_crossing_bridge_0_s0_to_dma_0_write_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (mm_clock_crossing_bridge_0_s0_to_dma_0_write_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (mm_clock_crossing_bridge_0_s0_to_dma_0_write_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (mm_clock_crossing_bridge_0_s0_to_dma_0_write_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (mm_clock_crossing_bridge_0_s0_to_dma_0_write_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                   // (terminated)
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (66),
		.inUsePackets    (0),
		.inDataWidth     (66),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (66),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (dma_0_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (onchip_memory2_0_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (onchip_memory2_0_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (onchip_memory2_0_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                   //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (dma_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pio_led_s1_agent_rdata_fifo_out_data),    //     in_0.data
		.in_0_valid     (pio_led_s1_agent_rdata_fifo_out_valid),   //         .valid
		.in_0_ready     (pio_led_s1_agent_rdata_fifo_out_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)        //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (66),
		.inUsePackets    (0),
		.inDataWidth     (66),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (66),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (dma_0_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (onchip_memory2_1_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (onchip_memory2_1_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (onchip_memory2_1_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)               //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_0_clk_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (dma_0_reset_reset_bridge_in_reset_reset),                  // in_rst_0.reset
		.in_0_data      (mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                        //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                        //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                         //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_0_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (dma_0_reset_reset_bridge_in_reset_reset),                // in_rst_0.reset
		.in_0_data      (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                       //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (dma_0_reset_reset_bridge_in_reset_reset),             // in_rst_0.reset
		.in_0_data      (dma_0_control_port_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (dma_0_control_port_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (dma_0_control_port_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (dma_0_reset_reset_bridge_in_reset_reset),             // in_rst_0.reset
		.in_0_data      (sysid_qsys_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (sysid_qsys_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (sysid_qsys_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_0_clk_clk),                            // in_clk_0.clk
		.in_rst_0_reset (dma_0_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (memorydma_csr_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (memorydma_csr_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (memorydma_csr_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),         //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),        //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),        //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)         //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_0_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (dma_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pio_reg1_s1_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (pio_reg1_s1_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (pio_reg1_s1_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)        //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_0_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (dma_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pio_reg2_s1_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (pio_reg2_s1_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (pio_reg2_s1_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)        //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (clk_0_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (dma_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pio_reg3_s1_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (pio_reg3_s1_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (pio_reg3_s1_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)        //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (clk_0_clk_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (dma_0_reset_reset_bridge_in_reset_reset),                   // in_rst_0.reset
		.in_0_data      (intr_capturer_0_avalon_slave_0_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (intr_capturer_0_avalon_slave_0_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (intr_capturer_0_avalon_slave_0_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                          //         .error
	);

endmodule
